{
    "sourceFile": "src/components/flow/10.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 12,
            "patches": [
                {
                    "date": 1707036801677,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1707036827470,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,54 @@\n-// part 16\r\n-// SVGFactory.js\r\n+// part 15\r\n+// SVGModel.js\r\n // import the necessary modules\r\n-import * as React from 'react';\r\n-import { AbstractReactFactory } from '@projectstorm/react-canvas-core';\r\n-import { SVGModel } from './SVGModel';\r\n-import { SVGWidget } from './SVGWidget';\r\n+import { NodeModel, PortModelAlignment } from '@projectstorm/react-diagrams';\r\n+import { SVGPortModel } from './SVGPortModel';\r\n \r\n-// define the SVGFactory class\r\n-export class SVGFactory extends AbstractReactFactory {\r\n-    constructor() {\r\n-        // initialize the SVGFactory with the svg type\r\n-        super('svg');\r\n+// define the SVGModel class\r\n+export class SVGModel extends NodeModel {\r\n+    constructor(options = {}) {\r\n+        // initialize the SVGModel with the given options\r\n+        super({\r\n+            ...options,\r\n+            type: 'svg'\r\n+        });\r\n+\r\n+        // create a port for the SVG object\r\n+        this.addPort(\r\n+            new SVGPortModel({\r\n+                alignment: PortModelAlignment.BOTTOM\r\n+            })\r\n+        );\r\n+\r\n+        // set the properties of the SVG object\r\n+        this.id = options.id;\r\n+        this.position = options.position;\r\n+        this.filePath = options.filePath;\r\n+        this.nodeId = options.nodeId;\r\n     }\r\n \r\n-    // generate a new SVGModel instance\r\n-    generateModel(initialConfig) {\r\n-        return new SVGModel(initialConfig);\r\n+    // get the id of the SVG object\r\n+    getID() {\r\n+        return this.id;\r\n     }\r\n \r\n-    // generate a new SVGWidget instance\r\n-    generateReactWidget(event) {\r\n-        return <SVGWidget engine={this.engine} node={event.model} />;\r\n+    // get the position of the SVG object\r\n+    getPosition() {\r\n+        return this.position;\r\n     }\r\n+\r\n+    // get the file path of the SVG graphic\r\n+    getFilePath() {\r\n+        return this.filePath;\r\n+    }\r\n+\r\n+    // get the id of the associated node\r\n+    getNodeId() {\r\n+        return this.nodeId;\r\n+    }\r\n+\r\n+    // set the position of the SVG object\r\n+    setPosition(x, y) {\r\n+        this.position = { x, y };\r\n+    }\r\n }\r\n"
                },
                {
                    "date": 1707038181034,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,54 +1,56 @@\n-// part 15\r\n-// SVGModel.js\r\n-// import the necessary modules\r\n-import { NodeModel, PortModelAlignment } from '@projectstorm/react-diagrams';\r\n-import { SVGPortModel } from './SVGPortModel';\r\n+import { NodeModel, DefaultPortModel, DefaultNodeModel } from '@projectstorm/react-diagrams';\r\n+import { BaseModelOptions } from '@projectstorm/react-canvas-core';\r\n \r\n-// define the SVGModel class\r\n-export class SVGModel extends NodeModel {\r\n-    constructor(options = {}) {\r\n-        // initialize the SVGModel with the given options\r\n-        super({\r\n-            ...options,\r\n-            type: 'svg'\r\n-        });\r\n+export interface TSCustomNodeModelOptions extends BaseModelOptions {\r\n+  color?: string;\r\n+  value?: number;\r\n+  name?: string;\r\n+  cssClass?: string; \r\n+}\r\n \r\n-        // create a port for the SVG object\r\n-        this.addPort(\r\n-            new SVGPortModel({\r\n-                alignment: PortModelAlignment.BOTTOM\r\n-            })\r\n-        );\r\n+export class TSCustomNodeModel2 extends DefaultNodeModel {\r\n+  // declare the class properties\r\n+  color: string;\r\n+  name: string;\r\n+  value: number;\r\n+  cssClass: string;\r\n \r\n-        // set the properties of the SVG object\r\n-        this.id = options.id;\r\n-        this.position = options.position;\r\n-        this.filePath = options.filePath;\r\n-        this.nodeId = options.nodeId;\r\n-    }\r\n+  constructor(options: TSCustomNodeModelOptions = {}) {\r\n+    super({\r\n+      ...options,\r\n+      type: 'ts-custom-node'\r\n+    });\r\n+    this.color = options.color || 'red';\r\n+    this.value = options.value || 0;\r\n+    this.name = options.name || 'name';\r\n+    this.cssClass = options.cssClass || 'custom-node'; \r\n \r\n-    // get the id of the SVG object\r\n-    getID() {\r\n-        return this.id;\r\n-    }\r\n \r\n-    // get the position of the SVG object\r\n-    getPosition() {\r\n-        return this.position;\r\n-    }\r\n+    this.addPort(\r\n+      new DefaultPortModel({\r\n+        in: true,\r\n+        name: 'IN'\r\n+      })\r\n+    );\r\n+    this.addPort(\r\n+      new DefaultPortModel({\r\n+        in: false,\r\n+        name: 'OUT'\r\n+      })\r\n+    );\r\n+  }\r\n \r\n-    // get the file path of the SVG graphic\r\n-    getFilePath() {\r\n-        return this.filePath;\r\n-    }\r\n-\r\n-    // get the id of the associated node\r\n-    getNodeId() {\r\n-        return this.nodeId;\r\n-    }\r\n-\r\n-    // set the position of the SVG object\r\n-    setPosition(x, y) {\r\n-        this.position = { x, y };\r\n-    }\r\n+  // serialize method\r\n+  serialize() {\r\n+    return {\r\n+      ...super.serialize(),\r\n+      color: this.color,\r\n+      cssClass: this.cssClass\r\n+    };\r\n+  }\r\n+  deserialize(event:any): void {\r\n+    super.deserialize(event);\r\n+    this.color = event.data.color;\r\n+    this.cssClass = event.data.cssClass; \r\n+  }\r\n }\r\n"
                },
                {
                    "date": 1707038209674,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n       type: 'ts-custom-node'\r\n     });\r\n     this.color = options.color || 'red';\r\n     this.value = options.value || 0;\r\n-    this.name = options.name || 'name';\r\n+    this.name = options.name || 'svg';\r\n     this.cssClass = options.cssClass || 'custom-node'; \r\n \r\n \r\n     this.addPort(\r\n"
                },
                {
                    "date": 1707039179608,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n       ...options,\r\n       type: 'ts-custom-node'\r\n     });\r\n     this.color = options.color || 'red';\r\n-    this.value = options.value || 0;\r\n+   // this.value = options.value || 0;\r\n     this.name = options.name || 'svg';\r\n     this.cssClass = options.cssClass || 'custom-node'; \r\n \r\n \r\n"
                },
                {
                    "date": 1707039195814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n       ...options,\r\n       type: 'ts-custom-node'\r\n     });\r\n     this.color = options.color || 'red';\r\n-   // this.value = options.value || 0;\r\n+    this.value = options.value || '';\r\n     this.name = options.name || 'svg';\r\n     this.cssClass = options.cssClass || 'custom-node'; \r\n \r\n \r\n"
                },
                {
                    "date": 1707039212179,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -2,9 +2,9 @@\n import { BaseModelOptions } from '@projectstorm/react-canvas-core';\r\n \r\n export interface TSCustomNodeModelOptions extends BaseModelOptions {\r\n   color?: string;\r\n-  value?: number;\r\n+  value?: string;\r\n   name?: string;\r\n   cssClass?: string; \r\n }\r\n \r\n@@ -20,9 +20,9 @@\n       ...options,\r\n       type: 'ts-custom-node'\r\n     });\r\n     this.color = options.color || 'red';\r\n-    this.value = options.value || '';\r\n+    this.value = options.value || null;\r\n     this.name = options.name || 'svg';\r\n     this.cssClass = options.cssClass || 'custom-node'; \r\n \r\n \r\n"
                },
                {
                    "date": 1707039233140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n export class TSCustomNodeModel2 extends DefaultNodeModel {\r\n   // declare the class properties\r\n   color: string;\r\n   name: string;\r\n-  value: number;\r\n+  value: string;\r\n   cssClass: string;\r\n \r\n   constructor(options: TSCustomNodeModelOptions = {}) {\r\n     super({\r\n"
                },
                {
                    "date": 1707039243349,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n export class TSCustomNodeModel2 extends DefaultNodeModel {\r\n   // declare the class properties\r\n   color: string;\r\n   name: string;\r\n-  value: string;\r\n+  value?: string;\r\n   cssClass: string;\r\n \r\n   constructor(options: TSCustomNodeModelOptions = {}) {\r\n     super({\r\n"
                },
                {
                    "date": 1707039263137,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,17 +1,15 @@\n import { NodeModel, DefaultPortModel, DefaultNodeModel } from '@projectstorm/react-diagrams';\r\n import { BaseModelOptions } from '@projectstorm/react-canvas-core';\r\n \r\n export interface TSCustomNodeModelOptions extends BaseModelOptions {\r\n-  color?: string;\r\n   value?: string;\r\n   name?: string;\r\n   cssClass?: string; \r\n }\r\n \r\n export class TSCustomNodeModel2 extends DefaultNodeModel {\r\n   // declare the class properties\r\n-  color: string;\r\n   name: string;\r\n   value?: string;\r\n   cssClass: string;\r\n \r\n@@ -19,10 +17,9 @@\n     super({\r\n       ...options,\r\n       type: 'ts-custom-node'\r\n     });\r\n-    this.color = options.color || 'red';\r\n-    this.value = options.value || null;\r\n+    this.value = options.value;\r\n     this.name = options.name || 'svg';\r\n     this.cssClass = options.cssClass || 'custom-node'; \r\n \r\n \r\n"
                },
                {
                    "date": 1707039285157,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -40,9 +40,9 @@\n   // serialize method\r\n   serialize() {\r\n     return {\r\n       ...super.serialize(),\r\n-      color: this.color,\r\n+   \r\n       cssClass: this.cssClass\r\n     };\r\n   }\r\n   deserialize(event:any): void {\r\n"
                },
                {
                    "date": 1707040263970,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,15 +3,17 @@\n \r\n export interface TSCustomNodeModelOptions extends BaseModelOptions {\r\n   value?: string;\r\n   name?: string;\r\n+  nodeId?: string;\r\n   cssClass?: string; \r\n }\r\n \r\n export class TSCustomNodeModel2 extends DefaultNodeModel {\r\n   // declare the class properties\r\n   name: string;\r\n   value?: string;\r\n+  nodeId?: string;\r\n   cssClass: string;\r\n \r\n   constructor(options: TSCustomNodeModelOptions = {}) {\r\n     super({\r\n@@ -19,8 +21,9 @@\n       type: 'ts-custom-node'\r\n     });\r\n     this.value = options.value;\r\n     this.name = options.name || 'svg';\r\n+    this.nodeId = options.nodeId || '';\r\n     this.cssClass = options.cssClass || 'custom-node'; \r\n \r\n \r\n     this.addPort(\r\n@@ -40,14 +43,14 @@\n   // serialize method\r\n   serialize() {\r\n     return {\r\n       ...super.serialize(),\r\n-   \r\n+      nodeId: this.nodeId,\r\n       cssClass: this.cssClass\r\n     };\r\n   }\r\n   deserialize(event:any): void {\r\n     super.deserialize(event);\r\n-    this.color = event.data.color;\r\n+    this.nodeId = event.data.nodeId;\r\n     this.cssClass = event.data.cssClass; \r\n   }\r\n }\r\n"
                },
                {
                    "date": 1707040407017,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,13 +44,15 @@\n   serialize() {\r\n     return {\r\n       ...super.serialize(),\r\n       nodeId: this.nodeId,\r\n-      cssClass: this.cssClass\r\n+      cssClass: this.cssClass,\r\n+      position: this.position,\r\n     };\r\n   }\r\n   deserialize(event:any): void {\r\n     super.deserialize(event);\r\n     this.nodeId = event.data.nodeId;\r\n     this.cssClass = event.data.cssClass; \r\n+    this.position = event.data.position;\r\n   }\r\n }\r\n"
                }
            ],
            "date": 1707036801677,
            "name": "Commit-0",
            "content": "// part 16\r\n// SVGFactory.js\r\n// import the necessary modules\r\nimport * as React from 'react';\r\nimport { AbstractReactFactory } from '@projectstorm/react-canvas-core';\r\nimport { SVGModel } from './SVGModel';\r\nimport { SVGWidget } from './SVGWidget';\r\n\r\n// define the SVGFactory class\r\nexport class SVGFactory extends AbstractReactFactory {\r\n    constructor() {\r\n        // initialize the SVGFactory with the svg type\r\n        super('svg');\r\n    }\r\n\r\n    // generate a new SVGModel instance\r\n    generateModel(initialConfig) {\r\n        return new SVGModel(initialConfig);\r\n    }\r\n\r\n    // generate a new SVGWidget instance\r\n    generateReactWidget(event) {\r\n        return <SVGWidget engine={this.engine} node={event.model} />;\r\n    }\r\n}\r\n"
        }
    ]
}