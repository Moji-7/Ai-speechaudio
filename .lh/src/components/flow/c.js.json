{
    "sourceFile": "src/components/flow/c.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1706939862021,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1706940106769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     }, []);\r\n \r\n     return (\r\n         <div style={{ height: '100vh' }}>\r\n-            <DiagramEngine engine={engine} model={model} />\r\n+            <DiagramEngine  DiagramEngine={engine} DiagramModel={model} />\r\n         </div>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1706940163255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -41,9 +41,9 @@\n     }, []);\r\n \r\n     return (\r\n         <div style={{ height: '100vh' }}>\r\n-            <DiagramEngine  DiagramEngine={engine} DiagramModel={model} />\r\n+            <DiagramEngine  DiagramModel={model} />\r\n         </div>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1706940303530,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,12 +15,12 @@\n };\r\n \r\n const Diagram = () => {\r\n     const [model, setModel] = useState(new DiagramModel());\r\n+    const [engine, setEngine] = useState(new DiagramEngine());\r\n \r\n     useEffect(() => {\r\n         fetchData().then(data => {\r\n-            const engine = new DiagramEngine();\r\n             engine.installDefaultFactories();\r\n \r\n             data.forEach((nodeData, index) => {\r\n                 const node = new DefaultNodeModel(nodeData.name, 'rgb(0,192,255)');\r\n@@ -41,9 +41,9 @@\n     }, []);\r\n \r\n     return (\r\n         <div style={{ height: '100vh' }}>\r\n-            <DiagramEngine  DiagramModel={model} />\r\n+            <DiagramEngine DiagramEngine={engine} DiagramModel={model} />\r\n         </div>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1706940485799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useEffect, useState } from 'react';\r\n-import { DiagramEngine, DiagramModel, DefaultNodeModel, DefaultLinkModel } from '@projectstorm/react-diagrams';\r\n+import { DiagramEngine, DiagramModel, DefaultNodeModel, DefaultLinkModel, CanvasEngine} from '@projectstorm/react-diagrams';\r\n \r\n // Mock API call\r\n const fetchData = async () => {\r\n     // Replace this with your actual API call\r\n@@ -41,9 +41,9 @@\n     }, []);\r\n \r\n     return (\r\n         <div style={{ height: '100vh' }}>\r\n-            <DiagramEngine DiagramEngine={engine} DiagramModel={model} />\r\n+            <CanvasWidget  engine={engine} />\r\n         </div>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1706940500140,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,6 +1,6 @@\n import React, { useEffect, useState } from 'react';\r\n-import { DiagramEngine, DiagramModel, DefaultNodeModel, DefaultLinkModel, CanvasEngine} from '@projectstorm/react-diagrams';\r\n+import { DiagramEngine, DiagramModel, DefaultNodeModel, DefaultLinkModel, CanvasWidget} from '@projectstorm/react-diagrams';\r\n \r\n // Mock API call\r\n const fetchData = async () => {\r\n     // Replace this with your actual API call\r\n"
                },
                {
                    "date": 1706940792938,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,50 +1,27 @@\n-import React, { useEffect, useState } from 'react';\r\n-import { DiagramEngine, DiagramModel, DefaultNodeModel, DefaultLinkModel, CanvasWidget} from '@projectstorm/react-diagrams';\r\n+// FlowchartComponent.js\r\n+import React from 'react';\r\n+import { DiagramEngine, DiagramModel, DefaultNodeModel } from '@projectstorm/react-diagrams';\r\n \r\n-// Mock API call\r\n-const fetchData = async () => {\r\n-    // Replace this with your actual API call\r\n-    return new Promise(resolve => {\r\n-        setTimeout(() => {\r\n-            resolve([\r\n-                { id: 'node1', name: 'Node 1', point: { x: 100, y: 100 } },\r\n-                { id: 'node2', name: 'Node 2', point: { x: 400, y: 300 } },\r\n-            ]);\r\n-        }, 1000);\r\n-    });\r\n-};\r\n+const FlowchartComponent = () => {\r\n+  const engine = new DiagramEngine();\r\n+  const model = new DiagramModel();\r\n \r\n-const Diagram = () => {\r\n-    const [model, setModel] = useState(new DiagramModel());\r\n-    const [engine, setEngine] = useState(new DiagramEngine());\r\n+  // Create a rectangle node\r\n+  const rectNode = new DefaultNodeModel({\r\n+    name: 'Sample Node',\r\n+    color: 'rgb(0,192,255)',\r\n+  });\r\n+  rectNode.setPosition(100, 100);\r\n+  model.addNode(rectNode);\r\n \r\n-    useEffect(() => {\r\n-        fetchData().then(data => {\r\n-            engine.installDefaultFactories();\r\n+  // Add the model to the engine\r\n+  engine.setModel(model);\r\n \r\n-            data.forEach((nodeData, index) => {\r\n-                const node = new DefaultNodeModel(nodeData.name, 'rgb(0,192,255)');\r\n-                node.setPosition(nodeData.point.x, nodeData.point.y);\r\n-                model.addNode(node);\r\n-\r\n-                if (index > 0) {\r\n-                    const sourcePort = model.getNode(nodeData.id).addOutPort('Out');\r\n-                    const targetPort = model.getNode(data[index - 1].id).addInPort('In');\r\n-                    const link = sourcePort.link(targetPort);\r\n-                    model.addLink(link);\r\n-                }\r\n-            });\r\n-\r\n-            engine.setModel(model);\r\n-            setModel(model);\r\n-        });\r\n-    }, []);\r\n-\r\n-    return (\r\n-        <div style={{ height: '100vh' }}>\r\n-            <CanvasWidget  engine={engine} />\r\n-        </div>\r\n-    );\r\n+  return (\r\n+    <div style={{ width: '100%', height: '500px' }}>\r\n+      {/* Render your flowchart here */}\r\n+    </div>\r\n+  );\r\n };\r\n \r\n-export default Diagram;\r\n+export default FlowchartComponent;\r\n"
                },
                {
                    "date": 1706941098848,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,27 +1,77 @@\n-// FlowchartComponent.js\r\n-import React from 'react';\r\n-import { DiagramEngine, DiagramModel, DefaultNodeModel } from '@projectstorm/react-diagrams';\r\n+import React, { useEffect, useState } from \"react\";\r\n+import createEngine, {\r\n+  DefaultLinkModel,\r\n+  DefaultNodeModel,\r\n+  DiagramModel,\r\n+} from \"@projectstorm/react-diagrams\";\r\n+import { CanvasWidget } from \"@projectstorm/react-canvas-core\";\r\n \r\n-const FlowchartComponent = () => {\r\n-  const engine = new DiagramEngine();\r\n-  const model = new DiagramModel();\r\n-\r\n-  // Create a rectangle node\r\n-  const rectNode = new DefaultNodeModel({\r\n-    name: 'Sample Node',\r\n-    color: 'rgb(0,192,255)',\r\n+// a custom function to fetch data from a sample REST API\r\n+const fetchData = () => {\r\n+  return new Promise((resolve) => {\r\n+    setTimeout(() => {\r\n+      resolve([\r\n+        { id: 1, name: \"Alice\", color: \"red\" },\r\n+        { id: 2, name: \"Bob\", color: \"green\" },\r\n+        { id: 3, name: \"Charlie\", color: \"blue\" },\r\n+      ]);\r\n+    }, 1000);\r\n   });\r\n-  rectNode.setPosition(100, 100);\r\n-  model.addNode(rectNode);\r\n+};\r\n \r\n-  // Add the model to the engine\r\n-  engine.setModel(model);\r\n+// a functional component that renders a diagram\r\n+const Diagram = () => {\r\n+  // use state hooks to store the engine and the model\r\n+  const [engine, setEngine] = useState(null);\r\n+  const [model, setModel] = useState(null);\r\n \r\n+  // use effect hook to initialize the engine and the model\r\n+  useEffect(() => {\r\n+    // create a new engine\r\n+    const engine = createEngine();\r\n+    // create a new model\r\n+    const model = new DiagramModel();\r\n+    // set the engine and the model to the state\r\n+    setEngine(engine);\r\n+    setModel(model);\r\n+  }, []);\r\n+\r\n+  // use effect hook to update the model with data from the API\r\n+  useEffect(() => {\r\n+    // if the model is not null, fetch the data and update the model\r\n+    if (model) {\r\n+      fetchData().then((data) => {\r\n+        // create an array of nodes from the data\r\n+        const nodes = data.map(\r\n+          (item) =>\r\n+            new DefaultNodeModel({\r\n+              name: item.name,\r\n+              color: item.color,\r\n+            })\r\n+        );\r\n+        // add the nodes to the model\r\n+        nodes.forEach((node) => model.addNode(node));\r\n+        // create some links between the nodes\r\n+        const link1 = new DefaultLinkModel();\r\n+        link1.setSourcePort(nodes[0].getPort(\"out\"));\r\n+        link1.setTargetPort(nodes[1].getPort(\"in\"));\r\n+        const link2 = new DefaultLinkModel();\r\n+        link2.setSourcePort(nodes[1].getPort(\"out\"));\r\n+        link2.setTargetPort(nodes[2].getPort(\"in\"));\r\n+        // add the links to the model\r\n+        model.addAll(link1, link2);\r\n+        // update the model in the engine\r\n+        engine.setModel(model);\r\n+      });\r\n+    }\r\n+  }, [model, engine]);\r\n+\r\n+  // return a canvas widget to render the diagram\r\n   return (\r\n-    <div style={{ width: '100%', height: '500px' }}>\r\n-      {/* Render your flowchart here */}\r\n+    <div style={{ height: \"600px\" }}>\r\n+      {engine && <CanvasWidget engine={engine} />}\r\n     </div>\r\n   );\r\n };\r\n \r\n-export default FlowchartComponent;\r\n+export default Diagram;\r\n"
                },
                {
                    "date": 1706941657794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,77 +1,51 @@\n-import React, { useEffect, useState } from \"react\";\r\n+import React, { useState, useEffect } from 'react';\r\n import createEngine, {\r\n-  DefaultLinkModel,\r\n+  DiagramModel,\r\n   DefaultNodeModel,\r\n-  DiagramModel,\r\n-} from \"@projectstorm/react-diagrams\";\r\n-import { CanvasWidget } from \"@projectstorm/react-canvas-core\";\r\n+  DefaultPortModel,\r\n+  DiagramWidget,\r\n+} from '@projectstorm/react-diagrams';\r\n \r\n-// a custom function to fetch data from a sample REST API\r\n-const fetchData = () => {\r\n-  return new Promise((resolve) => {\r\n-    setTimeout(() => {\r\n-      resolve([\r\n-        { id: 1, name: \"Alice\", color: \"red\" },\r\n-        { id: 2, name: \"Bob\", color: \"green\" },\r\n-        { id: 3, name: \"Charlie\", color: \"blue\" },\r\n-      ]);\r\n-    }, 1000);\r\n-  });\r\n-};\r\n-\r\n-// a functional component that renders a diagram\r\n const Diagram = () => {\r\n-  // use state hooks to store the engine and the model\r\n-  const [engine, setEngine] = useState(null);\r\n-  const [model, setModel] = useState(null);\r\n+  const [diagramEngine, setDiagramEngine] = useState(createEngine());\r\n+  const [diagramModel, setDiagramModel] = useState(new DiagramModel());\r\n \r\n-  // use effect hook to initialize the engine and the model\r\n   useEffect(() => {\r\n-    // create a new engine\r\n-    const engine = createEngine();\r\n-    // create a new model\r\n-    const model = new DiagramModel();\r\n-    // set the engine and the model to the state\r\n-    setEngine(engine);\r\n-    setModel(model);\r\n+    const node1 = new DefaultNodeModel({\r\n+      name: 'Node 1',\r\n+      color: 'rgb(0,192,255)',\r\n+    });\r\n+    const port1 = node1.addPort(new DefaultPortModel(false, 'out-1', 'Out'));\r\n+    node1.setPosition(100, 100);\r\n+\r\n+    const node2 = new DefaultNodeModel({\r\n+      name: 'Node 2',\r\n+      color: 'rgb(192,255,0)',\r\n+    });\r\n+    const port2 = node2.addPort(new DefaultPortModel(true, 'in-1', 'In'));\r\n+    node2.setPosition(200, 100);\r\n+\r\n+    const link = port1.link(port2);\r\n+\r\n+    diagramModel.addAll(node1, node2, link);\r\n+    diagramEngine.setModel(diagramModel);\r\n   }, []);\r\n \r\n-  // use effect hook to update the model with data from the API\r\n-  useEffect(() => {\r\n-    // if the model is not null, fetch the data and update the model\r\n-    if (model) {\r\n-      fetchData().then((data) => {\r\n-        // create an array of nodes from the data\r\n-        const nodes = data.map(\r\n-          (item) =>\r\n-            new DefaultNodeModel({\r\n-              name: item.name,\r\n-              color: item.color,\r\n-            })\r\n-        );\r\n-        // add the nodes to the model\r\n-        nodes.forEach((node) => model.addNode(node));\r\n-        // create some links between the nodes\r\n-        const link1 = new DefaultLinkModel();\r\n-        link1.setSourcePort(nodes[0].getPort(\"out\"));\r\n-        link1.setTargetPort(nodes[1].getPort(\"in\"));\r\n-        const link2 = new DefaultLinkModel();\r\n-        link2.setSourcePort(nodes[1].getPort(\"out\"));\r\n-        link2.setTargetPort(nodes[2].getPort(\"in\"));\r\n-        // add the links to the model\r\n-        model.addAll(link1, link2);\r\n-        // update the model in the engine\r\n-        engine.setModel(model);\r\n-      });\r\n-    }\r\n-  }, [model, engine]);\r\n+  const fetchApiData = () => {\r\n+    return new Promise((resolve) => {\r\n+      setTimeout(() => {\r\n+        // Replace this with actual API call\r\n+        resolve('API data');\r\n+      }, 1000);\r\n+    });\r\n+  };\r\n \r\n-  // return a canvas widget to render the diagram\r\n   return (\r\n-    <div style={{ height: \"600px\" }}>\r\n-      {engine && <CanvasWidget engine={engine} />}\r\n+    <div style={{ height: '100vh' }}>\r\n+      <DiagramWidget engine={diagramEngine} />\r\n+      <button onClick={fetchApiData}>Fetch API Data</button>\r\n     </div>\r\n   );\r\n };\r\n \r\n-export default Diagram;\r\n+export default Diagram;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1706944101235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,51 +1,54 @@\n-import React, { useState, useEffect } from 'react';\r\n-import createEngine, {\r\n-  DiagramModel,\r\n-  DefaultNodeModel,\r\n-  DefaultPortModel,\r\n-  DiagramWidget,\r\n-} from '@projectstorm/react-diagrams';\r\n-\r\n+// Define a custom component for the diagram\r\n const Diagram = () => {\r\n-  const [diagramEngine, setDiagramEngine] = useState(createEngine());\r\n-  const [diagramModel, setDiagramModel] = useState(new DiagramModel());\r\n-\r\n-  useEffect(() => {\r\n+    // Create a diagram engine\r\n+    const engine = createEngine();\r\n+  \r\n+    // Create a diagram model\r\n+    const model = new DiagramModel();\r\n+  \r\n+    // Create some nodes with different shapes\r\n     const node1 = new DefaultNodeModel({\r\n-      name: 'Node 1',\r\n-      color: 'rgb(0,192,255)',\r\n+      name: \"Circle Node\",\r\n+      color: \"rgb(0,192,255)\",\r\n+      extras: { shape: \"<circle cx='50' cy='50' r='45' fill='#00c0ff' />\" }\r\n     });\r\n-    const port1 = node1.addPort(new DefaultPortModel(false, 'out-1', 'Out'));\r\n     node1.setPosition(100, 100);\r\n-\r\n+  \r\n     const node2 = new DefaultNodeModel({\r\n-      name: 'Node 2',\r\n-      color: 'rgb(192,255,0)',\r\n+      name: \"Square Node\",\r\n+      color: \"rgb(0,192,255)\",\r\n+      extras: { shape: \"<rect x='5' y='5' width='90' height='90' fill='#00c0ff' />\" }\r\n     });\r\n-    const port2 = node2.addPort(new DefaultPortModel(true, 'in-1', 'In'));\r\n-    node2.setPosition(200, 100);\r\n-\r\n-    const link = port1.link(port2);\r\n-\r\n-    diagramModel.addAll(node1, node2, link);\r\n-    diagramEngine.setModel(diagramModel);\r\n-  }, []);\r\n-\r\n-  const fetchApiData = () => {\r\n-    return new Promise((resolve) => {\r\n-      setTimeout(() => {\r\n\\ No newline at end of file\n-        // Replace this with actual API call\r\n-        resolve('API data');\r\n-      }, 1000);\r\n+    node2.setPosition(400, 100);\r\n+  \r\n+    const node3 = new DefaultNodeModel({\r\n+      name: \"Triangle Node\",\r\n+      color: \"rgb(0,192,255)\",\r\n+      extras: {\r\n+        shape:\r\n+          \"<polygon points='50,5 95,95 5,95' fill='#00c0ff' stroke='#00c0ff' />\"\r\n+      }\r\n     });\r\n-  };\r\n-\r\n-  return (\r\n-    <div style={{ height: '100vh' }}>\r\n-      <DiagramWidget engine={diagramEngine} />\r\n-      <button onClick={fetchApiData}>Fetch API Data</button>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default Diagram;\n+    node3.setPosition(250, 250);\r\n+  \r\n+    // Create some links between the nodes\r\n+    const link1 = new DefaultLinkModel();\r\n+    link1.setSourcePort(node1.getPort(\"out\"));\r\n+    link1.setTargetPort(node2.getPort(\"in\"));\r\n+  \r\n+    const link2 = new DefaultLinkModel();\r\n+    link2.setSourcePort(node2.getPort(\"out\"));\r\n+    link2.setTargetPort(node3.getPort(\"in\"));\r\n+  \r\n+    // Add the nodes and links to the model\r\n+    model.addAll(node1, node2, node3, link1, link2);\r\n+  \r\n+    // Load the model into the engine\r\n+    engine.setModel(model);\r\n+  \r\n+    // Render the diagram\r\n+    return (\r\n+        <div style={{ height: \"600px\" }}>\r\n+          <engine.CanvasWidget engine={engine} />\r\n+        </div>\r\n+      );\n\\ No newline at end of file\n"
                },
                {
                    "date": 1706944120639,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,5 +50,9 @@\n     return (\r\n         <div style={{ height: \"600px\" }}>\r\n           <engine.CanvasWidget engine={engine} />\r\n         </div>\r\n-      );\n\\ No newline at end of file\n+      );\r\n+    }\r\n+\r\n+    export default Diagram;\r\n+    \n\\ No newline at end of file\n"
                },
                {
                    "date": 1706944158215,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,4 +1,11 @@\n+import React, { useState, useEffect } from 'react';\r\n+import createEngine, {\r\n+  DiagramModel,\r\n+  DefaultNodeModel,\r\n+  DefaultPortModel,\r\n+  DiagramWidget,\r\n+} from '@projectstorm/react-diagrams';\r\n // Define a custom component for the diagram\r\n const Diagram = () => {\r\n     // Create a diagram engine\r\n     const engine = createEngine();\r\n"
                },
                {
                    "date": 1706944175762,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,9 @@\n import React, { useState, useEffect } from 'react';\r\n import createEngine, {\r\n   DiagramModel,\r\n   DefaultNodeModel,\r\n+  DefaultLinkModel\r\n   DefaultPortModel,\r\n   DiagramWidget,\r\n } from '@projectstorm/react-diagrams';\r\n // Define a custom component for the diagram\r\n"
                },
                {
                    "date": 1706944289801,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import React, { useState, useEffect } from 'react';\r\n import createEngine, {\r\n   DiagramModel,\r\n   DefaultNodeModel,\r\n-  DefaultLinkModel\r\n+  DefaultLinkModel,\r\n   DefaultPortModel,\r\n   DiagramWidget,\r\n } from '@projectstorm/react-diagrams';\r\n // Define a custom component for the diagram\r\n@@ -39,18 +39,18 @@\n     });\r\n     node3.setPosition(250, 250);\r\n   \r\n     // Create some links between the nodes\r\n-    const link1 = new DefaultLinkModel();\r\n-    link1.setSourcePort(node1.getPort(\"out\"));\r\n-    link1.setTargetPort(node2.getPort(\"in\"));\r\n+    // const link1 = new DefaultLinkModel();\r\n+    // link1.setSourcePort(node1.getPort(\"out\"));\r\n+    // link1.setTargetPort(node2.getPort(\"in\"));\r\n   \r\n-    const link2 = new DefaultLinkModel();\r\n-    link2.setSourcePort(node2.getPort(\"out\"));\r\n-    link2.setTargetPort(node3.getPort(\"in\"));\r\n+    // const link2 = new DefaultLinkModel();\r\n+    // link2.setSourcePort(node2.getPort(\"out\"));\r\n+    // link2.setTargetPort(node3.getPort(\"in\"));\r\n   \r\n     // Add the nodes and links to the model\r\n-    model.addAll(node1, node2, node3, link1, link2);\r\n+    model.addAll(node1, node2, node3);\r\n   \r\n     // Load the model into the engine\r\n     engine.setModel(model);\r\n   \r\n"
                },
                {
                    "date": 1706944514953,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +1,94 @@\n-import React, { useState, useEffect } from 'react';\r\n-import createEngine, {\r\n-  DiagramModel,\r\n-  DefaultNodeModel,\r\n-  DefaultLinkModel,\r\n-  DefaultPortModel,\r\n-  DiagramWidget,\r\n-} from '@projectstorm/react-diagrams';\r\n-// Define a custom component for the diagram\r\n-const Diagram = () => {\r\n-    // Create a diagram engine\r\n-    const engine = createEngine();\r\n+import {\r\n+    ReactFlow,\r\n+    useReactFlow,\r\n+    Node,\r\n+    Edge,\r\n+    ReactFlowProvider,\r\n+    Background,\r\n+    BackgroundVariant,\r\n+    Panel,\r\n+  } from '@xyflow/react';\r\n   \r\n-    // Create a diagram model\r\n-    const model = new DiagramModel();\r\n+  const defaultNodes: Node[] = [\r\n+    {\r\n+      id: '1',\r\n+      type: 'input',\r\n+      data: { label: 'Node 1' },\r\n+      position: { x: 250, y: 5 },\r\n+      className: 'light',\r\n+    },\r\n+    {\r\n+      id: '2',\r\n+      data: { label: 'Node 2' },\r\n+      position: { x: 100, y: 100 },\r\n+      className: 'light',\r\n+    },\r\n+    {\r\n+      id: '3',\r\n+      data: { label: 'Node 3' },\r\n+      position: { x: 400, y: 100 },\r\n+      className: 'light',\r\n+    },\r\n+    {\r\n+      id: '4',\r\n+      data: { label: 'Node 4' },\r\n+      position: { x: 400, y: 200 },\r\n+      className: 'light',\r\n+    },\r\n+  ];\r\n   \r\n-    // Create some nodes with different shapes\r\n-    const node1 = new DefaultNodeModel({\r\n-      name: \"Circle Node\",\r\n-      color: \"rgb(0,192,255)\",\r\n-      extras: { shape: \"<circle cx='50' cy='50' r='45' fill='#00c0ff' />\" }\r\n-    });\r\n-    node1.setPosition(100, 100);\r\n+  const defaultEdges: Edge[] = [\r\n+    { id: 'e1-2', source: '1', target: '2' },\r\n+    { id: 'e1-3', source: '1', target: '3' },\r\n+  ];\r\n   \r\n-    const node2 = new DefaultNodeModel({\r\n\\ No newline at end of file\n-      name: \"Square Node\",\r\n-      color: \"rgb(0,192,255)\",\r\n-      extras: { shape: \"<rect x='5' y='5' width='90' height='90' fill='#00c0ff' />\" }\r\n-    });\r\n-    node2.setPosition(400, 100);\r\n+  const defaultEdgeOptions = {\r\n+    animated: true,\r\n+  };\r\n   \r\n-    const node3 = new DefaultNodeModel({\r\n-      name: \"Triangle Node\",\r\n-      color: \"rgb(0,192,255)\",\r\n-      extras: {\r\n-        shape:\r\n-          \"<polygon points='50,5 95,95 5,95' fill='#00c0ff' stroke='#00c0ff' />\"\r\n-      }\r\n-    });\r\n-    node3.setPosition(250, 250);\r\n+  const DefaultNodes = () => {\r\n+    const instance = useReactFlow();\r\n   \r\n-    // Create some links between the nodes\r\n-    // const link1 = new DefaultLinkModel();\r\n-    // link1.setSourcePort(node1.getPort(\"out\"));\r\n-    // link1.setTargetPort(node2.getPort(\"in\"));\r\n+    const logToObject = () => console.log(instance.toObject());\r\n+    const resetTransform = () => instance.setViewport({ x: 0, y: 0, zoom: 1 });\r\n   \r\n-    // const link2 = new DefaultLinkModel();\r\n-    // link2.setSourcePort(node2.getPort(\"out\"));\r\n-    // link2.setTargetPort(node3.getPort(\"in\"));\r\n+    const updateNodePositions = () => {\r\n+      instance.setNodes((nodes) =>\r\n+        nodes.map((node) => {\r\n+          node.position = {\r\n+            x: Math.random() * 400,\r\n+            y: Math.random() * 400,\r\n+          };\r\n   \r\n-    // Add the nodes and links to the model\r\n-    model.addAll(node1, node2, node3);\r\n+          return node;\r\n+        })\r\n+      );\r\n+    };\r\n   \r\n-    // Load the model into the engine\r\n-    engine.setModel(model);\r\n+    const updateEdgeColors = () => {\r\n+      instance.setEdges((edges) =>\r\n+        edges.map((edge) => {\r\n+          edge.style = {\r\n+            stroke: '#ff5050',\r\n+          };\r\n   \r\n-    // Render the diagram\r\n+          return edge;\r\n+        })\r\n+      );\r\n+    };\r\n+  \r\n     return (\r\n-        <div style={{ height: \"600px\" }}>\r\n-          <engine.CanvasWidget engine={engine} />\r\n-        </div>\r\n-      );\r\n-    }\r\n-\r\n-    export default Diagram;\r\n-    \n+      <ReactFlow defaultNodes={defaultNodes} defaultEdges={defaultEdges} defaultEdgeOptions={defaultEdgeOptions} fitView>\r\n+        <Background variant={BackgroundVariant.Lines} />\r\n+  \r\n+        <Panel position=\"top-right\">\r\n+          <button onClick={resetTransform}>reset transform</button>\r\n+          <button onClick={updateNodePositions}>change pos</button>\r\n+          <button onClick={updateEdgeColors}>red edges</button>\r\n+          <button onClick={logToObject}>toObject</button>\r\n+        </Panel>\r\n+      </ReactFlow>\r\n+    );\r\n+  };\r\n+  \r\n+  export default DefaultNodes\r\n"
                },
                {
                    "date": 1706944539936,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -45,9 +45,9 @@\n   const defaultEdgeOptions = {\r\n     animated: true,\r\n   };\r\n   \r\n-  const DefaultNodes = () => {\r\n+  const Diagram = () => {\r\n     const instance = useReactFlow();\r\n   \r\n     const logToObject = () => console.log(instance.toObject());\r\n     const resetTransform = () => instance.setViewport({ x: 0, y: 0, zoom: 1 });\r\n@@ -90,5 +90,5 @@\n       </ReactFlow>\r\n     );\r\n   };\r\n   \r\n-  export default DefaultNodes\r\n+  export default Diagram\r\n"
                }
            ],
            "date": 1706939862021,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from 'react';\r\nimport { DiagramEngine, DiagramModel, DefaultNodeModel, DefaultLinkModel } from '@projectstorm/react-diagrams';\r\n\r\n// Mock API call\r\nconst fetchData = async () => {\r\n    // Replace this with your actual API call\r\n    return new Promise(resolve => {\r\n        setTimeout(() => {\r\n            resolve([\r\n                { id: 'node1', name: 'Node 1', point: { x: 100, y: 100 } },\r\n                { id: 'node2', name: 'Node 2', point: { x: 400, y: 300 } },\r\n            ]);\r\n        }, 1000);\r\n    });\r\n};\r\n\r\nconst Diagram = () => {\r\n    const [model, setModel] = useState(new DiagramModel());\r\n\r\n    useEffect(() => {\r\n        fetchData().then(data => {\r\n            const engine = new DiagramEngine();\r\n            engine.installDefaultFactories();\r\n\r\n            data.forEach((nodeData, index) => {\r\n                const node = new DefaultNodeModel(nodeData.name, 'rgb(0,192,255)');\r\n                node.setPosition(nodeData.point.x, nodeData.point.y);\r\n                model.addNode(node);\r\n\r\n                if (index > 0) {\r\n                    const sourcePort = model.getNode(nodeData.id).addOutPort('Out');\r\n                    const targetPort = model.getNode(data[index - 1].id).addInPort('In');\r\n                    const link = sourcePort.link(targetPort);\r\n                    model.addLink(link);\r\n                }\r\n            });\r\n\r\n            engine.setModel(model);\r\n            setModel(model);\r\n        });\r\n    }, []);\r\n\r\n    return (\r\n        <div style={{ height: '100vh' }}>\r\n            <DiagramEngine engine={engine} model={model} />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Diagram;\r\n"
        }
    ]
}