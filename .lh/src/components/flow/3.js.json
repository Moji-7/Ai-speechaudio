{
    "sourceFile": "src/components/flow/3.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1706936292922,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1706936292922,
            "name": "Commit-0",
            "content": "import React, { useEffect, useState } from \"react\";\r\nimport ReactFlow, { isNode, isEdge } from \"react-flow-renderer\";\r\nimport axios from \"axios\";\r\nimport ReactTooltip from \"react-tooltip\";\r\n\r\nconst Diagram = () => {\r\n  const [elements, setElements] = useState([]);\r\n  const [error, setError] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetchData();\r\n  }, []);\r\n\r\n  const fetchData = async () => {\r\n    try {\r\n      const response = await axios.get(\"https://api.example.com/diagram\");\r\n      const { nodes, links } = response.data;\r\n\r\n      const nodeElements = nodes.map((node) => ({\r\n        id: node.id,\r\n        type: \"default\",\r\n        data: { label: node.label },\r\n        position: { x: node.x, y: node.y },\r\n      }));\r\n\r\n      const edgeElements = links.map((link) => ({\r\n        id: link.id,\r\n        source: link.source,\r\n        target: link.target,\r\n        type: \"smoothstep\",\r\n        animated: true,\r\n      }));\r\n\r\n      const diagramElements = [...nodeElements, ...edgeElements];\r\n\r\n      setElements(diagramElements);\r\n    } catch (error) {\r\n      setError(\"Error fetching diagram data\");\r\n    }\r\n  };\r\n\r\n  const handleElementClick = (event, element) => {\r\n    if (isNode(element)) {\r\n      ReactTooltip.show(event.target);\r\n    }\r\n  };\r\n\r\n  const renderDiagram = () => {\r\n    return (\r\n      <ReactFlow\r\n        elements={elements}\r\n        style={{ width: \"100%\", height: \"500px\" }}\r\n        onElementClick={handleElementClick}\r\n      />\r\n    );\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h1>Shapes with Connectors Diagram</h1>\r\n      {error ? (\r\n        <p>{error}</p>\r\n      ) : (\r\n        <>\r\n          {renderDiagram()}\r\n          <ReactTooltip effect=\"solid\" />\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Diagram;\r\n"
        }
    ]
}