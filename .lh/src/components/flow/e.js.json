{
    "sourceFile": "src/components/flow/e.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 95,
            "patches": [
                {
                    "date": 1706946532658,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1706946735511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,81 @@\n // MyDiagram.js\r\n-import React from 'react';\r\n-import { DiagramEngine, DiagramModel } from '@projectstorm/react-diagrams';\r\n+import React, { useEffect, useState } from 'react';\r\n+import createEngine, { DiagramModel, DefaultNodeModel, DefaultLinkModel } from '@projectstorm/react-diagrams';\r\n \r\n+// Custom Node Component\r\n+const CustomNodeComponent = (props) => {\r\n+  // Define your node properties here\r\n+  // e.g., size, color, labels\r\n+  // ...\r\n+  return (\r\n+    // Your custom node JSX goes here\r\n+  );\r\n+};\r\n+\r\n+// Custom Link Component\r\n+const CustomLinkComponent = (props) => {\r\n+  // Define your link properties here\r\n+  // ...\r\n+  return (\r\n+    // Your custom link JSX goes here\r\n+  );\r\n+};\r\n+\r\n const MyDiagram = () => {\r\n-  const engine = new DiagramEngine();\r\n-  const model = new DiagramModel();\r\n+  const [engine, setEngine] = useState(null);\r\n \r\n-  // Add nodes and links here\r\n+  useEffect(() => {\r\n+    const newEngine = createEngine();\r\n+    const model = new DiagramModel();\r\n \r\n+    // Node creation with promise\r\n+    const createNode = (name, color) => {\r\n+      return new Promise(resolve => {\r\n+        setTimeout(() => {\r\n+          const node = new DefaultNodeModel(name, color);\r\n+          resolve(node);\r\n+        }, 1000);\r\n+      });\r\n+    };\r\n+\r\n+    // Link creation with promise\r\n+    const createLink = () => {\r\n+      return new Promise(resolve => {\r\n+        setTimeout(() => {\r\n+          const link = new DefaultLinkModel();\r\n+          resolve(link);\r\n+        }, 1000);\r\n+      });\r\n+    };\r\n+\r\n+    // Example usage of createNode and createLink\r\n+    createNode('Node 1', 'rgb(0,192,255)').then(node1 => {\r\n+      node1.setPosition(100, 100);\r\n+      model.addNode(node1);\r\n+\r\n+      createNode('Node 2', 'rgb(0,192,255)').then(node2 => {\r\n+        node2.setPosition(400, 100);\r\n+        model.addNode(node2);\r\n+\r\n+        createLink().then(link => {\r\n+          link.setSourcePort(node1.getPort('out'));\r\n+          link.setTargetPort(node2.getPort('in'));\r\n+          model.addLink(link);\r\n+\r\n+          newEngine.setModel(model);\r\n+          setEngine(newEngine);\r\n+        });\r\n+      });\r\n+    });\r\n+  }, []);\r\n+\r\n   return (\r\n-    <div style={{ width: '100%', height: '500px' }}>\r\n-      <DiagramWidget engine={engine} model={model} />\r\n-    </div>\r\n+    engine && (\r\n+      <div style={{ height: \"100vh\" }}>\r\n+        {React.createElement(engine.getCanvasWidget())}\r\n+      </div>\r\n+    )\r\n   );\r\n };\r\n \r\n export default MyDiagram;\r\n"
                },
                {
                    "date": 1706946966777,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,81 +1,160 @@\n-// MyDiagram.js\r\n-import React, { useEffect, useState } from 'react';\r\n-import createEngine, { DiagramModel, DefaultNodeModel, DefaultLinkModel } from '@projectstorm/react-diagrams';\r\n+// Import React and React Flow\r\n+import React, { useState, useEffect } from \"react\";\r\n+import ReactFlow, {\r\n+  addEdge,\r\n+  removeElements,\r\n+  Background,\r\n+  Controls,\r\n+  MiniMap,\r\n+} from \"react-flow-renderer\";\r\n \r\n-// Custom Node Component\r\n-const CustomNodeComponent = (props) => {\r\n-  // Define your node properties here\r\n-  // e.g., size, color, labels\r\n-  // ...\r\n-  return (\r\n-    // Your custom node JSX goes here\r\n-  );\r\n-};\r\n+// Import custom node and link components\r\n+import CustomNode from \"./CustomNode\";\r\n+import CustomLink from \"./CustomLink\";\r\n \r\n-// Custom Link Component\r\n-const CustomLinkComponent = (props) => {\r\n-  // Define your link properties here\r\n-  // ...\r\n-  return (\r\n-    // Your custom link JSX goes here\r\n-  );\r\n-};\r\n+// Define the initial elements of the diagram\r\n+const initialElements = [\r\n+  {\r\n+    id: \"1\",\r\n+    type: \"custom\", // use the custom node component\r\n+    position: { x: 250, y: 5 },\r\n+    data: { label: \"Node 1\", color: \"red\", size: 50 }, // define the node properties\r\n+  },\r\n+  {\r\n+    id: \"2\",\r\n+    type: \"custom\",\r\n+    position: { x: 100, y: 100 },\r\n+    data: { label: \"Node 2\", color: \"green\", size: 40 },\r\n+  },\r\n+  {\r\n+    id: \"3\",\r\n+    type: \"custom\",\r\n+    position: { x: 400, y: 100 },\r\n+    data: { label: \"Node 3\", color: \"blue\", size: 60 },\r\n+  },\r\n+  {\r\n+    id: \"e1-2\",\r\n+    source: \"1\",\r\n+    target: \"2\",\r\n+    type: \"customEdge\", // use the custom link component\r\n+    animated: true,\r\n+    label: \"Link 1-2\",\r\n+  },\r\n+  {\r\n+    id: \"e1-3\",\r\n+    source: \"1\",\r\n+    target: \"3\",\r\n+    type: \"customEdge\",\r\n+    animated: true,\r\n+    label: \"Link 1-3\",\r\n+  },\r\n+];\r\n \r\n-const MyDiagram = () => {\r\n-  const [engine, setEngine] = useState(null);\r\n+// Define the main component for the diagram\r\n+const Diagram = () => {\r\n+  // Use state hooks to store the elements and the selected element\r\n+  const [elements, setElements] = useState(initialElements);\r\n+  const [selectedElement, setSelectedElement] = useState(null);\r\n \r\n+  // Use effect hook to update the elements when the selected element changes\r\n   useEffect(() => {\r\n-    const newEngine = createEngine();\r\n-    const model = new DiagramModel();\r\n-\r\n-    // Node creation with promise\r\n-    const createNode = (name, color) => {\r\n-      return new Promise(resolve => {\r\n-        setTimeout(() => {\r\n-          const node = new DefaultNodeModel(name, color);\r\n-          resolve(node);\r\n-        }, 1000);\r\n+    if (selectedElement) {\r\n+      // Modify the elements array as you wish\r\n+      // For example, you can change the color or size of the selected element\r\n+      const updatedElements = elements.map((el) => {\r\n+        if (el.id === selectedElement.id) {\r\n+          return {\r\n+            ...el,\r\n+            data: {\r\n+              ...el.data,\r\n+              color: \"yellow\",\r\n+              size: el.data.size + 10,\r\n+            },\r\n+          };\r\n+        }\r\n+        return el;\r\n       });\r\n-    };\r\n+      // Set the new elements array\r\n+      setElements(updatedElements);\r\n+    }\r\n+  }, [selectedElement]);\r\n \r\n-    // Link creation with promise\r\n-    const createLink = () => {\r\n-      return new Promise(resolve => {\r\n-        setTimeout(() => {\r\n-          const link = new DefaultLinkModel();\r\n-          resolve(link);\r\n-        }, 1000);\r\n-      });\r\n-    };\r\n+  // Define a function to handle adding a new edge\r\n+  const onConnect = (params) => {\r\n+    // Use the addEdge helper function to create a new edge object\r\n+    const edge = addEdge(\r\n+      {\r\n+        ...params,\r\n+        type: \"customEdge\", // use the custom link component\r\n+        animated: true,\r\n+        label: `Link ${params.source}-${params.target}`,\r\n+      },\r\n+      elements\r\n+    );\r\n+    // Set the new elements array\r\n+    setElements(edge);\r\n+  };\r\n \r\n-    // Example usage of createNode and createLink\r\n-    createNode('Node 1', 'rgb(0,192,255)').then(node1 => {\r\n-      node1.setPosition(100, 100);\r\n-      model.addNode(node1);\r\n+  // Define a function to handle removing elements\r\n+  const onElementsRemove = (elementsToRemove) => {\r\n+    // Use the removeElements helper function to filter out the elements to remove\r\n+    const remainingElements = removeElements(elementsToRemove, elements);\r\n+    // Set the new elements array\r\n+    setElements(remainingElements);\r\n+  };\r\n \r\n-      createNode('Node 2', 'rgb(0,192,255)').then(node2 => {\r\n-        node2.setPosition(400, 100);\r\n-        model.addNode(node2);\r\n+  // Define a function to handle selecting an element\r\n+  const onSelect = (element) => {\r\n+    // Set the selected element state\r\n+    setSelectedElement(element);\r\n+  };\r\n \r\n-        createLink().then(link => {\r\n-          link.setSourcePort(node1.getPort('out'));\r\n-          link.setTargetPort(node2.getPort('in'));\r\n-          model.addLink(link);\r\n+  // Define a function to handle loading the elements\r\n+  const onLoad = (reactFlowInstance) => {\r\n+    // Use the fitView helper function to fit the view to the elements\r\n+    reactFlowInstance.fitView();\r\n+  };\r\n \r\n-          newEngine.setModel(model);\r\n-          setEngine(newEngine);\r\n-        });\r\n-      });\r\n-    });\r\n-  }, []);\r\n+  // Define a function to handle saving the elements\r\n+  const onSave = () => {\r\n+    // Use the toObject helper function to convert the elements to a JSON object\r\n+    const elementsObject = ReactFlow.toObject(elements);\r\n+    // Save the elements object as you wish\r\n+    // For example, you can use localStorage or a backend API\r\n+    localStorage.setItem(\"elements\", JSON.stringify(elementsObject));\r\n+  };\r\n \r\n+  // Define a function to handle loading the elements\r\n+  const onLoadSaved = () => {\r\n+    // Load the elements object as you wish\r\n+    // For example, you can use localStorage or a backend API\r\n+    const elementsObject = JSON.parse(localStorage.getItem(\"elements\"));\r\n+    // Use the fromObject helper function to convert the elements object to an array\r\n+    const elementsArray = ReactFlow.fromObject(elementsObject);\r\n+    // Set the new elements array\r\n+    setElements(elementsArray);\r\n+  };\r\n+\r\n+  // Return the JSX code for rendering the diagram component\r\n   return (\r\n-    engine && (\r\n-      <div style={{ height: \"100vh\" }}>\r\n-        {React.createElement(engine.getCanvasWidget())}\r\n-      </div>\r\n-    )\r\n+    <div style={{ height: 300 }}>\r\n+      <ReactFlow\r\n+        elements={elements}\r\n+        onConnect={onConnect}\r\n+        onElementsRemove={onElementsRemove}\r\n+        onSelect={onSelect}\r\n+        onLoad={onLoad}\r\n+        nodeTypes={{ custom: CustomNode }} // register the custom node component\r\n+        edgeTypes={{ customEdge: CustomLink }} // register the custom link component\r\n+      >\r\n+        <Background />\r\n+        <MiniMap />\r\n+        <Controls />\r\n+      </ReactFlow>\r\n+      <button onClick={onSave}>Save</button>\r\n+      <button onClick={onLoadSaved}>Load</button>\r\n+    </div>\r\n   );\r\n };\r\n \r\n-export default MyDiagram;\r\n+export default Diagram;\r\n"
                },
                {
                    "date": 1706949859080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,160 +1,70 @@\n-// Import React and React Flow\r\n+// Import React and React Hooks\r\n import React, { useState, useEffect } from \"react\";\r\n-import ReactFlow, {\r\n-  addEdge,\r\n-  removeElements,\r\n-  Background,\r\n-  Controls,\r\n-  MiniMap,\r\n-} from \"react-flow-renderer\";\r\n+// Import the diagram engine and model classes from @projectstorm/react-diagrams\r\n+import {\r\n+  DiagramEngine,\r\n+  DiagramModel,\r\n+  DefaultNodeModel,\r\n+  DefaultLinkModel,\r\n+  DefaultPortModel,\r\n+} from \"@projectstorm/react-diagrams\";\r\n \r\n-// Import custom node and link components\r\n-import CustomNode from \"./CustomNode\";\r\n-import CustomLink from \"./CustomLink\";\r\n+// Define a custom functional component for the diagram\r\n+export default function DiagramComponent() {\r\n+  // Use the useState hook to create a state variable for the diagram engine\r\n+  const [engine, setEngine] = useState(null);\r\n \r\n-// Define the initial elements of the diagram\r\n-const initialElements = [\r\n-  {\r\n-    id: \"1\",\r\n-    type: \"custom\", // use the custom node component\r\n-    position: { x: 250, y: 5 },\r\n-    data: { label: \"Node 1\", color: \"red\", size: 50 }, // define the node properties\r\n-  },\r\n-  {\r\n-    id: \"2\",\r\n-    type: \"custom\",\r\n-    position: { x: 100, y: 100 },\r\n-    data: { label: \"Node 2\", color: \"green\", size: 40 },\r\n-  },\r\n-  {\r\n-    id: \"3\",\r\n-    type: \"custom\",\r\n-    position: { x: 400, y: 100 },\r\n-    data: { label: \"Node 3\", color: \"blue\", size: 60 },\r\n-  },\r\n-  {\r\n-    id: \"e1-2\",\r\n-    source: \"1\",\r\n-    target: \"2\",\r\n-    type: \"customEdge\", // use the custom link component\r\n-    animated: true,\r\n-    label: \"Link 1-2\",\r\n-  },\r\n-  {\r\n-    id: \"e1-3\",\r\n-    source: \"1\",\r\n-    target: \"3\",\r\n-    type: \"customEdge\",\r\n-    animated: true,\r\n-    label: \"Link 1-3\",\r\n-  },\r\n-];\r\n+  // Use the useEffect hook to initialize the diagram engine and model once the component is mounted\r\n+  useEffect(() => {\r\n+    // Create a new diagram engine\r\n+    const engine = new DiagramEngine();\r\n+    // Register the default node and link factories\r\n+    engine.getNodeFactories().registerFactory(new DefaultNodeFactory());\r\n+    engine.getLinkFactories().registerFactory(new DefaultLinkFactory());\r\n \r\n-// Define the main component for the diagram\r\n-const Diagram = () => {\r\n-  // Use state hooks to store the elements and the selected element\r\n-  const [elements, setElements] = useState(initialElements);\r\n-  const [selectedElement, setSelectedElement] = useState(null);\r\n+    // Create a new diagram model\r\n+    const model = new DiagramModel();\r\n \r\n-  // Use effect hook to update the elements when the selected element changes\r\n-  useEffect(() => {\r\n-    if (selectedElement) {\r\n-      // Modify the elements array as you wish\r\n-      // For example, you can change the color or size of the selected element\r\n-      const updatedElements = elements.map((el) => {\r\n-        if (el.id === selectedElement.id) {\r\n-          return {\r\n-            ...el,\r\n-            data: {\r\n-              ...el.data,\r\n-              color: \"yellow\",\r\n-              size: el.data.size + 10,\r\n-            },\r\n-          };\r\n-        }\r\n-        return el;\r\n-      });\r\n-      // Set the new elements array\r\n-      setElements(updatedElements);\r\n-    }\r\n-  }, [selectedElement]);\r\n+    // Define your shapes (nodes) and their properties\r\n+    // For example, create two nodes with different colors and labels\r\n+    const node1 = new DefaultNodeModel({\r\n+      name: \"Node 1\",\r\n+      color: \"rgb(0,192,255)\",\r\n+    });\r\n+    node1.setPosition(100, 100);\r\n \r\n-  // Define a function to handle adding a new edge\r\n-  const onConnect = (params) => {\r\n-    // Use the addEdge helper function to create a new edge object\r\n-    const edge = addEdge(\r\n-      {\r\n-        ...params,\r\n-        type: \"customEdge\", // use the custom link component\r\n-        animated: true,\r\n-        label: `Link ${params.source}-${params.target}`,\r\n-      },\r\n-      elements\r\n-    );\r\n-    // Set the new elements array\r\n-    setElements(edge);\r\n-  };\r\n+    const node2 = new DefaultNodeModel({\r\n+      name: \"Node 2\",\r\n+      color: \"rgb(192,255,0)\",\r\n+    });\r\n+    node2.setPosition(400, 100);\r\n \r\n-  // Define a function to handle removing elements\r\n-  const onElementsRemove = (elementsToRemove) => {\r\n-    // Use the removeElements helper function to filter out the elements to remove\r\n-    const remainingElements = removeElements(elementsToRemove, elements);\r\n-    // Set the new elements array\r\n-    setElements(remainingElements);\r\n-  };\r\n+    // Add ports to the nodes\r\n+    // For example, add one out port and one in port to each node\r\n+    node1.addPort(new DefaultPortModel({ in: false, name: \"out\" }));\r\n+    node2.addPort(new DefaultPortModel({ in: true, name: \"in\" }));\r\n \r\n-  // Define a function to handle selecting an element\r\n-  const onSelect = (element) => {\r\n-    // Set the selected element state\r\n-    setSelectedElement(element);\r\n-  };\r\n+    // Create a link between the nodes\r\n+    // For example, connect the out port of node 1 to the in port of node 2\r\n+    const link = new DefaultLinkModel();\r\n+    link.setSourcePort(node1.getPort(\"out\"));\r\n+    link.setTargetPort(node2.getPort(\"in\"));\r\n \r\n-  // Define a function to handle loading the elements\r\n-  const onLoad = (reactFlowInstance) => {\r\n-    // Use the fitView helper function to fit the view to the elements\r\n-    reactFlowInstance.fitView();\r\n-  };\r\n+    // Add the nodes and the link to the model\r\n+    model.addAll(node1, node2, link);\r\n \r\n-  // Define a function to handle saving the elements\r\n-  const onSave = () => {\r\n-    // Use the toObject helper function to convert the elements to a JSON object\r\n-    const elementsObject = ReactFlow.toObject(elements);\r\n-    // Save the elements object as you wish\r\n-    // For example, you can use localStorage or a backend API\r\n-    localStorage.setItem(\"elements\", JSON.stringify(elementsObject));\r\n-  };\r\n+    // Set the model to the engine\r\n+    engine.setModel(model);\r\n \r\n-  // Define a function to handle loading the elements\r\n-  const onLoadSaved = () => {\r\n-    // Load the elements object as you wish\r\n-    // For example, you can use localStorage or a backend API\r\n-    const elementsObject = JSON.parse(localStorage.getItem(\"elements\"));\r\n-    // Use the fromObject helper function to convert the elements object to an array\r\n-    const elementsArray = ReactFlow.fromObject(elementsObject);\r\n-    // Set the new elements array\r\n-    setElements(elementsArray);\r\n-  };\r\n+    // Set the engine to the state variable\r\n+    setEngine(engine);\r\n+  }, []); // Pass an empty array as the second argument to run the effect only once\r\n \r\n-  // Return the JSX code for rendering the diagram component\r\n-  return (\r\n-    <div style={{ height: 300 }}>\r\n-      <ReactFlow\r\n-        elements={elements}\r\n-        onConnect={onConnect}\r\n-        onElementsRemove={onElementsRemove}\r\n-        onSelect={onSelect}\r\n-        onLoad={onLoad}\r\n-        nodeTypes={{ custom: CustomNode }} // register the custom node component\r\n-        edgeTypes={{ customEdge: CustomLink }} // register the custom link component\r\n-      >\r\n-        <Background />\r\n-        <MiniMap />\r\n-        <Controls />\r\n-      </ReactFlow>\r\n-      <button onClick={onSave}>Save</button>\r\n-      <button onClick={onLoadSaved}>Load</button>\r\n-    </div>\r\n-  );\r\n-};\r\n-\r\n-export default Diagram;\r\n+  // Return a promise that resolves with the engine\r\n+  // You can use this promise to render the diagram in your UI\r\n+  return new Promise((resolve) => {\r\n+    setTimeout(() => {\r\n+      resolve(engine);\r\n+    }, 1000);\r\n+  });\r\n+}\r\n"
                },
                {
                    "date": 1706949978203,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,70 +1,9 @@\n-// Import React and React Hooks\r\n-import React, { useState, useEffect } from \"react\";\r\n-// Import the diagram engine and model classes from @projectstorm/react-diagrams\r\n+import createEngine, { \r\n+    DefaultLinkModel, \r\n+    DefaultNodeModel,\r\n+    DiagramModel \r\n+} from '@projectstorm/react-diagrams';\r\n+\r\n import {\r\n-  DiagramEngine,\r\n-  DiagramModel,\r\n-  DefaultNodeModel,\r\n-  DefaultLinkModel,\r\n-  DefaultPortModel,\r\n-} from \"@projectstorm/react-diagrams\";\r\n-\r\n-// Define a custom functional component for the diagram\r\n-export default function DiagramComponent() {\r\n-  // Use the useState hook to create a state variable for the diagram engine\r\n-  const [engine, setEngine] = useState(null);\r\n-\r\n-  // Use the useEffect hook to initialize the diagram engine and model once the component is mounted\r\n-  useEffect(() => {\r\n-    // Create a new diagram engine\r\n-    const engine = new DiagramEngine();\r\n-    // Register the default node and link factories\r\n-    engine.getNodeFactories().registerFactory(new DefaultNodeFactory());\r\n-    engine.getLinkFactories().registerFactory(new DefaultLinkFactory());\r\n-\r\n-    // Create a new diagram model\r\n-    const model = new DiagramModel();\r\n-\r\n-    // Define your shapes (nodes) and their properties\r\n-    // For example, create two nodes with different colors and labels\r\n-    const node1 = new DefaultNodeModel({\r\n-      name: \"Node 1\",\r\n-      color: \"rgb(0,192,255)\",\r\n-    });\r\n-    node1.setPosition(100, 100);\r\n-\r\n-    const node2 = new DefaultNodeModel({\r\n-      name: \"Node 2\",\r\n-      color: \"rgb(192,255,0)\",\r\n-    });\r\n-    node2.setPosition(400, 100);\r\n-\r\n-    // Add ports to the nodes\r\n-    // For example, add one out port and one in port to each node\r\n-    node1.addPort(new DefaultPortModel({ in: false, name: \"out\" }));\r\n-    node2.addPort(new DefaultPortModel({ in: true, name: \"in\" }));\r\n-\r\n-    // Create a link between the nodes\r\n-    // For example, connect the out port of node 1 to the in port of node 2\r\n-    const link = new DefaultLinkModel();\r\n-    link.setSourcePort(node1.getPort(\"out\"));\r\n-    link.setTargetPort(node2.getPort(\"in\"));\r\n-\r\n-    // Add the nodes and the link to the model\r\n-    model.addAll(node1, node2, link);\r\n-\r\n-    // Set the model to the engine\r\n-    engine.setModel(model);\r\n-\r\n-    // Set the engine to the state variable\r\n-    setEngine(engine);\r\n-  }, []); // Pass an empty array as the second argument to run the effect only once\r\n-\r\n-  // Return a promise that resolves with the engine\r\n-  // You can use this promise to render the diagram in your UI\r\n-  return new Promise((resolve) => {\r\n-    setTimeout(() => {\r\n-      resolve(engine);\r\n-    }, 1000);\r\n-  });\r\n-}\r\n+    CanvasWidget\r\n+} from '@projectstorm/react-canvas-core';\n\\ No newline at end of file\n"
                },
                {
                    "date": 1706951479893,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,132 @@\n-import createEngine, { \r\n-    DefaultLinkModel, \r\n-    DefaultNodeModel,\r\n-    DiagramModel \r\n-} from '@projectstorm/react-diagrams';\r\n+// Import React and the diagram components\r\n+import React, { useState, useEffect } from \"react\";\r\n+import createEngine, {\r\n+  DiagramModel,\r\n\\ No newline at end of file\n+  DefaultNodeModel,\r\n+  DefaultLinkModel,\r\n+  DefaultPortModel,\r\n+} from \"@projectstorm/react-diagrams\";\r\n \r\n-import {\r\n-    CanvasWidget\r\n-} from '@projectstorm/react-canvas-core';\n+// Define a custom functional component for the diagram\r\n+const Diagram = () => {\r\n+  // Use state hooks to store the engine and the model\r\n+  const [engine, setEngine] = useState(null);\r\n+  const [model, setModel] = useState(null);\r\n+\r\n+  // Use effect hook to initialize the engine and the model once the component is mounted\r\n+  useEffect(() => {\r\n+    // Create a new engine instance\r\n+    const engine = createEngine();\r\n+\r\n+    // Create a new model instance\r\n+    const model = new DiagramModel();\r\n+\r\n+    // Define your shapes (nodes) and their properties\r\n+    // You can customize the size, color, labels, etc.\r\n+    const node1 = new DefaultNodeModel({\r\n+      name: \"Node 1\",\r\n+      color: \"rgb(0,192,255)\",\r\n+    });\r\n+    node1.setPosition(100, 100);\r\n+\r\n+    const node2 = new DefaultNodeModel({\r\n+      name: \"Node 2\",\r\n+      color: \"rgb(0,192,255)\",\r\n+    });\r\n+    node2.setPosition(400, 100);\r\n+\r\n+    const node3 = new DefaultNodeModel({\r\n+      name: \"Node 3\",\r\n+      color: \"rgb(0,192,255)\",\r\n+    });\r\n+    node3.setPosition(250, 200);\r\n+\r\n+    // Add ports to the nodes\r\n+    // You can specify the type (in or out) and the name of the ports\r\n+    const port1 = node1.addPort(new DefaultPortModel({ in: true, name: \"in\" }));\r\n+    const port2 = node1.addPort(new DefaultPortModel({ in: false, name: \"out\" }));\r\n+    const port3 = node2.addPort(new DefaultPortModel({ in: true, name: \"in\" }));\r\n+    const port4 = node2.addPort(new DefaultPortModel({ in: false, name: \"out\" }));\r\n+    const port5 = node3.addPort(new DefaultPortModel({ in: true, name: \"in\" }));\r\n+    const port6 = node3.addPort(new DefaultPortModel({ in: false, name: \"out\" }));\r\n+\r\n+    // Define your connectors (links) and their properties\r\n+    // You can customize the width, color, labels, etc.\r\n+    const link1 = port2.link<DefaultLinkModel>(port3);\r\n+    link1.getOptions().label = \"Link 1\";\r\n+    link1.getOptions().width = 3;\r\n+    link1.getOptions().color = \"black\";\r\n+\r\n+    const link2 = port4.link<DefaultLinkModel>(port5);\r\n+    link2.getOptions().label = \"Link 2\";\r\n+    link2.getOptions().width = 3;\r\n+    link2.getOptions().color = \"black\";\r\n+\r\n+    const link3 = port6.link<DefaultLinkModel>(port1);\r\n+    link3.getOptions().label = \"Link 3\";\r\n+    link3.getOptions().width = 3;\r\n+    link3.getOptions().color = \"black\";\r\n+\r\n+    // Add the nodes and the links to the model\r\n+    model.addAll(node1, node2, node3, link1, link2, link3);\r\n+\r\n+    // Set the model to the engine\r\n+    engine.setModel(model);\r\n+\r\n+    // Set the engine and the model to the state\r\n+    setEngine(engine);\r\n+    setModel(model);\r\n+  }, []);\r\n+\r\n+  // Return a promise that resolves after a delay\r\n+  // You can use this to simulate some asynchronous operation\r\n+  const delay = (ms) => {\r\n+    return new Promise((resolve) => {\r\n+      setTimeout(() => {\r\n+        resolve();\r\n+      }, ms);\r\n+    });\r\n+  };\r\n+\r\n+  // Return the diagram component with the engine prop\r\n+  // You can also add some buttons or other UI elements to interact with the diagram\r\n+  return (\r\n+    <div>\r\n+      <h1>Diagram Example</h1>\r\n+      <button\r\n+        onClick={async () => {\r\n+          // Perform some operation on the model\r\n+          // For example, you can add, remove, or modify the nodes or the links\r\n+          // You can also use the model.serialize() method to get the JSON representation of the model\r\n+          console.log(\"Before:\", model.serialize());\r\n+\r\n+          // Wait for the promise to resolve\r\n+          await delay(1000);\r\n+\r\n+          // Perform some operation on the model\r\n+          // For example, you can add, remove, or modify the nodes or the links\r\n+          // You can also use the model.deserializeModel() method to load the model from a JSON object\r\n+          model.removeNode(node1);\r\n+          console.log(\"After:\", model.serialize());\r\n+\r\n+          // Update the model in the state to trigger a re-render\r\n+          setModel(model.clone());\r\n+        }}\r\n+      >\r\n+        Click me\r\n+      </button>\r\n+      <div\r\n+        style={{\r\n+          height: \"600px\",\r\n+          width: \"800px\",\r\n+          border: \"solid 1px black\",\r\n+          margin: \"10px\",\r\n+        }}\r\n+      >\r\n+        {engine && <CanvasWidget engine={engine} />}\r\n+      </div>\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default Diagram;\r\n"
                },
                {
                    "date": 1706951579320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,8 +6,10 @@\n   DefaultLinkModel,\r\n   DefaultPortModel,\r\n } from \"@projectstorm/react-diagrams\";\r\n \r\n+import { CanvasWidget } from \"@projectstorm/react-canvas-core\";\r\n+\r\n // Define a custom functional component for the diagram\r\n const Diagram = () => {\r\n   // Use state hooks to store the engine and the model\r\n   const [engine, setEngine] = useState(null);\r\n@@ -128,5 +130,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default Diagram;\n\\ No newline at end of file\n+export default Diagram;\r\n"
                },
                {
                    "date": 1706951615183,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -94,30 +94,9 @@\n   // You can also add some buttons or other UI elements to interact with the diagram\r\n   return (\r\n     <div>\r\n       <h1>Diagram Example</h1>\r\n-      <button\r\n-        onClick={async () => {\r\n-          // Perform some operation on the model\r\n-          // For example, you can add, remove, or modify the nodes or the links\r\n-          // You can also use the model.serialize() method to get the JSON representation of the model\r\n-          console.log(\"Before:\", model.serialize());\r\n-\r\n-          // Wait for the promise to resolve\r\n-          await delay(1000);\r\n-\r\n-          // Perform some operation on the model\r\n-          // For example, you can add, remove, or modify the nodes or the links\r\n-          // You can also use the model.deserializeModel() method to load the model from a JSON object\r\n-          model.removeNode(node1);\r\n-          console.log(\"After:\", model.serialize());\r\n-\r\n-          // Update the model in the state to trigger a re-render\r\n-          setModel(model.clone());\r\n-        }}\r\n-      >\r\n-        Click me\r\n-      </button>\r\n+  \r\n       <div\r\n         style={{\r\n           height: \"600px\",\r\n           width: \"800px\",\r\n"
                },
                {
                    "date": 1706952503895,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,113 +1,63 @@\n-// Import React and the diagram components\r\n-import React, { useState, useEffect } from \"react\";\r\n-import createEngine, {\r\n-  DiagramModel,\r\n-  DefaultNodeModel,\r\n-  DefaultLinkModel,\r\n-  DefaultPortModel,\r\n-} from \"@projectstorm/react-diagrams\";\r\n+// import the necessary modules\r\n+import React, { useEffect, useState } from 'react';\r\n+import createEngine, { DiagramModel, DefaultNodeModel } from '@projectstorm/react-diagrams';\r\n+import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n+import { TSCustomNodeFactory } from './TSCustomNodeFactory'; \r\n+import { TSCustomNodeModel } from './TSCustomNodeModel'; \r\n \r\n-import { CanvasWidget } from \"@projectstorm/react-canvas-core\";\r\n-\r\n-// Define a custom functional component for the diagram\r\n+// define a functional component for the diagram\r\n const Diagram = () => {\r\n-  // Use state hooks to store the engine and the model\r\n-  const [engine, setEngine] = useState(null);\r\n-  const [model, setModel] = useState(null);\r\n+  // create a state variable for the engine\r\n+  const [engine, setEngine] = useState(createEngine());\r\n \r\n-  // Use effect hook to initialize the engine and the model once the component is mounted\r\n+  // create a state variable for the model\r\n+  const [model, setModel] = useState(new DiagramModel());\r\n+\r\n+  // use useEffect hook to initialize the engine and model\r\n   useEffect(() => {\r\n-    // Create a new engine instance\r\n-    const engine = createEngine();\r\n+    // register the custom node factory\r\n+    engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n \r\n-    // Create a new model instance\r\n-    const model = new DiagramModel();\r\n-\r\n-    // Define your shapes (nodes) and their properties\r\n-    // You can customize the size, color, labels, etc.\r\n-    const node1 = new DefaultNodeModel({\r\n-      name: \"Node 1\",\r\n-      color: \"rgb(0,192,255)\",\r\n+    // create some custom nodes\r\n+    const node1 = new TSCustomNodeModel({\r\n+      name: 'Node 1',\r\n+      color: 'rgb(0,192,255)',\r\n+      value: 10\r\n     });\r\n-    node1.setPosition(100, 100);\r\n \r\n-    const node2 = new DefaultNodeModel({\r\n-      name: \"Node 2\",\r\n-      color: \"rgb(0,192,255)\",\r\n+    const node2 = new TSCustomNodeModel({\r\n+      name: 'Node 2',\r\n+      color: 'rgb(255,255,0)',\r\n+      value: 20\r\n     });\r\n-    node2.setPosition(400, 100);\r\n \r\n-    const node3 = new DefaultNodeModel({\r\n-      name: \"Node 3\",\r\n-      color: \"rgb(0,192,255)\",\r\n+    const node3 = new TSCustomNodeModel({\r\n+      name: 'Node 3',\r\n+      color: 'rgb(192,255,0)',\r\n+      value: 30\r\n     });\r\n-    node3.setPosition(250, 200);\r\n \r\n-    // Add ports to the nodes\r\n-    // You can specify the type (in or out) and the name of the ports\r\n-    const port1 = node1.addPort(new DefaultPortModel({ in: true, name: \"in\" }));\r\n-    const port2 = node1.addPort(new DefaultPortModel({ in: false, name: \"out\" }));\r\n-    const port3 = node2.addPort(new DefaultPortModel({ in: true, name: \"in\" }));\r\n-    const port4 = node2.addPort(new DefaultPortModel({ in: false, name: \"out\" }));\r\n-    const port5 = node3.addPort(new DefaultPortModel({ in: true, name: \"in\" }));\r\n-    const port6 = node3.addPort(new DefaultPortModel({ in: false, name: \"out\" }));\r\n+    // position the nodes on the canvas\r\n+    node1.setPosition(50, 50);\r\n+    node2.setPosition(200, 50);\r\n+    node3.setPosition(350, 50);\r\n \r\n-    // Define your connectors (links) and their properties\r\n-    // You can customize the width, color, labels, etc.\r\n-    const link1 = port2.link<DefaultLinkModel>(port3);\r\n-    link1.getOptions().label = \"Link 1\";\r\n-    link1.getOptions().width = 3;\r\n-    link1.getOptions().color = \"black\";\r\n+    // create links between the nodes\r\n+    const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n+    const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n \r\n-    const link2 = port4.link<DefaultLinkModel>(port5);\r\n-    link2.getOptions().label = \"Link 2\";\r\n-    link2.getOptions().width = 3;\r\n-    link2.getOptions().color = \"black\";\r\n+    // add the nodes and links to the model\r\n+    model.addAll(node1, node2, node3, link1, link2);\r\n \r\n-    const link3 = port6.link<DefaultLinkModel>(port1);\r\n-    link3.getOptions().label = \"Link 3\";\r\n-    link3.getOptions().width = 3;\r\n-    link3.getOptions().color = \"black\";\r\n-\r\n-    // Add the nodes and the links to the model\r\n-    model.addAll(node1, node2, node3, link1, link2, link3);\r\n-\r\n-    // Set the model to the engine\r\n+    // set the model to the engine\r\n     engine.setModel(model);\r\n-\r\n-    // Set the engine and the model to the state\r\n-    setEngine(engine);\r\n-    setModel(model);\r\n   }, []);\r\n \r\n-  // Return a promise that resolves after a delay\r\n-  // You can use this to simulate some asynchronous operation\r\n-  const delay = (ms) => {\r\n-    return new Promise((resolve) => {\r\n-      setTimeout(() => {\r\n-        resolve();\r\n-      }, ms);\r\n-    });\r\n-  };\r\n-\r\n-  // Return the diagram component with the engine prop\r\n-  // You can also add some buttons or other UI elements to interact with the diagram\r\n+  // return the canvas widget to render the diagram\r\n   return (\r\n-    <div>\r\n-      <h1>Diagram Example</h1>\r\n-  \r\n-      <div\r\n-        style={{\r\n-          height: \"600px\",\r\n-          width: \"800px\",\r\n-          border: \"solid 1px black\",\r\n-          margin: \"10px\",\r\n-        }}\r\n-      >\r\n-        {engine && <CanvasWidget engine={engine} />}\r\n-      </div>\r\n-    </div>\r\n+    <CanvasWidget className=\"diagram-container\" engine={engine} />\r\n   );\r\n };\r\n \r\n export default Diagram;\r\n+\r\n"
                },
                {
                    "date": 1706952937672,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,14 +50,17 @@\n     model.addAll(node1, node2, node3, link1, link2);\r\n \r\n     // set the model to the engine\r\n     engine.setModel(model);\r\n+\r\n+    // update the state variables\r\n+    setEngine(engine);\r\n+    setModel(model);\r\n   }, []);\r\n \r\n   // return the canvas widget to render the diagram\r\n   return (\r\n-    <CanvasWidget className=\"diagram-container\" engine={engine} />\r\n+    <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />\r\n   );\r\n };\r\n \r\n export default Diagram;\r\n-\r\n"
                },
                {
                    "date": 1706952957249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,10 +57,10 @@\n     setModel(model);\r\n   }, []);\r\n \r\n   // return the canvas widget to render the diagram\r\n-  return (\r\n-    <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />\r\n+  return (<></>\r\n+    // <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />\r\n   );\r\n };\r\n \r\n export default Diagram;\r\n"
                },
                {
                    "date": 1706952980419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,10 +57,10 @@\n     setModel(model);\r\n   }, []);\r\n \r\n   // return the canvas widget to render the diagram\r\n-  return (<></>\r\n-    // <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />\r\n+  return (\r\n+    <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />\r\n   );\r\n };\r\n \r\n export default Diagram;\r\n"
                },
                {
                    "date": 1706953075837,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,66 +1,70 @@\n // import the necessary modules\r\n import React, { useEffect, useState } from 'react';\r\n import createEngine, { DiagramModel, DefaultNodeModel } from '@projectstorm/react-diagrams';\r\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n-import { TSCustomNodeFactory } from './TSCustomNodeFactory'; \r\n-import { TSCustomNodeModel } from './TSCustomNodeModel'; \r\n+import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n+import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n \r\n // define a functional component for the diagram\r\n const Diagram = () => {\r\n-  // create a state variable for the engine\r\n-  const [engine, setEngine] = useState(createEngine());\r\n+    // create a state variable for the engine\r\n+    const [engine, setEngine] = useState(createEngine());\r\n \r\n-  // create a state variable for the model\r\n-  const [model, setModel] = useState(new DiagramModel());\r\n+    // create a state variable for the model\r\n+    const [model, setModel] = useState(new DiagramModel());\r\n \r\n-  // use useEffect hook to initialize the engine and model\r\n-  useEffect(() => {\r\n-    // register the custom node factory\r\n-    engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n+    // use useEffect hook to initialize the engine and model\r\n+    useEffect(() => {\r\n+        // register the custom node factory\r\n+        engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n \r\n-    // create some custom nodes\r\n-    const node1 = new TSCustomNodeModel({\r\n-      name: 'Node 1',\r\n-      color: 'rgb(0,192,255)',\r\n-      value: 10\r\n-    });\r\n+        // create some custom nodes\r\n+        const node1 = new TSCustomNodeModel({\r\n+            name: 'Node 1',\r\n+            color: 'rgb(0,192,255)',\r\n+            value: 10\r\n+        });\r\n \r\n-    const node2 = new TSCustomNodeModel({\r\n-      name: 'Node 2',\r\n-      color: 'rgb(255,255,0)',\r\n-      value: 20\r\n-    });\r\n+        const node2 = new TSCustomNodeModel({\r\n+            name: 'Node 2',\r\n+            color: 'rgb(255,255,0)',\r\n+            value: 20\r\n+        });\r\n \r\n-    const node3 = new TSCustomNodeModel({\r\n-      name: 'Node 3',\r\n-      color: 'rgb(192,255,0)',\r\n-      value: 30\r\n-    });\r\n+        const node3 = new TSCustomNodeModel({\r\n+            name: 'Node 3',\r\n+            color: 'rgb(192,255,0)',\r\n+            value: 30\r\n+        });\r\n \r\n-    // position the nodes on the canvas\r\n-    node1.setPosition(50, 50);\r\n-    node2.setPosition(200, 50);\r\n-    node3.setPosition(350, 50);\r\n+        // position the nodes on the canvas\r\n+        node1.setPosition(50, 50);\r\n+        node2.setPosition(200, 50);\r\n+        node3.setPosition(350, 50);\r\n \r\n-    // create links between the nodes\r\n-    const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n-    const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n+        // create links between the nodes\r\n+        const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n+        const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n \r\n-    // add the nodes and links to the model\r\n-    model.addAll(node1, node2, node3, link1, link2);\r\n+        // add the nodes and links to the model\r\n+        model.addAll(node1, node2, node3, link1, link2);\r\n \r\n-    // set the model to the engine\r\n-    engine.setModel(model);\r\n+        // set the model to the engine\r\n+        engine.setModel(model);\r\n \r\n-    // update the state variables\r\n-    setEngine(engine);\r\n-    setModel(model);\r\n-  }, []);\r\n+        // update the state variables\r\n+        setEngine(engine);\r\n+        setModel(model);\r\n+    }, []);\r\n \r\n-  // return the canvas widget to render the diagram\r\n-  return (\r\n-    <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />\r\n-  );\r\n+    // return the canvas widget to render the diagram\r\n+    return (\r\n+        <>\r\n+            {engine && (\r\n+                <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />\r\n+            )}\r\n+        </>\r\n+    );\r\n };\r\n \r\n export default Diagram;\r\n"
                },
                {
                    "date": 1706953179419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <>\r\n-            {engine && (\r\n+            {model && (\r\n                 <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />\r\n             )}\r\n         </>\r\n     );\r\n"
                },
                {
                    "date": 1706953249597,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,12 +50,12 @@\n         model.addAll(node1, node2, node3, link1, link2);\r\n \r\n         // set the model to the engine\r\n         engine.setModel(model);\r\n-\r\n+ setModel(model);\r\n         // update the state variables\r\n         setEngine(engine);\r\n-        setModel(model);\r\n+       \r\n     }, []);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n"
                },
                {
                    "date": 1706953341966,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <>\r\n             {model && (\r\n-                <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />\r\n+                <CanvasWidget className=\"diagram-container\" engine={engine} } />\r\n             )}\r\n         </>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1706953446794,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -58,11 +58,10 @@\n     }, []);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n-        <>\r\n-            {model && (\r\n-                <CanvasWidget className=\"diagram-container\" engine={engine} } />\r\n+        <>engine && (\r\n+                <CanvasWidget className=\"diagram-container\" engine={engine} />\r\n             )}\r\n         </>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1706953514386,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -50,18 +50,19 @@\n         model.addAll(node1, node2, node3, link1, link2);\r\n \r\n         // set the model to the engine\r\n         engine.setModel(model);\r\n- setModel(model);\r\n+\r\n         // update the state variables\r\n         setEngine(engine);\r\n-       \r\n+        setModel(model);\r\n     }, []);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n-        <>engine && (\r\n-                <CanvasWidget className=\"diagram-container\" engine={engine} />\r\n+        <>\r\n+            {engine && (\r\n+                <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />\r\n             )}\r\n         </>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1706953525769,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,11 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <>\r\n-            {engine && (\r\n+            {/* {engine && (\r\n                 <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />\r\n-            )}\r\n+            )} */}\r\n         </>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1706953540454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,11 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <>\r\n-            {/* {engine && (\r\n+            {engine && (\r\n                 <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />\r\n-            )} */}\r\n+            )}\r\n         </>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1706953573719,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,11 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <>\r\n-            {engine && (\r\n+            {/* {engine && (\r\n                 <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />\r\n-            )}\r\n+            )} */}\r\n         </>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1706953644940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     const [engine, setEngine] = useState(createEngine());\r\n \r\n     // create a state variable for the model\r\n     const [model, setModel] = useState(new DiagramModel());\r\n-\r\n+const [modelset,setmodelset]=true;\r\n     // use useEffect hook to initialize the engine and model\r\n     useEffect(() => {\r\n         // register the custom node factory\r\n         engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n@@ -59,11 +59,11 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <>\r\n-            {/* {engine && (\r\n+            {modelset && (\r\n                 <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />\r\n-            )} */}\r\n+            )}\r\n         </>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1706953660799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     const [engine, setEngine] = useState(createEngine());\r\n \r\n     // create a state variable for the model\r\n     const [model, setModel] = useState(new DiagramModel());\r\n-const [modelset,setmodelset]=true;\r\n+const [modelset,setmodelset]=false;\r\n     // use useEffect hook to initialize the engine and model\r\n     useEffect(() => {\r\n         // register the custom node factory\r\n         engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n"
                },
                {
                    "date": 1706953721249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,11 +59,9 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <>\r\n-            {modelset && (\r\n-                <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />\r\n-            )}\r\n+            {modelset && ( <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />)}\r\n         </>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1706953733871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -54,8 +54,9 @@\n \r\n         // update the state variables\r\n         setEngine(engine);\r\n         setModel(model);\r\n+        setmodelset(true)\r\n     }, []);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n"
                },
                {
                    "date": 1706953798471,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     const [engine, setEngine] = useState(createEngine());\r\n \r\n     // create a state variable for the model\r\n     const [model, setModel] = useState(new DiagramModel());\r\n-const [modelset,setmodelset]=false;\r\n+const [modelset,setmodelset]=useState(false);\r\n     // use useEffect hook to initialize the engine and model\r\n     useEffect(() => {\r\n         // register the custom node factory\r\n         engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n"
                },
                {
                    "date": 1706953902401,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <>\r\n-            {modelset && ( <CanvasWidget className=\"diagram-container\" engine={engine} model={model} />)}\r\n+            {modelset && ( <CanvasWidget className=\"diagram-container\" engine={engine} />)}\r\n         </>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1706954135605,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,17 +3,18 @@\n import createEngine, { DiagramModel, DefaultNodeModel } from '@projectstorm/react-diagrams';\r\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n+import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n \r\n // define a functional component for the diagram\r\n const Diagram = () => {\r\n     // create a state variable for the engine\r\n     const [engine, setEngine] = useState(createEngine());\r\n \r\n     // create a state variable for the model\r\n     const [model, setModel] = useState(new DiagramModel());\r\n-const [modelset,setmodelset]=useState(false);\r\n+    const [modelset, setmodelset] = useState(false);\r\n     // use useEffect hook to initialize the engine and model\r\n     useEffect(() => {\r\n         // register the custom node factory\r\n         engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n@@ -60,9 +61,14 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <>\r\n-            {modelset && ( <CanvasWidget className=\"diagram-container\" engine={engine} />)}\r\n+            {modelset && (\r\n+                <DemoCanvasWidget>\r\n+                    <CanvasWidget className=\"diagram-container\" engine={engine} />\r\n+                </DemoCanvasWidget>\r\n+\r\n+            )}\r\n         </>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1706954212959,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,69 +7,43 @@\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n \r\n // define a functional component for the diagram\r\n const Diagram = () => {\r\n-    // create a state variable for the engine\r\n-    const [engine, setEngine] = useState(createEngine());\r\n+\t//1) setup the diagram engine\r\n+\tvar engine = createEngine();\r\n \r\n-    // create a state variable for the model\r\n-    const [model, setModel] = useState(new DiagramModel());\r\n-    const [modelset, setmodelset] = useState(false);\r\n-    // use useEffect hook to initialize the engine and model\r\n-    useEffect(() => {\r\n-        // register the custom node factory\r\n-        engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n+\t//2) setup the diagram model\r\n+\tvar model = new DiagramModel();\r\n \r\n-        // create some custom nodes\r\n-        const node1 = new TSCustomNodeModel({\r\n-            name: 'Node 1',\r\n-            color: 'rgb(0,192,255)',\r\n-            value: 10\r\n-        });\r\n+\t//3-A) create a default node\r\n+\tvar node1 = new DefaultNodeModel({\r\n+\t\tname: 'Node 1',\r\n+\t\tcolor: 'rgb(0,192,255)'\r\n+\t});\r\n+\tnode1.setPosition(100, 100);\r\n+\tlet port1 = node1.addOutPort('Out');\r\n \r\n-        const node2 = new TSCustomNodeModel({\r\n-            name: 'Node 2',\r\n-            color: 'rgb(255,255,0)',\r\n-            value: 20\r\n-        });\r\n+\t//3-B) create another default node\r\n+\tvar node2 = new DefaultNodeModel('Node 2', 'rgb(192,255,0)');\r\n+\tlet port2 = node2.addInPort('In');\r\n+\tnode2.setPosition(400, 100);\r\n \r\n-        const node3 = new TSCustomNodeModel({\r\n-            name: 'Node 3',\r\n-            color: 'rgb(192,255,0)',\r\n-            value: 30\r\n-        });\r\n+\t// link the ports\r\n+\tlet link1 = port1.link<DefaultLinkModel>(port2);\r\n+\tlink1.getOptions().testName = 'Test';\r\n+\tlink1.addLabel('Hello World!');\r\n \r\n-        // position the nodes on the canvas\r\n-        node1.setPosition(50, 50);\r\n-        node2.setPosition(200, 50);\r\n-        node3.setPosition(350, 50);\r\n+\t//4) add the models to the root graph\r\n+\tmodel.addAll(node1, node2, link1);\r\n \r\n-        // create links between the nodes\r\n-        const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n-        const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n+\t//5) load model into engine\r\n+\tengine.setModel(model);\r\n \r\n-        // add the nodes and links to the model\r\n-        model.addAll(node1, node2, node3, link1, link2);\r\n-\r\n-        // set the model to the engine\r\n-        engine.setModel(model);\r\n-\r\n-        // update the state variables\r\n-        setEngine(engine);\r\n-        setModel(model);\r\n-        setmodelset(true)\r\n-    }, []);\r\n-\r\n-    // return the canvas widget to render the diagram\r\n-    return (\r\n-        <>\r\n-            {modelset && (\r\n-                <DemoCanvasWidget>\r\n-                    <CanvasWidget className=\"diagram-container\" engine={engine} />\r\n-                </DemoCanvasWidget>\r\n-\r\n-            )}\r\n-        </>\r\n-    );\r\n+\t//6) render the diagram!\r\n+\treturn (\r\n+\t\t<DemoCanvasWidget>\r\n+\t\t\t<CanvasWidget engine={engine} />\r\n+\t\t</DemoCanvasWidget>\r\n+\t);\r\n };\r\n \r\n export default Diagram;\r\n"
                },
                {
                    "date": 1706954241419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,7 @@\n // import the necessary modules\r\n import React, { useEffect, useState } from 'react';\r\n-import createEngine, { DiagramModel, DefaultNodeModel } from '@projectstorm/react-diagrams';\r\n+import createEngine, { DiagramModel, DefaultNodeModel,DefaultLinkModel } from '@projectstorm/react-diagrams';\r\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n@@ -43,7 +43,7 @@\n \t\t<DemoCanvasWidget>\r\n \t\t\t<CanvasWidget engine={engine} />\r\n \t\t</DemoCanvasWidget>\r\n \t);\r\n-};\r\n+};s\r\n \r\n export default Diagram;\r\n"
                },
                {
                    "date": 1706954252029,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,7 +43,7 @@\n \t\t<DemoCanvasWidget>\r\n \t\t\t<CanvasWidget engine={engine} />\r\n \t\t</DemoCanvasWidget>\r\n \t);\r\n-};s\r\n+};\r\n \r\n export default Diagram;\r\n"
                },
                {
                    "date": 1706954275628,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,49 +1,75 @@\n // import the necessary modules\r\n import React, { useEffect, useState } from 'react';\r\n-import createEngine, { DiagramModel, DefaultNodeModel,DefaultLinkModel } from '@projectstorm/react-diagrams';\r\n+import createEngine, { DiagramModel, DefaultNodeModel } from '@projectstorm/react-diagrams';\r\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n \r\n // define a functional component for the diagram\r\n const Diagram = () => {\r\n-\t//1) setup the diagram engine\r\n-\tvar engine = createEngine();\r\n+    // create a state variable for the engine\r\n+    const [engine, setEngine] = useState(createEngine());\r\n \r\n-\t//2) setup the diagram model\r\n-\tvar model = new DiagramModel();\r\n+    // create a state variable for the model\r\n+    const [model, setModel] = useState(new DiagramModel());\r\n+    const [modelset, setmodelset] = useState(false);\r\n+    // use useEffect hook to initialize the engine and model\r\n+    useEffect(() => {\r\n+        // register the custom node factory\r\n+        engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n \r\n-\t//3-A) create a default node\r\n-\tvar node1 = new DefaultNodeModel({\r\n-\t\tname: 'Node 1',\r\n-\t\tcolor: 'rgb(0,192,255)'\r\n-\t});\r\n-\tnode1.setPosition(100, 100);\r\n-\tlet port1 = node1.addOutPort('Out');\r\n+        // create some custom nodes\r\n+        const node1 = new TSCustomNodeModel({\r\n+            name: 'Node 1',\r\n+            color: 'rgb(0,192,255)',\r\n+            value: 10\r\n+        });\r\n \r\n-\t//3-B) create another default node\r\n-\tvar node2 = new DefaultNodeModel('Node 2', 'rgb(192,255,0)');\r\n-\tlet port2 = node2.addInPort('In');\r\n-\tnode2.setPosition(400, 100);\r\n+        const node2 = new TSCustomNodeModel({\r\n+            name: 'Node 2',\r\n+            color: 'rgb(255,255,0)',\r\n+            value: 20\r\n+        });\r\n \r\n-\t// link the ports\r\n-\tlet link1 = port1.link<DefaultLinkModel>(port2);\r\n-\tlink1.getOptions().testName = 'Test';\r\n-\tlink1.addLabel('Hello World!');\r\n+        const node3 = new TSCustomNodeModel({\r\n+            name: 'Node 3',\r\n+            color: 'rgb(192,255,0)',\r\n+            value: 30\r\n+        });\r\n \r\n-\t//4) add the models to the root graph\r\n-\tmodel.addAll(node1, node2, link1);\r\n+        // position the nodes on the canvas\r\n+        node1.setPosition(50, 50);\r\n+        node2.setPosition(200, 50);\r\n+        node3.setPosition(350, 50);\r\n \r\n-\t//5) load model into engine\r\n-\tengine.setModel(model);\r\n+        // create links between the nodes\r\n+        const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n+        const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n \r\n-\t//6) render the diagram!\r\n-\treturn (\r\n-\t\t<DemoCanvasWidget>\r\n-\t\t\t<CanvasWidget engine={engine} />\r\n-\t\t</DemoCanvasWidget>\r\n-\t);\r\n+        // add the nodes and links to the model\r\n+        model.addAll(node1, node2, node3, link1, link2);\r\n+\r\n+        // set the model to the engine\r\n+        engine.setModel(model);\r\n+\r\n+        // update the state variables\r\n+        setEngine(engine);\r\n+        setModel(model);\r\n+        setmodelset(true)\r\n+    }, []);\r\n+\r\n+    // return the canvas widget to render the diagram\r\n+    return (\r\n+        <>\r\n+            {modelset && (\r\n+                <DemoCanvasWidget>\r\n+                    <CanvasWidget className=\"diagram-container\" engine={engine} />\r\n+                </DemoCanvasWidget>\r\n+\r\n+            )}\r\n+        </>\r\n+    );\r\n };\r\n \r\n export default Diagram;\r\n"
                },
                {
                    "date": 1706954424989,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,9 +63,9 @@\n     return (\r\n         <>\r\n             {modelset && (\r\n                 <DemoCanvasWidget>\r\n-                    <CanvasWidget className=\"diagram-container\" engine={engine} />\r\n+                    <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n \r\n             )}\r\n         </>\r\n"
                },
                {
                    "date": 1706954495469,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,12 +61,14 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <>\r\n-            {modelset && (\r\n+            {modelset && (<>\r\n+            <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n+                </>\r\n \r\n             )}\r\n         </>\r\n     );\r\n"
                },
                {
                    "date": 1706956167509,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     }, []);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n-        <>\r\n+        <div style={{ height: '500px' }}>\r\n             {modelset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n"
                },
                {
                    "date": 1706956175149,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -69,9 +69,9 @@\n                 </DemoCanvasWidget>\r\n                 </>\r\n \r\n             )}\r\n-        </>\r\n+        </div>\r\n     );\r\n };\r\n \r\n export default Diagram;\r\n"
                },
                {
                    "date": 1706956193454,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     }, []);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n-        <div style={{ height: '500px' }}>\r\n+        <div style={{ height: '500px';width:600px }}>\r\n             {modelset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n"
                },
                {
                    "date": 1706956201529,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     }, []);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n-        <div style={{ height: '500px';width:600px }}>\r\n+        <div style={{ height: '500px';width:'00px'}}>\r\n             {modelset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n"
                },
                {
                    "date": 1706956207456,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     }, []);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n-        <div style={{ height: '500px';width:'00px'}}>\r\n+        <div style={{ height: '800px';width:'800px'}}>\r\n             {modelset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n"
                },
                {
                    "date": 1706956222043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     }, []);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n-        <div style={{ height: '800px';width:'800px'}}>\r\n+        <div style={{ height: '800px'accentColor; width:'800px'}}>\r\n             {modelset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n"
                },
                {
                    "date": 1706956229243,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     }, []);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n-        <div style={{ height: '800px'accentColor; width:'800px'}}>\r\n+        <div style={{ height: '800px'; width:'800px'}}>\r\n             {modelset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n"
                },
                {
                    "date": 1706956236824,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -60,9 +60,9 @@\n     }, []);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n-        <div style={{ height: '800px'; width:'800px'}}>\r\n+        <div style={{ height: '800px', width:'800px'}}>\r\n             {modelset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n"
                },
                {
                    "date": 1706956266379,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,9 +44,9 @@\n         node3.setPosition(350, 50);\r\n \r\n         // create links between the nodes\r\n         const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n-        const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n+       // const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n \r\n         // add the nodes and links to the model\r\n         model.addAll(node1, node2, node3, link1, link2);\r\n \r\n"
                },
                {
                    "date": 1706956272323,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -44,12 +44,12 @@\n         node3.setPosition(350, 50);\r\n \r\n         // create links between the nodes\r\n         const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n-       // const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n+        const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n \r\n         // add the nodes and links to the model\r\n-        model.addAll(node1, node2, node3, link1, link2);\r\n+        model.addAll(node1, node2, node3, link1);\r\n \r\n         // set the model to the engine\r\n         engine.setModel(model);\r\n \r\n"
                },
                {
                    "date": 1706956290814,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -47,9 +47,9 @@\n         const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n         const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n \r\n         // add the nodes and links to the model\r\n-        model.addAll(node1, node2, node3, link1);\r\n+        model.addAll(node1, node2, node3, link1, link2);\r\n \r\n         // set the model to the engine\r\n         engine.setModel(model);\r\n \r\n"
                },
                {
                    "date": 1706956315527,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,11 +63,11 @@\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n             {modelset && (<>\r\n             <h2>hi</h2>\r\n-                <DemoCanvasWidget>\r\n+            \r\n                     <CanvasWidget engine={engine} />\r\n-                </DemoCanvasWidget>\r\n+\r\n                 </>\r\n \r\n             )}\r\n         </div>\r\n"
                },
                {
                    "date": 1706956324846,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -63,11 +63,11 @@\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n             {modelset && (<>\r\n             <h2>hi</h2>\r\n-            \r\n+                <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n-\r\n+                </DemoCanvasWidget>\r\n                 </>\r\n \r\n             )}\r\n         </div>\r\n"
                },
                {
                    "date": 1706956419556,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n-            {modelset && (<>\r\n+            { (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n"
                },
                {
                    "date": 1706956431020,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,77 @@\n+// import the necessary modules\r\n+import React, { useEffect, useState } from 'react';\r\n+import createEngine, { DiagramModel, DefaultNodeModel } from '@projectstorm/react-diagrams';\r\n+import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n+import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n+import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n+import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n+\r\n+// define a functional component for the diagram\r\n+const Diagram = () => {\r\n+    // create a state variable for the engine\r\n+    const [engine, setEngine] = useState(createEngine());\r\n+\r\n+    // create a state variable for the model\r\n+    const [model, setModel] = useState(new DiagramModel());\r\n+    const [modelset, setmodelset] = useState(false);\r\n+    // use useEffect hook to initialize the engine and model\r\n+    useEffect(() => {\r\n+        // register the custom node factory\r\n+        engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n+\r\n+        // create some custom nodes\r\n+        const node1 = new TSCustomNodeModel({\r\n+            name: 'Node 1',\r\n+            color: 'rgb(0,192,255)',\r\n+            value: 10\r\n+        });\r\n+\r\n+        const node2 = new TSCustomNodeModel({\r\n+            name: 'Node 2',\r\n+            color: 'rgb(255,255,0)',\r\n+            value: 20\r\n+        });\r\n+\r\n+        const node3 = new TSCustomNodeModel({\r\n+            name: 'Node 3',\r\n+            color: 'rgb(192,255,0)',\r\n+            value: 30\r\n+        });\r\n+\r\n+        // position the nodes on the canvas\r\n+        node1.setPosition(50, 50);\r\n+        node2.setPosition(200, 50);\r\n+        node3.setPosition(350, 50);\r\n+\r\n+        // create links between the nodes\r\n+        const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n+        const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n+\r\n+        // add the nodes and links to the model\r\n+        model.addAll(node1, node2, node3, link1, link2);\r\n+\r\n+        // set the model to the engine\r\n+        engine.setModel(model);\r\n+\r\n+        // update the state variables\r\n+        setEngine(engine);\r\n+        setModel(model);\r\n+        setmodelset(true)\r\n+    }, []);\r\n+\r\n+    // return the canvas widget to render the diagram\r\n+    return (\r\n+        <div style={{ height: '800px', width:'800px'}}>\r\n+            {2==3 && (<>\r\n+            <h2>hi</h2>\r\n+                <DemoCanvasWidget>\r\n+                    <CanvasWidget engine={engine} />\r\n+                </DemoCanvasWidget>\r\n+                </>\r\n+\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default Diagram;\r\n"
                },
                {
                    "date": 1706956449712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n-            {2==3 && (<>\r\n+            {2==2 && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n@@ -74,81 +74,4 @@\n     );\r\n };\r\n \r\n export default Diagram;\r\n-// import the necessary modules\r\n-import React, { useEffect, useState } from 'react';\r\n-import createEngine, { DiagramModel, DefaultNodeModel } from '@projectstorm/react-diagrams';\r\n-import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n-import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n-import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n-import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n-\r\n-// define a functional component for the diagram\r\n-const Diagram = () => {\r\n-    // create a state variable for the engine\r\n-    const [engine, setEngine] = useState(createEngine());\r\n-\r\n-    // create a state variable for the model\r\n-    const [model, setModel] = useState(new DiagramModel());\r\n-    const [modelset, setmodelset] = useState(false);\r\n-    // use useEffect hook to initialize the engine and model\r\n-    useEffect(() => {\r\n-        // register the custom node factory\r\n-        engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n-\r\n-        // create some custom nodes\r\n-        const node1 = new TSCustomNodeModel({\r\n-            name: 'Node 1',\r\n-            color: 'rgb(0,192,255)',\r\n-            value: 10\r\n-        });\r\n-\r\n-        const node2 = new TSCustomNodeModel({\r\n-            name: 'Node 2',\r\n-            color: 'rgb(255,255,0)',\r\n-            value: 20\r\n-        });\r\n-\r\n-        const node3 = new TSCustomNodeModel({\r\n-            name: 'Node 3',\r\n-            color: 'rgb(192,255,0)',\r\n-            value: 30\r\n-        });\r\n-\r\n-        // position the nodes on the canvas\r\n-        node1.setPosition(50, 50);\r\n-        node2.setPosition(200, 50);\r\n-        node3.setPosition(350, 50);\r\n-\r\n-        // create links between the nodes\r\n-        const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n-        const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n-\r\n-        // add the nodes and links to the model\r\n-        model.addAll(node1, node2, node3, link1, link2);\r\n-\r\n-        // set the model to the engine\r\n-        engine.setModel(model);\r\n-\r\n-        // update the state variables\r\n-        setEngine(engine);\r\n-        setModel(model);\r\n-        setmodelset(true)\r\n-    }, []);\r\n-\r\n-    // return the canvas widget to render the diagram\r\n-    return (\r\n-        <div style={{ height: '800px', width:'800px'}}>\r\n-            { (<>\r\n-            <h2>hi</h2>\r\n-                <DemoCanvasWidget>\r\n-                    <CanvasWidget engine={engine} />\r\n-                </DemoCanvasWidget>\r\n-                </>\r\n-\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-\r\n-export default Diagram;\r\n"
                },
                {
                    "date": 1706956458799,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n-            {2==2 && (<>\r\n+            {modelset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n"
                },
                {
                    "date": 1706956495354,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,9 +12,9 @@\n     const [engine, setEngine] = useState(createEngine());\r\n \r\n     // create a state variable for the model\r\n     const [model, setModel] = useState(new DiagramModel());\r\n-    const [modelset, setmodelset] = useState(false);\r\n+    const [modelHadset, setmodelHadset] = useState(false);\r\n     // use useEffect hook to initialize the engine and model\r\n     useEffect(() => {\r\n         // register the custom node factory\r\n         engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n@@ -55,15 +55,15 @@\n \r\n         // update the state variables\r\n         setEngine(engine);\r\n         setModel(model);\r\n-        setmodelset(true)\r\n+        setmodelHadset(true)\r\n     }, []);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n-            {modelset && (<>\r\n+            {modelHadset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n"
                },
                {
                    "date": 1706956718274,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         // update the state variables\r\n         setEngine(engine);\r\n         setModel(model);\r\n         setmodelHadset(true)\r\n-    }, []);\r\n+    }, [modelHadset]);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n"
                },
                {
                    "date": 1706957044710,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n-            {modelHadset && (<>\r\n+            {!!modelHadset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n"
                },
                {
                    "date": 1706957194185,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,25 +1,32 @@\n // import the necessary modules\r\n-import React, { useEffect, useState } from 'react';\r\n+import React, { useEffect, useState, useMemo } from 'react';\r\n import createEngine, { DiagramModel, DefaultNodeModel } from '@projectstorm/react-diagrams';\r\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n \r\n // define a functional component for the diagram\r\n const Diagram = () => {\r\n-    // create a state variable for the engine\r\n-    const [engine, setEngine] = useState(createEngine());\r\n-\r\n     // create a state variable for the model\r\n     const [model, setModel] = useState(new DiagramModel());\r\n     const [modelHadset, setmodelHadset] = useState(false);\r\n-    // use useEffect hook to initialize the engine and model\r\n-    useEffect(() => {\r\n+\r\n+    // use the useMemo hook to create a memoized instance of the engine\r\n+    const engine = useMemo(() => {\r\n+        // create a new engine\r\n+        const engine = createEngine();\r\n+\r\n         // register the custom node factory\r\n         engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n \r\n+        // return the engine\r\n+        return engine;\r\n+    }, []); // pass an empty dependency array to run the effect only once\r\n+\r\n+    // use useEffect hook to initialize the model\r\n+    useEffect(() => {\r\n         // create some custom nodes\r\n         const node1 = new TSCustomNodeModel({\r\n             name: 'Node 1',\r\n             color: 'rgb(0,192,255)',\r\n@@ -53,17 +60,16 @@\n         // set the model to the engine\r\n         engine.setModel(model);\r\n \r\n         // update the state variables\r\n-        setEngine(engine);\r\n         setModel(model);\r\n-        setmodelHadset(true)\r\n-    }, [modelHadset]);\r\n+        setmodelHadset(true);\r\n+    }, [engine, model]);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n-            {!!modelHadset && (<>\r\n+            {modelHadset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n"
                },
                {
                    "date": 1706957219733,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n         // create some custom nodes\r\n         const node1 = new TSCustomNodeModel({\r\n             name: 'Node 1',\r\n             color: 'rgb(0,192,255)',\r\n-            value: 10\r\n+            value: 1088888888888888888888\r\n         });\r\n \r\n         const node2 = new TSCustomNodeModel({\r\n             name: 'Node 2',\r\n"
                },
                {
                    "date": 1706957233085,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -29,9 +29,9 @@\n         // create some custom nodes\r\n         const node1 = new TSCustomNodeModel({\r\n             name: 'Node 1',\r\n             color: 'rgb(0,192,255)',\r\n-            value: 1088888888888888888888\r\n+            value: 10\r\n         });\r\n \r\n         const node2 = new TSCustomNodeModel({\r\n             name: 'Node 2',\r\n"
                },
                {
                    "date": 1706957302915,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,16 +67,16 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n-            {modelHadset && (<>\r\n+          \r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n                 </>\r\n \r\n-            )}\r\n+          \r\n         </div>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1706957325163,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,16 +67,16 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n-          \r\n+            {modelHadset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n                 </>\r\n \r\n-          \r\n+            )}\r\n         </div>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1706957348474,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,25 @@\n // import the necessary modules\r\n-import React, { useEffect, useState, useMemo } from 'react';\r\n+import React, { useEffect, useState } from 'react';\r\n import createEngine, { DiagramModel, DefaultNodeModel } from '@projectstorm/react-diagrams';\r\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n \r\n // define a functional component for the diagram\r\n const Diagram = () => {\r\n+    // create a state variable for the engine\r\n+    const [engine, setEngine] = useState(createEngine());\r\n+\r\n     // create a state variable for the model\r\n     const [model, setModel] = useState(new DiagramModel());\r\n     const [modelHadset, setmodelHadset] = useState(false);\r\n-\r\n-    // use the useMemo hook to create a memoized instance of the engine\r\n-    const engine = useMemo(() => {\r\n-        // create a new engine\r\n-        const engine = createEngine();\r\n-\r\n+    // use useEffect hook to initialize the engine and model\r\n+    useEffect(() => {\r\n         // register the custom node factory\r\n         engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n \r\n-        // return the engine\r\n-        return engine;\r\n-    }, []); // pass an empty dependency array to run the effect only once\r\n-\r\n-    // use useEffect hook to initialize the model\r\n-    useEffect(() => {\r\n         // create some custom nodes\r\n         const node1 = new TSCustomNodeModel({\r\n             name: 'Node 1',\r\n             color: 'rgb(0,192,255)',\r\n@@ -60,16 +53,17 @@\n         // set the model to the engine\r\n         engine.setModel(model);\r\n \r\n         // update the state variables\r\n+        setEngine(engine);\r\n         setModel(model);\r\n-        setmodelHadset(true);\r\n-    }, [engine, model]);\r\n+        setmodelHadset(false)\r\n+    }, [modelHadset]);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n-            {modelHadset && (<>\r\n+            {!!modelHadset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n"
                },
                {
                    "date": 1706957358358,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,15 +55,15 @@\n \r\n         // update the state variables\r\n         setEngine(engine);\r\n         setModel(model);\r\n-        setmodelHadset(false)\r\n+        setmodelHadset(true)\r\n     }, [modelHadset]);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n-            {!!modelHadset && (<>\r\n+            {modelHadset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n"
                },
                {
                    "date": 1706957584919,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n         // update the state variables\r\n         setEngine(engine);\r\n         setModel(model);\r\n         setmodelHadset(true)\r\n-    }, [modelHadset]);\r\n+    }, []);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n"
                },
                {
                    "date": 1706957629331,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,8 +15,9 @@\n     const [model, setModel] = useState(new DiagramModel());\r\n     const [modelHadset, setmodelHadset] = useState(false);\r\n     // use useEffect hook to initialize the engine and model\r\n     useEffect(() => {\r\n+        if(!modelHadset){\r\n         // register the custom node factory\r\n         engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n \r\n         // create some custom nodes\r\n@@ -56,8 +57,9 @@\n         // update the state variables\r\n         setEngine(engine);\r\n         setModel(model);\r\n         setmodelHadset(true)\r\n+    }\r\n     }, []);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n"
                },
                {
                    "date": 1706957647696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,8 +57,9 @@\n         // update the state variables\r\n         setEngine(engine);\r\n         setModel(model);\r\n         setmodelHadset(true)\r\n+        console.log(\"ali\")\r\n     }\r\n     }, []);\r\n \r\n     // return the canvas widget to render the diagram\r\n"
                },
                {
                    "date": 1706957843682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,9 +59,9 @@\n         setModel(model);\r\n         setmodelHadset(true)\r\n         console.log(\"ali\")\r\n     }\r\n-    }, []);\r\n+    }, [modelHadset]);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n"
                },
                {
                    "date": 1706957892190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -59,8 +59,9 @@\n         setModel(model);\r\n         setmodelHadset(true)\r\n         console.log(\"ali\")\r\n     }\r\n+    return () => { modelHadset = true }\r\n     }, [modelHadset]);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n"
                },
                {
                    "date": 1706957930600,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -15,9 +15,11 @@\n     const [model, setModel] = useState(new DiagramModel());\r\n     const [modelHadset, setmodelHadset] = useState(false);\r\n     // use useEffect hook to initialize the engine and model\r\n     useEffect(() => {\r\n-        if(!modelHadset){\r\n+        \r\n+        let ignore = false;\r\n+        if(!ignore){\r\n         // register the custom node factory\r\n         engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n \r\n         // create some custom nodes\r\n@@ -59,9 +61,9 @@\n         setModel(model);\r\n         setmodelHadset(true)\r\n         console.log(\"ali\")\r\n     }\r\n-    return () => { modelHadset = true }\r\n+    return () => { ignore = true }\r\n     }, [modelHadset]);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n"
                },
                {
                    "date": 1706957981339,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,9 +11,9 @@\n     // create a state variable for the engine\r\n     const [engine, setEngine] = useState(createEngine());\r\n \r\n     // create a state variable for the model\r\n-    const [model, setModel] = useState(new DiagramModel());\r\n+   // const [model, setModel] = useState(new DiagramModel());\r\n     const [modelHadset, setmodelHadset] = useState(false);\r\n     // use useEffect hook to initialize the engine and model\r\n     useEffect(() => {\r\n         \r\n@@ -57,9 +57,9 @@\n         engine.setModel(model);\r\n \r\n         // update the state variables\r\n         setEngine(engine);\r\n-        setModel(model);\r\n+       // setModel(model);\r\n         setmodelHadset(true)\r\n         console.log(\"ali\")\r\n     }\r\n     return () => { ignore = true }\r\n"
                },
                {
                    "date": 1706958007112,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -12,8 +12,9 @@\n     const [engine, setEngine] = useState(createEngine());\r\n \r\n     // create a state variable for the model\r\n    // const [model, setModel] = useState(new DiagramModel());\r\n+   const model=new DiagramModel()\r\n     const [modelHadset, setmodelHadset] = useState(false);\r\n     // use useEffect hook to initialize the engine and model\r\n     useEffect(() => {\r\n         \r\n"
                },
                {
                    "date": 1706958042405,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -17,10 +17,10 @@\n     const [modelHadset, setmodelHadset] = useState(false);\r\n     // use useEffect hook to initialize the engine and model\r\n     useEffect(() => {\r\n         \r\n-        let ignore = false;\r\n-        if(!ignore){\r\n+        // let ignore = false;\r\n+        // if(!ignore){\r\n         // register the custom node factory\r\n         engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n \r\n         // create some custom nodes\r\n@@ -61,10 +61,10 @@\n         setEngine(engine);\r\n        // setModel(model);\r\n         setmodelHadset(true)\r\n         console.log(\"ali\")\r\n-    }\r\n-    return () => { ignore = true }\r\n+   // }\r\n+    // return () => { ignore = true }\r\n     }, [modelHadset]);\r\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n"
                },
                {
                    "date": 1706958073930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,16 +68,16 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n-            {modelHadset && (<>\r\n+        \r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n                 </>\r\n \r\n-            )}\r\n+         \r\n         </div>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1706958086531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -68,16 +68,16 @@\n \r\n     // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n-        \r\n+            {modelHadset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n                 </>\r\n \r\n-         \r\n+            )}\r\n         </div>\r\n     );\r\n };\r\n \r\n"
                },
                {
                    "date": 1706958351992,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -26,9 +26,9 @@\n         // create some custom nodes\r\n         const node1 = new TSCustomNodeModel({\r\n             name: 'Node 1',\r\n             color: 'rgb(0,192,255)',\r\n-            value: 10\r\n+            value: \"kljlasjdl alskdjlakdj laskjdl djlj\"\r\n         });\r\n \r\n         const node2 = new TSCustomNodeModel({\r\n             name: 'Node 2',\r\n"
                },
                {
                    "date": 1706958928178,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,19 +1,15 @@\n-// import the necessary modules\r\n import React, { useEffect, useState } from 'react';\r\n import createEngine, { DiagramModel, DefaultNodeModel } from '@projectstorm/react-diagrams';\r\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n \r\n-// define a functional component for the diagram\r\n const Diagram = () => {\r\n-    // create a state variable for the engine\r\n+\r\n     const [engine, setEngine] = useState(createEngine());\r\n \r\n-    // create a state variable for the model\r\n-   // const [model, setModel] = useState(new DiagramModel());\r\n    const model=new DiagramModel()\r\n     const [modelHadset, setmodelHadset] = useState(false);\r\n     // use useEffect hook to initialize the engine and model\r\n     useEffect(() => {\r\n@@ -50,24 +46,17 @@\n         // create links between the nodes\r\n         const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n         const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n \r\n-        // add the nodes and links to the model\r\n         model.addAll(node1, node2, node3, link1, link2);\r\n-\r\n-        // set the model to the engine\r\n         engine.setModel(model);\r\n \r\n         // update the state variables\r\n         setEngine(engine);\r\n-       // setModel(model);\r\n         setmodelHadset(true)\r\n         console.log(\"ali\")\r\n-   // }\r\n-    // return () => { ignore = true }\r\n     }, [modelHadset]);\r\n \r\n-    // return the canvas widget to render the diagram\r\n     return (\r\n         <div style={{ height: '800px', width:'800px'}}>\r\n             {modelHadset && (<>\r\n             <h2>hi</h2>\r\n@@ -79,6 +68,5 @@\n             )}\r\n         </div>\r\n     );\r\n };\r\n-\r\n export default Diagram;\r\n"
                },
                {
                    "date": 1706959600080,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -13,11 +13,8 @@\n     const [modelHadset, setmodelHadset] = useState(false);\r\n     // use useEffect hook to initialize the engine and model\r\n     useEffect(() => {\r\n         \r\n-        // let ignore = false;\r\n-        // if(!ignore){\r\n-        // register the custom node factory\r\n         engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n \r\n         // create some custom nodes\r\n         const node1 = new TSCustomNodeModel({\r\n"
                },
                {
                    "date": 1706959608496,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,21 +34,18 @@\n             color: 'rgb(192,255,0)',\r\n             value: 30\r\n         });\r\n \r\n-        // position the nodes on the canvas\r\n         node1.setPosition(50, 50);\r\n         node2.setPosition(200, 50);\r\n         node3.setPosition(350, 50);\r\n \r\n-        // create links between the nodes\r\n         const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n         const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n \r\n         model.addAll(node1, node2, node3, link1, link2);\r\n         engine.setModel(model);\r\n \r\n-        // update the state variables\r\n         setEngine(engine);\r\n         setmodelHadset(true)\r\n         console.log(\"ali\")\r\n     }, [modelHadset]);\r\n"
                },
                {
                    "date": 1706959666788,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -19,9 +19,9 @@\n         // create some custom nodes\r\n         const node1 = new TSCustomNodeModel({\r\n             name: 'Node 1',\r\n             color: 'rgb(0,192,255)',\r\n-            value: \"kljlasjdl alskdjlakdj laskjdl djlj\"\r\n+            value: \"Ali\"\r\n         });\r\n \r\n         const node2 = new TSCustomNodeModel({\r\n             name: 'Node 2',\r\n"
                },
                {
                    "date": 1706960510127,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n+import Circle from './Circle';\r\n \r\n const Diagram = () => {\r\n \r\n     const [engine, setEngine] = useState(createEngine());\r\n@@ -56,8 +57,9 @@\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n+                <Circle /> {/* Add the Circle component here */}\r\n                 </>\r\n \r\n             )}\r\n         </div>\r\n"
                },
                {
                    "date": 1706960681177,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n         // create some custom nodes\r\n         const node1 = new TSCustomNodeModel({\r\n             name: 'Node 1',\r\n             color: 'rgb(0,192,255)',\r\n-            value: \"Ali\"\r\n+            value: 1\r\n         });\r\n \r\n         const node2 = new TSCustomNodeModel({\r\n             name: 'Node 2',\r\n"
                },
                {
                    "date": 1706960689604,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -57,9 +57,9 @@\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                 </DemoCanvasWidget>\r\n-                <Circle /> {/* Add the Circle component here */}\r\n+                {/* <Circle /> */}\r\n                 </>\r\n \r\n             )}\r\n         </div>\r\n"
                },
                {
                    "date": 1706960819089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,10 +56,11 @@\n             {modelHadset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n+                      <Circle />\r\n                 </DemoCanvasWidget>\r\n-                {/* <Circle /> */}\r\n+              \r\n                 </>\r\n \r\n             )}\r\n         </div>\r\n"
                },
                {
                    "date": 1706962118930,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,22 @@\n         // create some custom nodes\r\n         const node1 = new TSCustomNodeModel({\r\n             name: 'Node 1',\r\n             color: 'rgb(0,192,255)',\r\n-            value: 1\r\n+            value: 1,\r\n+            style: {\r\n+                gradient: {\r\n+                    cx: 50, // Center point of outer circle\r\n+                    cy: 50,\r\n+                    fx: 25, // Center point of inner circle\r\n+                    fy: 25,\r\n+                    r: 50, // Radius of the radial gradient\r\n+                    stops: [\r\n+                        { color: 'white', offset: 0 },\r\n+                        { color: '#6BA5D7', offset: 100 }\r\n+                    ],\r\n+                    type: 'Radial'\r\n+                }\r\n         });\r\n \r\n         const node2 = new TSCustomNodeModel({\r\n             name: 'Node 2',\r\n"
                },
                {
                    "date": 1706962131699,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -34,8 +34,9 @@\n                         { color: '#6BA5D7', offset: 100 }\r\n                     ],\r\n                     type: 'Radial'\r\n                 }\r\n+            }\r\n         });\r\n \r\n         const node2 = new TSCustomNodeModel({\r\n             name: 'Node 2',\r\n"
                },
                {
                    "date": 1706962142209,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -70,9 +70,8 @@\n             {modelHadset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n-                      <Circle />\r\n                 </DemoCanvasWidget>\r\n               \r\n                 </>\r\n \r\n"
                },
                {
                    "date": 1706962152682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,22 +21,10 @@\n         const node1 = new TSCustomNodeModel({\r\n             name: 'Node 1',\r\n             color: 'rgb(0,192,255)',\r\n             value: 1,\r\n-            style: {\r\n-                gradient: {\r\n-                    cx: 50, // Center point of outer circle\r\n-                    cy: 50,\r\n-                    fx: 25, // Center point of inner circle\r\n-                    fy: 25,\r\n-                    r: 50, // Radius of the radial gradient\r\n-                    stops: [\r\n-                        { color: 'white', offset: 0 },\r\n-                        { color: '#6BA5D7', offset: 100 }\r\n-                    ],\r\n-                    type: 'Radial'\r\n-                }\r\n-            }\r\n+            style:\r\n+            \r\n         });\r\n \r\n         const node2 = new TSCustomNodeModel({\r\n             name: 'Node 2',\r\n@@ -70,8 +58,9 @@\n             {modelHadset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n+                      <Circle />\r\n                 </DemoCanvasWidget>\r\n               \r\n                 </>\r\n \r\n"
                },
                {
                    "date": 1706962310466,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,11 +20,9 @@\n         // create some custom nodes\r\n         const node1 = new TSCustomNodeModel({\r\n             name: 'Node 1',\r\n             color: 'rgb(0,192,255)',\r\n-            value: 1,\r\n-            style:\r\n-            \r\n+            value: 1\r\n         });\r\n \r\n         const node2 = new TSCustomNodeModel({\r\n             name: 'Node 2',\r\n"
                },
                {
                    "date": 1706962318390,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n             {modelHadset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n-                      <Circle />\r\n+                \r\n                 </DemoCanvasWidget>\r\n               \r\n                 </>\r\n \r\n"
                },
                {
                    "date": 1706962931649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,9 +4,9 @@\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n import Circle from './Circle';\r\n-\r\n+import './style.css'; \r\n const Diagram = () => {\r\n \r\n     const [engine, setEngine] = useState(createEngine());\r\n \r\n"
                },
                {
                    "date": 1706963832135,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,21 +20,24 @@\n         // create some custom nodes\r\n         const node1 = new TSCustomNodeModel({\r\n             name: 'Node 1',\r\n             color: 'rgb(0,192,255)',\r\n-            value: 1\r\n+            value: 1,\r\n+            cssClass: 'circle-node' // added prop\r\n         });\r\n \r\n         const node2 = new TSCustomNodeModel({\r\n             name: 'Node 2',\r\n             color: 'rgb(255,255,0)',\r\n-            value: 20\r\n+            value: 20,\r\n+            cssClass: 'triangle-node' // added prop\r\n         });\r\n \r\n         const node3 = new TSCustomNodeModel({\r\n             name: 'Node 3',\r\n             color: 'rgb(192,255,0)',\r\n-            value: 30\r\n+            value: 30,\r\n+            cssClass: 'pentagon-node' // added prop\r\n         });\r\n \r\n         node1.setPosition(50, 50);\r\n         node2.setPosition(200, 50);\r\n"
                },
                {
                    "date": 1706963845199,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,23 +21,23 @@\n         const node1 = new TSCustomNodeModel({\r\n             name: 'Node 1',\r\n             color: 'rgb(0,192,255)',\r\n             value: 1,\r\n-            cssClass: 'circle-node' // added prop\r\n+            cssClass: 'circle-node'\r\n         });\r\n \r\n         const node2 = new TSCustomNodeModel({\r\n             name: 'Node 2',\r\n             color: 'rgb(255,255,0)',\r\n             value: 20,\r\n-            cssClass: 'triangle-node' // added prop\r\n+            cssClass: 'triangle-node' \r\n         });\r\n \r\n         const node3 = new TSCustomNodeModel({\r\n             name: 'Node 3',\r\n             color: 'rgb(192,255,0)',\r\n             value: 30,\r\n-            cssClass: 'pentagon-node' // added prop\r\n+            cssClass: 'pentagon-node' \r\n         });\r\n \r\n         node1.setPosition(50, 50);\r\n         node2.setPosition(200, 50);\r\n"
                },
                {
                    "date": 1707023889394,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,9 @@\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n import Circle from './Circle';\r\n import './style.css'; \r\n-const Diagram = () => {\r\n+const DiagramA = () => {\r\n \r\n     const [engine, setEngine] = useState(createEngine());\r\n \r\n    const model=new DiagramModel()\r\n@@ -68,5 +68,5 @@\n             )}\r\n         </div>\r\n     );\r\n };\r\n-export default Diagram;\r\n+export default DiagramA;\r\n"
                },
                {
                    "date": 1707023999195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,8 +3,9 @@\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n+import DiagramA from './components/flow/e';\r\n import Circle from './Circle';\r\n import './style.css'; \r\n const DiagramA = () => {\r\n \r\n@@ -59,9 +60,9 @@\n             {modelHadset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n-                \r\n+                    <DiagramA/>    \r\n                 </DemoCanvasWidget>\r\n               \r\n                 </>\r\n \r\n"
                },
                {
                    "date": 1707024019727,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n-import DiagramA from './components/flow/e';\r\n+import DiagramA from './e';\r\n import Circle from './Circle';\r\n import './style.css'; \r\n const DiagramA = () => {\r\n \r\n"
                },
                {
                    "date": 1707024136844,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,9 +3,9 @@\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n-import DiagramA from './e';\r\n+\r\n import Circle from './Circle';\r\n import './style.css'; \r\n const DiagramA = () => {\r\n \r\n@@ -60,9 +60,9 @@\n             {modelHadset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n-                    <DiagramA/>    \r\n+      \r\n                 </DemoCanvasWidget>\r\n               \r\n                 </>\r\n \r\n"
                },
                {
                    "date": 1707024321515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,9 @@\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n \r\n import Circle from './Circle';\r\n import './style.css'; \r\n-const DiagramA = () => {\r\n+const DiagramAA = () => {\r\n \r\n     const [engine, setEngine] = useState(createEngine());\r\n \r\n    const model=new DiagramModel()\r\n@@ -69,5 +69,5 @@\n             )}\r\n         </div>\r\n     );\r\n };\r\n-export default DiagramA;\r\n+export default DiagramAA;\r\n"
                },
                {
                    "date": 1707024463368,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -3,12 +3,11 @@\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n-\r\n import Circle from './Circle';\r\n import './style.css'; \r\n-const DiagramAA = () => {\r\n+const DiagramA = () => {\r\n \r\n     const [engine, setEngine] = useState(createEngine());\r\n \r\n    const model=new DiagramModel()\r\n@@ -60,14 +59,13 @@\n             {modelHadset && (<>\r\n             <h2>hi</h2>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n-      \r\n                 </DemoCanvasWidget>\r\n               \r\n                 </>\r\n \r\n             )}\r\n         </div>\r\n     );\r\n };\r\n-export default DiagramAA;\r\n+export default DiagramA;\r\n"
                }
            ],
            "date": 1706946532658,
            "name": "Commit-0",
            "content": "// MyDiagram.js\r\nimport React from 'react';\r\nimport { DiagramEngine, DiagramModel } from '@projectstorm/react-diagrams';\r\n\r\nconst MyDiagram = () => {\r\n  const engine = new DiagramEngine();\r\n  const model = new DiagramModel();\r\n\r\n  // Add nodes and links here\r\n\r\n  return (\r\n    <div style={{ width: '100%', height: '500px' }}>\r\n      <DiagramWidget engine={engine} model={model} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default MyDiagram;\r\n"
        }
    ]
}