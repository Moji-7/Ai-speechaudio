{
    "sourceFile": "src/components/flow/10.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 39,
            "patches": [
                {
                    "date": 1707027133859,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1707027144935,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,10 +4,10 @@\n import createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\r\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n-import { TableFactory } from './TableFactory';\r\n-import { TableModel } from './TableModel';\r\n+import { TableFactory } from './7';\r\n+import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n import { LayerModel, LayerWidget } from '@projectstorm/react-canvas-core'; // added import\r\n \r\n const Diagram = () => {\r\n"
                },
                {
                    "date": 1707027158541,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n import { LayerModel, LayerWidget } from '@projectstorm/react-canvas-core'; // added import\r\n \r\n-const Diagram = () => {\r\n+const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n \r\n   const model = new DiagramModel();\r\n   const [modelHadset, setmodelHadset] = useState(false);\r\n@@ -143,5 +143,5 @@\n       )}\r\n     </div>\r\n   );\r\n };\r\n-export default Diagram;\r\n+export default DiagramM;\r\n"
                },
                {
                    "date": 1707027398665,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,8 @@\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { TableFactory } from './7';\r\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n-import { LayerModel, LayerWidget } from '@projectstorm/react-canvas-core'; // added import\r\n \r\n const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n \r\n"
                },
                {
                    "date": 1707027445235,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n // part 10\r\n // import the necessary modules\r\n import React, { useEffect, useState } from 'react';\r\n-import createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\r\n+import createEngine, { DiagramModel,LayerModel } from '@projectstorm/react-diagrams';\r\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { TableFactory } from './7';\r\n"
                },
                {
                    "date": 1707027458975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n // part 10\r\n // import the necessary modules\r\n import React, { useEffect, useState } from 'react';\r\n-import createEngine, { DiagramModel,LayerModel } from '@projectstorm/react-diagrams';\r\n+import createEngine, { DiagramModel,LayerModel,LayerWidget } from '@projectstorm/react-diagrams';\r\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { TableFactory } from './7';\r\n"
                },
                {
                    "date": 1707027511783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,14 +1,15 @@\n // part 10\r\n // import the necessary modules\r\n import React, { useEffect, useState } from 'react';\r\n-import createEngine, { DiagramModel,LayerModel,LayerWidget } from '@projectstorm/react-diagrams';\r\n+import createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\r\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { TableFactory } from './7';\r\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n+import { LayerModel, LayerWidget } from '@projectstorm/react-canvas-core';\r\n \r\n const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n \r\n@@ -110,9 +111,9 @@\n       nodeId: node3.getID() // added prop\r\n     });\r\n \r\n     // create a layer for the nodes and a layer for the tables\r\n-    const nodeLayer = new LayerModel();\r\n+    const nodeLayer = new LayerMode();\r\n     const tableLayer = new LayerModel();\r\n \r\n     // add the nodes and the links to the node layer\r\n     nodeLayer.addAll(node1, node2, node3, link1, link2);\r\n"
                },
                {
                    "date": 1707028508089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { TableFactory } from './7';\r\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n-import { LayerModel, LayerWidget } from '@projectstorm/react-canvas-core';\r\n+import { SmartLayerWidget } from '@projectstorm/react-canvas-core';\r\n \r\n const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n \r\n"
                },
                {
                    "date": 1707028625833,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -110,20 +110,10 @@\n       size: { width: 200, height: 200 },\r\n       nodeId: node3.getID() // added prop\r\n     });\r\n \r\n-    // create a layer for the nodes and a layer for the tables\r\n-    const nodeLayer = new LayerMode();\r\n-    const tableLayer = new LayerModel();\r\n-\r\n-    // add the nodes and the links to the node layer\r\n-    nodeLayer.addAll(node1, node2, node3, link1, link2);\r\n-\r\n-    // add the tables to the table layer\r\n-    tableLayer.addAll(table1, table2, table3, table4);\r\n-\r\n-    // add both the layers to the model\r\n-    model.addAll(nodeLayer, tableLayer);\r\n+    // add the nodes, the links, and the tables directly to the model\r\n+    model.addAll(node1, node2, node3, link1, link2, table1, table2, table3, table4);\r\n     engine.setModel(model);\r\n \r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n@@ -134,11 +124,10 @@\n       {modelHadset && (\r\n         <>\r\n           <DemoCanvasWidget>\r\n             <CanvasWidget engine={engine} />\r\n-            {/* added the layer widgets */}\r\n-            <LayerWidget layer={nodeLayer} />\r\n-            <LayerWidget layer={tableLayer} />\r\n+            {/* use the SmartLayerWidget component to render the nodes and the tables */}\r\n+            <SmartLayerWidget engine={engine} />\r\n           </DemoCanvasWidget>\r\n         </>\r\n       )}\r\n     </div>\r\n"
                },
                {
                    "date": 1707028674320,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n         <>\r\n           <DemoCanvasWidget>\r\n             <CanvasWidget engine={engine} />\r\n             {/* use the SmartLayerWidget component to render the nodes and the tables */}\r\n-            <SmartLayerWidget engine={engine} />\r\n+            {/* <SmartLayerWidget engine={engine} /> */}\r\n           </DemoCanvasWidget>\r\n         </>\r\n       )}\r\n     </div>\r\n"
                },
                {
                    "date": 1707028950563,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,9 +7,9 @@\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { TableFactory } from './7';\r\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n-import { SmartLayerWidget } from '@projectstorm/react-canvas-core';\r\n+import { LayerModel, SmartLayerWidget } from '@projectstorm/react-canvas-core';\r\n \r\n const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n \r\n@@ -110,10 +110,20 @@\n       size: { width: 200, height: 200 },\r\n       nodeId: node3.getID() // added prop\r\n     });\r\n \r\n-    // add the nodes, the links, and the tables directly to the model\r\n-    model.addAll(node1, node2, node3, link1, link2, table1, table2, table3, table4);\r\n+    // create a layer for the nodes and a layer for the tables\r\n+    const nodeLayer = new LayerMode();\r\n+    const tableLayer = new LayerModel();\r\n+\r\n+    // add the nodes and the links to the node layer\r\n+    nodeLayer.addAll(node1, node2, node3, link1, link2);\r\n+\r\n+    // add the tables to the table layer\r\n+    tableLayer.addAll(table1, table2, table3, table4);\r\n+\r\n+    // add both the layers to the model\r\n+    model.addAll(nodeLayer, tableLayer);\r\n     engine.setModel(model);\r\n \r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n@@ -124,10 +134,11 @@\n       {modelHadset && (\r\n         <>\r\n           <DemoCanvasWidget>\r\n             <CanvasWidget engine={engine} />\r\n-            {/* use the SmartLayerWidget component to render the nodes and the tables */}\r\n-            {/* <SmartLayerWidget engine={engine} /> */}\r\n+            {/* added the layer widgets */}\r\n+            <LayerWidget layer={nodeLayer} />\r\n+            <LayerWidget layer={tableLayer} />\r\n           </DemoCanvasWidget>\r\n         </>\r\n       )}\r\n     </div>\r\n"
                },
                {
                    "date": 1707028970552,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,9 +111,9 @@\n       nodeId: node3.getID() // added prop\r\n     });\r\n \r\n     // create a layer for the nodes and a layer for the tables\r\n-    const nodeLayer = new LayerMode();\r\n+    const nodeLayer = new LayerModel();\r\n     const tableLayer = new LayerModel();\r\n \r\n     // add the nodes and the links to the node layer\r\n     nodeLayer.addAll(node1, node2, node3, link1, link2);\r\n"
                },
                {
                    "date": 1707028990999,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,10 +135,10 @@\n         <>\r\n           <DemoCanvasWidget>\r\n             <CanvasWidget engine={engine} />\r\n             {/* added the layer widgets */}\r\n-            <LayerWidget layer={nodeLayer} />\r\n-            <LayerWidget layer={tableLayer} />\r\n+            <SmartLayerWidget layer={nodeLayer} />\r\n+            <SmartLayerWidget layer={tableLayer} />\r\n           </DemoCanvasWidget>\r\n         </>\r\n       )}\r\n     </div>\r\n"
                },
                {
                    "date": 1707029152168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,10 @@\n import { LayerModel, SmartLayerWidget } from '@projectstorm/react-canvas-core';\r\n \r\n const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n+  const [nodeLayer, setNodeLayer] =useState();\r\n+  const [tableLayer, setTableLayer] =useState();\r\n \r\n   const model = new DiagramModel();\r\n   const [modelHadset, setmodelHadset] = useState(false);\r\n   // use useEffect hook to initialize the engine and model\r\n@@ -116,12 +118,12 @@\n     const tableLayer = new LayerModel();\r\n \r\n     // add the nodes and the links to the node layer\r\n     nodeLayer.addAll(node1, node2, node3, link1, link2);\r\n-\r\n+setNodeLayer(nodeLayer);\r\n     // add the tables to the table layer\r\n     tableLayer.addAll(table1, table2, table3, table4);\r\n-\r\n+setTableLayer(tableLayer);\r\n     // add both the layers to the model\r\n     model.addAll(nodeLayer, tableLayer);\r\n     engine.setModel(model);\r\n \r\n"
                },
                {
                    "date": 1707029274018,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,10 +11,10 @@\n import { LayerModel, SmartLayerWidget } from '@projectstorm/react-canvas-core';\r\n \r\n const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n-  const [nodeLayer, setNodeLayer] =useState();\r\n-  const [tableLayer, setTableLayer] =useState();\r\n+  const [nodeLayer, setNodeLayer] =useState( LayerModel());\r\n+  const [tableLayer, setTableLayer] =useState(LayerModel());\r\n \r\n   const model = new DiagramModel();\r\n   const [modelHadset, setmodelHadset] = useState(false);\r\n   // use useEffect hook to initialize the engine and model\r\n"
                },
                {
                    "date": 1707029306236,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,10 +113,10 @@\n       nodeId: node3.getID() // added prop\r\n     });\r\n \r\n     // create a layer for the nodes and a layer for the tables\r\n-    const nodeLayer = new LayerModel();\r\n-    const tableLayer = new LayerModel();\r\n+    // const nodeLayer = new LayerModel();\r\n+    // const tableLayer = new LayerModel();\r\n \r\n     // add the nodes and the links to the node layer\r\n     nodeLayer.addAll(node1, node2, node3, link1, link2);\r\n setNodeLayer(nodeLayer);\r\n"
                },
                {
                    "date": 1707029322081,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -113,16 +113,16 @@\n       nodeId: node3.getID() // added prop\r\n     });\r\n \r\n     // create a layer for the nodes and a layer for the tables\r\n-    // const nodeLayer = new LayerModel();\r\n-    // const tableLayer = new LayerModel();\r\n+    const nodeLayer = new LayerModel();\r\n+    const tableLayer = new LayerModel();\r\n \r\n     // add the nodes and the links to the node layer\r\n     nodeLayer.addAll(node1, node2, node3, link1, link2);\r\n setNodeLayer(nodeLayer);\r\n     // add the tables to the table layer\r\n-    tableLayer.addAll(table1, table2, table3, table4);\r\n+    tableLayer..addAll(table1, table2, table3, table4);\r\n setTableLayer(tableLayer);\r\n     // add both the layers to the model\r\n     model.addAll(nodeLayer, tableLayer);\r\n     engine.setModel(model);\r\n"
                },
                {
                    "date": 1707029329288,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n     // add the nodes and the links to the node layer\r\n     nodeLayer.addAll(node1, node2, node3, link1, link2);\r\n setNodeLayer(nodeLayer);\r\n     // add the tables to the table layer\r\n-    tableLayer..addAll(table1, table2, table3, table4);\r\n+    tableLayer.addAll(table1, table2, table3, table4);\r\n setTableLayer(tableLayer);\r\n     // add both the layers to the model\r\n     model.addAll(nodeLayer, tableLayer);\r\n     engine.setModel(model);\r\n"
                },
                {
                    "date": 1707029352766,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,140 +10,140 @@\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n import { LayerModel, SmartLayerWidget } from '@projectstorm/react-canvas-core';\r\n \r\n const DiagramM = () => {\r\n-  const [engine, setEngine] = useState(createEngine());\r\n-  const [nodeLayer, setNodeLayer] =useState( LayerModel());\r\n-  const [tableLayer, setTableLayer] =useState(LayerModel());\r\n+    const [engine, setEngine] = useState(createEngine());\r\n+    const [nodeLayer, setNodeLayer] = useState(new LayerModel());\r\n+    const [tableLayer, setTableLayer] = useState(new LayerModel());\r\n \r\n-  const model = new DiagramModel();\r\n-  const [modelHadset, setmodelHadset] = useState(false);\r\n-  // use useEffect hook to initialize the engine and model\r\n-  useEffect(() => {\r\n-    // register both the node and table factories with the engine\r\n-    engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n-    engine.getNodeFactories().registerFactory(new TableFactory());\r\n+    const model = new DiagramModel();\r\n+    const [modelHadset, setmodelHadset] = useState(false);\r\n+    // use useEffect hook to initialize the engine and model\r\n+    useEffect(() => {\r\n+        // register both the node and table factories with the engine\r\n+        engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n+        engine.getNodeFactories().registerFactory(new TableFactory());\r\n \r\n-    // create some custom nodes\r\n-    const node1 = new TSCustomNodeModel({\r\n-      name: 'Node 1',\r\n-      color: 'rgb(0,192,255)',\r\n-      value: 1,\r\n-      cssClass: 'circle-node'\r\n-    });\r\n+        // create some custom nodes\r\n+        const node1 = new TSCustomNodeModel({\r\n+            name: 'Node 1',\r\n+            color: 'rgb(0,192,255)',\r\n+            value: 1,\r\n+            cssClass: 'circle-node'\r\n+        });\r\n \r\n-    const node2 = new TSCustomNodeModel({\r\n-      name: 'Node 2',\r\n-      color: 'rgb(255,255,0)',\r\n-      value: 20,\r\n-      cssClass: 'triangle-node'\r\n-    });\r\n+        const node2 = new TSCustomNodeModel({\r\n+            name: 'Node 2',\r\n+            color: 'rgb(255,255,0)',\r\n+            value: 20,\r\n+            cssClass: 'triangle-node'\r\n+        });\r\n \r\n-    const node3 = new TSCustomNodeModel({\r\n-      name: 'Node 3',\r\n-      color: 'rgb(192,255,0)',\r\n-      value: 30,\r\n-      cssClass: 'pentagon-node'\r\n-    });\r\n+        const node3 = new TSCustomNodeModel({\r\n+            name: 'Node 3',\r\n+            color: 'rgb(192,255,0)',\r\n+            value: 30,\r\n+            cssClass: 'pentagon-node'\r\n+        });\r\n \r\n-    node1.setPosition(50, 50);\r\n-    node2.setPosition(200, 50);\r\n-    node3.setPosition(350, 50);\r\n+        node1.setPosition(50, 50);\r\n+        node2.setPosition(200, 50);\r\n+        node3.setPosition(350, 50);\r\n \r\n-    const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n-    const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n+        const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n+        const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n \r\n-    // create some table objects with nodeId property\r\n-    const table1 = new TableModel({\r\n-      name: 'Table 1',\r\n-      values: [\r\n-        ['Name', 'Age', 'Gender'],\r\n-        ['Alice', 25, 'F'],\r\n-        ['Bob', 30, 'M'],\r\n-        ['Charlie', 35, 'M']\r\n-      ],\r\n-      position: { x: 50, y: 150 }, // adjusted position\r\n-      color: 'pink',\r\n-      cssClass: 'table',\r\n-      size: { width: 200, height: 200 },\r\n-      nodeId: node1.getID() // added prop\r\n-    });\r\n+        // create some table objects with nodeId property\r\n+        const table1 = new TableModel({\r\n+            name: 'Table 1',\r\n+            values: [\r\n+                ['Name', 'Age', 'Gender'],\r\n+                ['Alice', 25, 'F'],\r\n+                ['Bob', 30, 'M'],\r\n+                ['Charlie', 35, 'M']\r\n+            ],\r\n+            position: { x: 50, y: 150 }, // adjusted position\r\n+            color: 'pink',\r\n+            cssClass: 'table',\r\n+            size: { width: 200, height: 200 },\r\n+            nodeId: node1.getID() // added prop\r\n+        });\r\n \r\n-    const table2 = new TableModel({\r\n-      name: 'Table 2',\r\n-      values: [\r\n-        ['Country', 'Population', 'Area'],\r\n-        ['China', 1441, 9597],\r\n-        ['India', 1380, 3287],\r\n-        ['USA', 331, 9834]\r\n-      ],\r\n-      position: { x: 200, y: 150 }, // adjusted position\r\n-      color: 'lightblue',\r\n-      cssClass: 'table',\r\n-      size: { width: 200, height: 200 },\r\n-      nodeId: node2.getID() // added prop\r\n-    });\r\n+        const table2 = new TableModel({\r\n+            name: 'Table 2',\r\n+            values: [\r\n+                ['Country', 'Population', 'Area'],\r\n+                ['China', 1441, 9597],\r\n+                ['India', 1380, 3287],\r\n+                ['USA', 331, 9834]\r\n+            ],\r\n+            position: { x: 200, y: 150 }, // adjusted position\r\n+            color: 'lightblue',\r\n+            cssClass: 'table',\r\n+            size: { width: 200, height: 200 },\r\n+            nodeId: node2.getID() // added prop\r\n+        });\r\n \r\n-    const table3 = new TableModel({\r\n-      name: 'Table 3',\r\n-      values: [\r\n-        ['Product', 'Price', 'Quantity'],\r\n-        ['Apple', 1, 10],\r\n-        ['Banana', 0.5, 20],\r\n-        ['Carrot', 0.2, 30]\r\n-      ],\r\n-      position: { x: 350, y: 150 }, // adjusted position\r\n-      color: 'lightgreen',\r\n-      cssClass: 'table',\r\n-      size: { width: 200, height: 200 },\r\n-      nodeId: node3.getID() // added prop\r\n-    });\r\n+        const table3 = new TableModel({\r\n+            name: 'Table 3',\r\n+            values: [\r\n+                ['Product', 'Price', 'Quantity'],\r\n+                ['Apple', 1, 10],\r\n+                ['Banana', 0.5, 20],\r\n+                ['Carrot', 0.2, 30]\r\n+            ],\r\n+            position: { x: 350, y: 150 }, // adjusted position\r\n+            color: 'lightgreen',\r\n+            cssClass: 'table',\r\n+            size: { width: 200, height: 200 },\r\n+            nodeId: node3.getID() // added prop\r\n+        });\r\n \r\n-    const table4 = new TableModel({\r\n-      name: 'Table 4',\r\n-      values: [\r\n-        ['aaa', 'bbb'],\r\n-        ['yazd', 10],\r\n-        ['tehran', 20],\r\n-        ['Amol', 30]\r\n-      ],\r\n-      position: { x: 350, y: 350 }, // adjusted position\r\n-      color: 'brown',\r\n-      cssClass: 'table',\r\n-      size: { width: 200, height: 200 },\r\n-      nodeId: node3.getID() // added prop\r\n-    });\r\n+        const table4 = new TableModel({\r\n+            name: 'Table 4',\r\n+            values: [\r\n+                ['aaa', 'bbb'],\r\n+                ['yazd', 10],\r\n+                ['tehran', 20],\r\n+                ['Amol', 30]\r\n+            ],\r\n+            position: { x: 350, y: 350 }, // adjusted position\r\n+            color: 'brown',\r\n+            cssClass: 'table',\r\n+            size: { width: 200, height: 200 },\r\n+            nodeId: node3.getID() // added prop\r\n+        });\r\n \r\n-    // create a layer for the nodes and a layer for the tables\r\n-    const nodeLayer = new LayerModel();\r\n-    const tableLayer = new LayerModel();\r\n+        // create a layer for the nodes and a layer for the tables\r\n+        const nodeLayer = new LayerModel();\r\n+        const tableLayer = new LayerModel();\r\n \r\n-    // add the nodes and the links to the node layer\r\n-    nodeLayer.addAll(node1, node2, node3, link1, link2);\r\n-setNodeLayer(nodeLayer);\r\n-    // add the tables to the table layer\r\n-    tableLayer.addAll(table1, table2, table3, table4);\r\n-setTableLayer(tableLayer);\r\n-    // add both the layers to the model\r\n-    model.addAll(nodeLayer, tableLayer);\r\n-    engine.setModel(model);\r\n+        // add the nodes and the links to the node layer\r\n+        nodeLayer.addAll(node1, node2, node3, link1, link2);\r\n+        setNodeLayer(nodeLayer);\r\n+        // add the tables to the table layer\r\n+        tableLayer.addAll(table1, table2, table3, table4);\r\n+        setTableLayer(tableLayer);\r\n+        // add both the layers to the model\r\n+        model.addAll(nodeLayer, tableLayer);\r\n+        engine.setModel(model);\r\n \r\n-    setEngine(engine);\r\n-    setmodelHadset(true);\r\n-  }, [modelHadset]);\r\n+        setEngine(engine);\r\n+        setmodelHadset(true);\r\n+    }, [modelHadset]);\r\n \r\n-  return (\r\n-    <div style={{ height: '800px', width: '800px' }}>\r\n-      {modelHadset && (\r\n-        <>\r\n-          <DemoCanvasWidget>\r\n-            <CanvasWidget engine={engine} />\r\n-            {/* added the layer widgets */}\r\n-            <SmartLayerWidget layer={nodeLayer} />\r\n-            <SmartLayerWidget layer={tableLayer} />\r\n-          </DemoCanvasWidget>\r\n-        </>\r\n-      )}\r\n-    </div>\r\n-  );\r\n+    return (\r\n+        <div style={{ height: '800px', width: '800px' }}>\r\n+            {modelHadset && (\r\n+                <>\r\n+                    <DemoCanvasWidget>\r\n+                        <CanvasWidget engine={engine} />\r\n+                        {/* added the layer widgets */}\r\n+                        <SmartLayerWidget layer={nodeLayer} />\r\n+                        <SmartLayerWidget layer={tableLayer} />\r\n+                    </DemoCanvasWidget>\r\n+                </>\r\n+            )}\r\n+        </div>\r\n+    );\r\n };\r\n export default DiagramM;\r\n"
                },
                {
                    "date": 1707029924940,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// part 10\r\n+// part 12\r\n // import the necessary modules\r\n import React, { useEffect, useState } from 'react';\r\n import createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\r\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n@@ -7,143 +7,132 @@\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { TableFactory } from './7';\r\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n-import { LayerModel, SmartLayerWidget } from '@projectstorm/react-canvas-core';\r\n+import { CanvasModel } from '@projectstorm/react-canvas-core'; // replaced import\r\n \r\n const DiagramM = () => {\r\n-    const [engine, setEngine] = useState(createEngine());\r\n-    const [nodeLayer, setNodeLayer] = useState(new LayerModel());\r\n-    const [tableLayer, setTableLayer] = useState(new LayerModel());\r\n+const [engine, setEngine] = useState(createEngine());\r\n+const [nodeCanvas, setNodeCanvas] = useState(new CanvasModel());\r\n+const [tableCanvas, setTableCanvas] = useState(new CanvasModel());\r\n+const model = new DiagramModel();\r\n+const [modelHadset, setmodelHadset] = useState(false);\r\n \r\n-    const model = new DiagramModel();\r\n-    const [modelHadset, setmodelHadset] = useState(false);\r\n-    // use useEffect hook to initialize the engine and model\r\n-    useEffect(() => {\r\n-        // register both the node and table factories with the engine\r\n-        engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n-        engine.getNodeFactories().registerFactory(new TableFactory());\r\n+useEffect(() => {\r\n+    engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n+    engine.getNodeFactories().registerFactory(new TableFactory());\r\n \r\n-        // create some custom nodes\r\n-        const node1 = new TSCustomNodeModel({\r\n-            name: 'Node 1',\r\n-            color: 'rgb(0,192,255)',\r\n-            value: 1,\r\n-            cssClass: 'circle-node'\r\n-        });\r\n+    const node1 = new TSCustomNodeModel({\r\n+        name: 'Node 1',\r\n+        color: 'rgb(0,192,255)',\r\n+        value: 1,\r\n+        cssClass: 'circle-node'\r\n+    });\r\n \r\n-        const node2 = new TSCustomNodeModel({\r\n-            name: 'Node 2',\r\n-            color: 'rgb(255,255,0)',\r\n-            value: 20,\r\n-            cssClass: 'triangle-node'\r\n-        });\r\n+    const node2 = new TSCustomNodeModel({\r\n+        name: 'Node 2',\r\n+        color: 'rgb(255,255,0)',\r\n+        value: 20,\r\n+        cssClass: 'triangle-node'\r\n+    });\r\n \r\n-        const node3 = new TSCustomNodeModel({\r\n-            name: 'Node 3',\r\n-            color: 'rgb(192,255,0)',\r\n-            value: 30,\r\n-            cssClass: 'pentagon-node'\r\n-        });\r\n+    const node3 = new TSCustomNodeModel({\r\n+        name: 'Node 3',\r\n+        color: 'rgb(192,255,0)',\r\n+        value: 30,\r\n+        cssClass: 'pentagon-node'\r\n+    });\r\n \r\n-        node1.setPosition(50, 50);\r\n-        node2.setPosition(200, 50);\r\n-        node3.setPosition(350, 50);\r\n+    node1.setPosition(50, 50);\r\n+    node2.setPosition(200, 50);\r\n+    node3.setPosition(350, 50);\r\n \r\n-        const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n-        const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n+    const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n+    const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n \r\n-        // create some table objects with nodeId property\r\n-        const table1 = new TableModel({\r\n-            name: 'Table 1',\r\n-            values: [\r\n-                ['Name', 'Age', 'Gender'],\r\n-                ['Alice', 25, 'F'],\r\n-                ['Bob', 30, 'M'],\r\n-                ['Charlie', 35, 'M']\r\n-            ],\r\n-            position: { x: 50, y: 150 }, // adjusted position\r\n-            color: 'pink',\r\n-            cssClass: 'table',\r\n-            size: { width: 200, height: 200 },\r\n-            nodeId: node1.getID() // added prop\r\n-        });\r\n+    const table1 = new TableModel({\r\n+        name: 'Table 1',\r\n+        values: [\r\n+            ['Name', 'Age', 'Gender'],\r\n+            ['Alice', 25, 'F'],\r\n+            ['Bob', 30, 'M'],\r\n+            ['Charlie', 35, 'M']\r\n+        ],\r\n+        position: { x: 50, y: 150 },\r\n+        color: 'pink',\r\n+        cssClass: 'table',\r\n+        size: { width: 200, height: 200 },\r\n+        nodeId: node1.getID()\r\n+    });\r\n \r\n-        const table2 = new TableModel({\r\n-            name: 'Table 2',\r\n-            values: [\r\n-                ['Country', 'Population', 'Area'],\r\n-                ['China', 1441, 9597],\r\n-                ['India', 1380, 3287],\r\n-                ['USA', 331, 9834]\r\n-            ],\r\n-            position: { x: 200, y: 150 }, // adjusted position\r\n-            color: 'lightblue',\r\n-            cssClass: 'table',\r\n-            size: { width: 200, height: 200 },\r\n-            nodeId: node2.getID() // added prop\r\n-        });\r\n+    const table2 = new TableModel({\r\n+        name: 'Table 2',\r\n+        values: [\r\n+            ['Country', 'Population', 'Area'],\r\n+            ['China', 1441, 9597],\r\n+            ['India', 1380, 3287],\r\n+            ['USA', 331, 9834]\r\n+        ],\r\n+        position: { x: 200, y: 150 },\r\n+        color: 'lightblue',\r\n+        cssClass: 'table',\r\n+        size: { width: 200, height: 200 },\r\n+        nodeId: node2.getID()\r\n+    });\r\n \r\n-        const table3 = new TableModel({\r\n-            name: 'Table 3',\r\n-            values: [\r\n-                ['Product', 'Price', 'Quantity'],\r\n-                ['Apple', 1, 10],\r\n-                ['Banana', 0.5, 20],\r\n-                ['Carrot', 0.2, 30]\r\n-            ],\r\n-            position: { x: 350, y: 150 }, // adjusted position\r\n-            color: 'lightgreen',\r\n-            cssClass: 'table',\r\n-            size: { width: 200, height: 200 },\r\n-            nodeId: node3.getID() // added prop\r\n-        });\r\n+    const table3 = new TableModel({\r\n+        name: 'Table 3',\r\n+        values: [\r\n+            ['Product', 'Price', 'Quantity'],\r\n+            ['Apple', 1, 10],\r\n+            ['Banana', 0.5, 20],\r\n+            ['Carrot', 0.2, 30]\r\n+        ],\r\n+        position: { x: 350, y: 150 },\r\n+        color: 'lightgreen',\r\n+        cssClass: 'table',\r\n+        size: { width: 200, height: 200 },\r\n+        nodeId: node3.getID()\r\n+    });\r\n \r\n-        const table4 = new TableModel({\r\n-            name: 'Table 4',\r\n-            values: [\r\n-                ['aaa', 'bbb'],\r\n-                ['yazd', 10],\r\n-                ['tehran', 20],\r\n-                ['Amol', 30]\r\n-            ],\r\n-            position: { x: 350, y: 350 }, // adjusted position\r\n-            color: 'brown',\r\n-            cssClass: 'table',\r\n-            size: { width: 200, height: 200 },\r\n-            nodeId: node3.getID() // added prop\r\n-        });\r\n \r\n-        // create a layer for the nodes and a layer for the tables\r\n-        const nodeLayer = new LayerModel();\r\n-        const tableLayer = new LayerModel();\r\n+    // replaced the lines that create the node layer and the table layer with the lines that create the node canvas and the table canvas\r\n+    const nodeCanvas = new CanvasModel();\r\n+    const tableCanvas = new CanvasModel();\r\n \r\n-        // add the nodes and the links to the node layer\r\n-        nodeLayer.addAll(node1, node2, node3, link1, link2);\r\n-        setNodeLayer(nodeLayer);\r\n-        // add the tables to the table layer\r\n-        tableLayer.addAll(table1, table2, table3, table4);\r\n-        setTableLayer(tableLayer);\r\n-        // add both the layers to the model\r\n-        model.addAll(nodeLayer, tableLayer);\r\n-        engine.setModel(model);\r\n+    // use the addModel method to add the nodes, the links, and the tables to the canvases\r\n+    nodeCanvas.addModel(node1);\r\n+    nodeCanvas.addModel(node2);\r\n+    nodeCanvas.addModel(node3);\r\n+    nodeCanvas.addModel(link1);\r\n+    nodeCanvas.addModel(link2);\r\n+    setNodeCanvas(nodeCanvas);\r\n+    \r\n+    tableCanvas.addModel(table1);\r\n+    tableCanvas.addModel(table2);\r\n+    tableCanvas.addModel(table3);\r\n+    tableCanvas.addModel(table4);\r\n+    setTableCanvas(tableCanvas);\r\n+    \r\n+    // use the addCanvas method to add the canvases to the model\r\n+    model.addCanvas(nodeCanvas);\r\n+    model.addCanvas(tableCanvas);\r\n+    engine.setModel(model);\r\n \r\n-        setEngine(engine);\r\n-        setmodelHadset(true);\r\n-    }, [modelHadset]);\r\n+    setEngine(engine);\r\n+    setmodelHadset(true);\r\n+}, [modelHadset]);\r\n \r\n-    return (\r\n-        <div style={{ height: '800px', width: '800px' }}>\r\n-            {modelHadset && (\r\n-                <>\r\n-                    <DemoCanvasWidget>\r\n-                        <CanvasWidget engine={engine} />\r\n-                        {/* added the layer widgets */}\r\n-                        <SmartLayerWidget layer={nodeLayer} />\r\n-                        <SmartLayerWidget layer={tableLayer} />\r\n-                    </DemoCanvasWidget>\r\n-                </>\r\n-            )}\r\n-        </div>\r\n-    );\r\n-};\r\n-export default DiagramM;\r\n+return (\r\n+    <div style={{ height: '800px', width: '800px' }}>\r\n+        {modelHadset && (\r\n+            <>\r\n+                <DemoCanvasWidget>\r\n+                    <CanvasWidget engine={engine} />\r\n+                    {/* use the CanvasWidget component to render the canvases */}\r\n+                    <CanvasWidget engine={engine} canvas={nodeCanvas} />\r\n+                    <CanvasWidget engine={engine} canvas={tableCanvas} />\r\n+                </DemoCanvasWidget>\r\n+            </>\r\n+        )}\r\n+    </div>\r\n+);\r\n"
                },
                {
                    "date": 1707029961463,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,4 +135,5 @@\n             </>\r\n         )}\r\n     </div>\r\n );\r\n+export default DiagramM\n\\ No newline at end of file\n"
                },
                {
                    "date": 1707029970086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,5 +135,6 @@\n             </>\r\n         )}\r\n     </div>\r\n );\r\n-export default DiagramM\n\\ No newline at end of file\n+        }\r\n+export default DiagramM()\n\\ No newline at end of file\n"
                },
                {
                    "date": 1707030013269,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -92,8 +92,23 @@\n         cssClass: 'table',\r\n         size: { width: 200, height: 200 },\r\n         nodeId: node3.getID()\r\n     });\r\n+    \r\n+    const table4 = new TableModel({\r\n+        name: 'Table 4',\r\n+        values: [\r\n+            ['aaa', 'bbb'],\r\n+            ['yazd', 10],\r\n+            ['tehran', 20],\r\n+            ['Amol', 30]\r\n+        ],\r\n+        position: { x: 350, y: 350 }, // adjusted position\r\n+        color: 'brown',\r\n+        cssClass: 'table',\r\n+        size: { width: 200, height: 200 },\r\n+        nodeId: node3.getID() // added prop\r\n+    });\r\n \r\n \r\n     // replaced the lines that create the node layer and the table layer with the lines that create the node canvas and the table canvas\r\n     const nodeCanvas = new CanvasModel();\r\n"
                },
                {
                    "date": 1707030039396,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -151,5 +151,6 @@\n         )}\r\n     </div>\r\n );\r\n         }\r\n-export default DiagramM()\n\\ No newline at end of file\n+\r\n+    export default DiagramM;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1707030083079,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,20 +114,20 @@\n     const nodeCanvas = new CanvasModel();\r\n     const tableCanvas = new CanvasModel();\r\n \r\n     // use the addModel method to add the nodes, the links, and the tables to the canvases\r\n-    nodeCanvas.addModel(node1);\r\n-    nodeCanvas.addModel(node2);\r\n-    nodeCanvas.addModel(node3);\r\n-    nodeCanvas.addModel(link1);\r\n-    nodeCanvas.addModel(link2);\r\n-    setNodeCanvas(nodeCanvas);\r\n+    // nodeCanvas.addModel(node1);\r\n+    // nodeCanvas.addModel(node2);\r\n+    // nodeCanvas.addModel(node3);\r\n+    // nodeCanvas.addModel(link1);\r\n+    // nodeCanvas.addModel(link2);\r\n+    // setNodeCanvas(nodeCanvas);\r\n     \r\n-    tableCanvas.addModel(table1);\r\n-    tableCanvas.addModel(table2);\r\n-    tableCanvas.addModel(table3);\r\n-    tableCanvas.addModel(table4);\r\n-    setTableCanvas(tableCanvas);\r\n+    // tableCanvas.addModel(table1);\r\n+    // tableCanvas.addModel(table2);\r\n+    // tableCanvas.addModel(table3);\r\n+    // tableCanvas.addModel(table4);\r\n+    // setTableCanvas(tableCanvas);\r\n     \r\n     // use the addCanvas method to add the canvases to the model\r\n     model.addCanvas(nodeCanvas);\r\n     model.addCanvas(tableCanvas);\r\n"
                },
                {
                    "date": 1707030099174,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,10 +128,10 @@\n     // tableCanvas.addModel(table4);\r\n     // setTableCanvas(tableCanvas);\r\n     \r\n     // use the addCanvas method to add the canvases to the model\r\n-    model.addCanvas(nodeCanvas);\r\n-    model.addCanvas(tableCanvas);\r\n+    // model.addCanvas(nodeCanvas);\r\n+    // model.addCanvas(tableCanvas);\r\n     engine.setModel(model);\r\n \r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n"
                },
                {
                    "date": 1707030106512,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,10 +143,10 @@\n             <>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                     {/* use the CanvasWidget component to render the canvases */}\r\n-                    <CanvasWidget engine={engine} canvas={nodeCanvas} />\r\n-                    <CanvasWidget engine={engine} canvas={tableCanvas} />\r\n+                    <CanvasWidget engine={engine}  />\r\n+                    <CanvasWidget engine={engine}  />\r\n                 </DemoCanvasWidget>\r\n             </>\r\n         )}\r\n     </div>\r\n"
                },
                {
                    "date": 1707030115285,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -143,10 +143,10 @@\n             <>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                     {/* use the CanvasWidget component to render the canvases */}\r\n+                    {/* <CanvasWidget engine={engine}  /> */}\r\n                     <CanvasWidget engine={engine}  />\r\n-                    <CanvasWidget engine={engine}  />\r\n                 </DemoCanvasWidget>\r\n             </>\r\n         )}\r\n     </div>\r\n"
                },
                {
                    "date": 1707030145753,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -130,11 +130,13 @@\n     \r\n     // use the addCanvas method to add the canvases to the model\r\n     // model.addCanvas(nodeCanvas);\r\n     // model.addCanvas(tableCanvas);\r\n+    model.addAll(node1, node2, node3, link1, link2, table1, table2, table3,table4);\r\n     engine.setModel(model);\r\n \r\n     setEngine(engine);\r\n+    setEngine(engine);\r\n     setmodelHadset(true);\r\n }, [modelHadset]);\r\n \r\n return (\r\n@@ -144,9 +146,9 @@\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                     {/* use the CanvasWidget component to render the canvases */}\r\n                     {/* <CanvasWidget engine={engine}  /> */}\r\n-                    <CanvasWidget engine={engine}  />\r\n+                    {/* <CanvasWidget engine={engine}  /> */}\r\n                 </DemoCanvasWidget>\r\n             </>\r\n         )}\r\n     </div>\r\n"
                },
                {
                    "date": 1707030166544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,8 +134,9 @@\n     model.addAll(node1, node2, node3, link1, link2, table1, table2, table3,table4);\r\n     engine.setModel(model);\r\n \r\n     setEngine(engine);\r\n+\r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n }, [modelHadset]);\r\n \r\n@@ -145,10 +146,10 @@\n             <>\r\n                 <DemoCanvasWidget>\r\n                     <CanvasWidget engine={engine} />\r\n                     {/* use the CanvasWidget component to render the canvases */}\r\n-                    {/* <CanvasWidget engine={engine}  /> */}\r\n-                    {/* <CanvasWidget engine={engine}  /> */}\r\n+                    <CanvasWidget engine={engine} canvas={nodeCanvas} />\r\n+                    <CanvasWidget engine={engine} canvas={tableCanvas} />\r\n                 </DemoCanvasWidget>\r\n             </>\r\n         )}\r\n     </div>\r\n"
                },
                {
                    "date": 1707030182206,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n     <div style={{ height: '800px', width: '800px' }}>\r\n         {modelHadset && (\r\n             <>\r\n                 <DemoCanvasWidget>\r\n-                    <CanvasWidget engine={engine} />\r\n+                  \r\n                     {/* use the CanvasWidget component to render the canvases */}\r\n                     <CanvasWidget engine={engine} canvas={nodeCanvas} />\r\n                     <CanvasWidget engine={engine} canvas={tableCanvas} />\r\n                 </DemoCanvasWidget>\r\n"
                },
                {
                    "date": 1707030188688,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n             <>\r\n                 <DemoCanvasWidget>\r\n                   \r\n                     {/* use the CanvasWidget component to render the canvases */}\r\n-                    <CanvasWidget engine={engine} canvas={nodeCanvas} />\r\n+                   \r\n                     <CanvasWidget engine={engine} canvas={tableCanvas} />\r\n                 </DemoCanvasWidget>\r\n             </>\r\n         )}\r\n"
                },
                {
                    "date": 1707030262182,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n         position: { x: 350, y: 350 }, // adjusted position\r\n         color: 'brown',\r\n         cssClass: 'table',\r\n         size: { width: 200, height: 200 },\r\n-        nodeId: node3.getID() // added prop\r\n+        nodeId: node2.getID() // added prop\r\n     });\r\n \r\n \r\n     // replaced the lines that create the node layer and the table layer with the lines that create the node canvas and the table canvas\r\n"
                },
                {
                    "date": 1707030282808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n         position: { x: 350, y: 350 }, // adjusted position\r\n         color: 'brown',\r\n         cssClass: 'table',\r\n         size: { width: 200, height: 200 },\r\n-        nodeId: node2.getID() // added prop\r\n+        nodeId: node1.getID() // added prop\r\n     });\r\n \r\n \r\n     // replaced the lines that create the node layer and the table layer with the lines that create the node canvas and the table canvas\r\n"
                },
                {
                    "date": 1707030292010,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -105,9 +105,9 @@\n         position: { x: 350, y: 350 }, // adjusted position\r\n         color: 'brown',\r\n         cssClass: 'table',\r\n         size: { width: 200, height: 200 },\r\n-        nodeId: node1.getID() // added prop\r\n+        nodeId: node3.getID() // added prop\r\n     });\r\n \r\n \r\n     // replaced the lines that create the node layer and the table layer with the lines that create the node canvas and the table canvas\r\n"
                },
                {
                    "date": 1707037187854,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,159 +1,54 @@\n-// part 12\r\n+// part 15\r\n+// SVGModel.js\r\n // import the necessary modules\r\n-import React, { useEffect, useState } from 'react';\r\n-import createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\r\n-import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n-import { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\n-import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n-import { TableFactory } from './7';\r\n-import { TableModel } from './5';\r\n-import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n-import { CanvasModel } from '@projectstorm/react-canvas-core'; // replaced import\r\n+import { NodeModel, PortModelAlignment } from '@projectstorm/react-diagrams';\r\n+import { SVGPortModel } from './13';\r\n \r\n-const DiagramM = () => {\r\n-const [engine, setEngine] = useState(createEngine());\r\n-const [nodeCanvas, setNodeCanvas] = useState(new CanvasModel());\r\n-const [tableCanvas, setTableCanvas] = useState(new CanvasModel());\r\n-const model = new DiagramModel();\r\n-const [modelHadset, setmodelHadset] = useState(false);\r\n+// define the SVGModel class\r\n+export class SVGModel extends NodeModel {\r\n+    constructor(options = {}) {\r\n+        // initialize the SVGModel with the given options\r\n+        super({\r\n+            ...options,\r\n+            type: 'svg'\r\n+        });\r\n \r\n-useEffect(() => {\r\n-    engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n-    engine.getNodeFactories().registerFactory(new TableFactory());\r\n+        // create a port for the SVG object\r\n+        this.addPort(\r\n+            new SVGPortModel({\r\n+                alignment: PortModelAlignment.BOTTOM\r\n+            })\r\n+        );\r\n \r\n-    const node1 = new TSCustomNodeModel({\r\n-        name: 'Node 1',\r\n-        color: 'rgb(0,192,255)',\r\n-        value: 1,\r\n-        cssClass: 'circle-node'\r\n-    });\r\n+        // set the properties of the SVG object\r\n+        this.id = options.id;\r\n+        this.position = options.position;\r\n+        this.filePath = options.filePath;\r\n+        this.nodeId = options.nodeId;\r\n+    }\r\n \r\n-    const node2 = new TSCustomNodeModel({\r\n-        name: 'Node 2',\r\n-        color: 'rgb(255,255,0)',\r\n-        value: 20,\r\n-        cssClass: 'triangle-node'\r\n-    });\r\n+    // get the id of the SVG object\r\n+    getID() {\r\n+        return this.id;\r\n+    }\r\n \r\n-    const node3 = new TSCustomNodeModel({\r\n-        name: 'Node 3',\r\n-        color: 'rgb(192,255,0)',\r\n-        value: 30,\r\n-        cssClass: 'pentagon-node'\r\n-    });\r\n+    // get the position of the SVG object\r\n+    getPosition() {\r\n+        return this.position;\r\n+    }\r\n \r\n-    node1.setPosition(50, 50);\r\n-    node2.setPosition(200, 50);\r\n-    node3.setPosition(350, 50);\r\n+    // get the file path of the SVG graphic\r\n+    getFilePath() {\r\n+        return this.filePath;\r\n+    }\r\n \r\n-    const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n-    const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n+    // get the id of the associated node\r\n+    getNodeId() {\r\n+        return this.nodeId;\r\n+    }\r\n \r\n-    const table1 = new TableModel({\r\n-        name: 'Table 1',\r\n-        values: [\r\n-            ['Name', 'Age', 'Gender'],\r\n-            ['Alice', 25, 'F'],\r\n-            ['Bob', 30, 'M'],\r\n-            ['Charlie', 35, 'M']\r\n-        ],\r\n-        position: { x: 50, y: 150 },\r\n-        color: 'pink',\r\n-        cssClass: 'table',\r\n-        size: { width: 200, height: 200 },\r\n-        nodeId: node1.getID()\r\n-    });\r\n-\r\n-    const table2 = new TableModel({\r\n-        name: 'Table 2',\r\n-        values: [\r\n-            ['Country', 'Population', 'Area'],\r\n-            ['China', 1441, 9597],\r\n-            ['India', 1380, 3287],\r\n-            ['USA', 331, 9834]\r\n-        ],\r\n-        position: { x: 200, y: 150 },\r\n-        color: 'lightblue',\r\n-        cssClass: 'table',\r\n-        size: { width: 200, height: 200 },\r\n-        nodeId: node2.getID()\r\n-    });\r\n-\r\n-    const table3 = new TableModel({\r\n-        name: 'Table 3',\r\n-        values: [\r\n-            ['Product', 'Price', 'Quantity'],\r\n-            ['Apple', 1, 10],\r\n-            ['Banana', 0.5, 20],\r\n-            ['Carrot', 0.2, 30]\r\n-        ],\r\n-        position: { x: 350, y: 150 },\r\n-        color: 'lightgreen',\r\n-        cssClass: 'table',\r\n-        size: { width: 200, height: 200 },\r\n-        nodeId: node3.getID()\r\n-    });\r\n-    \r\n-    const table4 = new TableModel({\r\n-        name: 'Table 4',\r\n-        values: [\r\n-            ['aaa', 'bbb'],\r\n-            ['yazd', 10],\r\n-            ['tehran', 20],\r\n-            ['Amol', 30]\r\n-        ],\r\n-        position: { x: 350, y: 350 }, // adjusted position\r\n-        color: 'brown',\r\n-        cssClass: 'table',\r\n-        size: { width: 200, height: 200 },\r\n-        nodeId: node3.getID() // added prop\r\n-    });\r\n-\r\n-\r\n-    // replaced the lines that create the node layer and the table layer with the lines that create the node canvas and the table canvas\r\n-    const nodeCanvas = new CanvasModel();\r\n-    const tableCanvas = new CanvasModel();\r\n-\r\n-    // use the addModel method to add the nodes, the links, and the tables to the canvases\r\n-    // nodeCanvas.addModel(node1);\r\n-    // nodeCanvas.addModel(node2);\r\n\\ No newline at end of file\n-    // nodeCanvas.addModel(node3);\r\n-    // nodeCanvas.addModel(link1);\r\n-    // nodeCanvas.addModel(link2);\r\n-    // setNodeCanvas(nodeCanvas);\r\n-    \r\n-    // tableCanvas.addModel(table1);\r\n-    // tableCanvas.addModel(table2);\r\n-    // tableCanvas.addModel(table3);\r\n-    // tableCanvas.addModel(table4);\r\n-    // setTableCanvas(tableCanvas);\r\n-    \r\n-    // use the addCanvas method to add the canvases to the model\r\n-    // model.addCanvas(nodeCanvas);\r\n-    // model.addCanvas(tableCanvas);\r\n-    model.addAll(node1, node2, node3, link1, link2, table1, table2, table3,table4);\r\n-    engine.setModel(model);\r\n-\r\n-    setEngine(engine);\r\n-\r\n-    setEngine(engine);\r\n-    setmodelHadset(true);\r\n-}, [modelHadset]);\r\n-\r\n-return (\r\n-    <div style={{ height: '800px', width: '800px' }}>\r\n-        {modelHadset && (\r\n-            <>\r\n-                <DemoCanvasWidget>\r\n-                  \r\n-                    {/* use the CanvasWidget component to render the canvases */}\r\n-                   \r\n-                    <CanvasWidget engine={engine} canvas={tableCanvas} />\r\n-                </DemoCanvasWidget>\r\n-            </>\r\n-        )}\r\n-    </div>\r\n-);\r\n-        }\r\n-\r\n-    export default DiagramM;\n+    // set the position of the SVG object\r\n+    setPosition(x, y) {\r\n+        this.position = { x, y };\r\n+    }\r\n+}\r\n"
                },
                {
                    "date": 1707037771511,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,8 +20,9 @@\n             })\r\n         );\r\n \r\n         // set the properties of the SVG object\r\n+        this.name = options.name;\r\n         this.id = options.id;\r\n         this.position = options.position;\r\n         this.filePath = options.filePath;\r\n         this.nodeId = options.nodeId;\r\n"
                },
                {
                    "date": 1707037849610,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -20,9 +20,9 @@\n             })\r\n         );\r\n \r\n         // set the properties of the SVG object\r\n-        this.name = options.name;\r\n+        this.name = options.name || 'svg';\r\n         this.id = options.id;\r\n         this.position = options.position;\r\n         this.filePath = options.filePath;\r\n         this.nodeId = options.nodeId;\r\n"
                },
                {
                    "date": 1707037883007,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,8 +21,10 @@\n         );\r\n \r\n         // set the properties of the SVG object\r\n         this.name = options.name || 'svg';\r\n+        this.cssClass = options.cssClass || 'table';\r\n+\r\n         this.id = options.id;\r\n         this.position = options.position;\r\n         this.filePath = options.filePath;\r\n         this.nodeId = options.nodeId;\r\n"
                },
                {
                    "date": 1707038103328,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -11,8 +11,9 @@\n         super({\r\n             ...options,\r\n             type: 'svg'\r\n         });\r\n+        this.name = options.name || 'svg';\r\n \r\n         // create a port for the SVG object\r\n         this.addPort(\r\n             new SVGPortModel({\r\n"
                }
            ],
            "date": 1707027133859,
            "name": "Commit-0",
            "content": "// part 10\r\n// import the necessary modules\r\nimport React, { useEffect, useState } from 'react';\r\nimport createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\r\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\r\nimport { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\nimport { TSCustomNodeModel } from './TSCustomNodeModel';\r\nimport { TableFactory } from './TableFactory';\r\nimport { TableModel } from './TableModel';\r\nimport { DemoCanvasWidget } from './DemoCanvasWidget';\r\nimport { LayerModel, LayerWidget } from '@projectstorm/react-canvas-core'; // added import\r\n\r\nconst Diagram = () => {\r\n  const [engine, setEngine] = useState(createEngine());\r\n\r\n  const model = new DiagramModel();\r\n  const [modelHadset, setmodelHadset] = useState(false);\r\n  // use useEffect hook to initialize the engine and model\r\n  useEffect(() => {\r\n    // register both the node and table factories with the engine\r\n    engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n    engine.getNodeFactories().registerFactory(new TableFactory());\r\n\r\n    // create some custom nodes\r\n    const node1 = new TSCustomNodeModel({\r\n      name: 'Node 1',\r\n      color: 'rgb(0,192,255)',\r\n      value: 1,\r\n      cssClass: 'circle-node'\r\n    });\r\n\r\n    const node2 = new TSCustomNodeModel({\r\n      name: 'Node 2',\r\n      color: 'rgb(255,255,0)',\r\n      value: 20,\r\n      cssClass: 'triangle-node'\r\n    });\r\n\r\n    const node3 = new TSCustomNodeModel({\r\n      name: 'Node 3',\r\n      color: 'rgb(192,255,0)',\r\n      value: 30,\r\n      cssClass: 'pentagon-node'\r\n    });\r\n\r\n    node1.setPosition(50, 50);\r\n    node2.setPosition(200, 50);\r\n    node3.setPosition(350, 50);\r\n\r\n    const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n    const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n\r\n    // create some table objects with nodeId property\r\n    const table1 = new TableModel({\r\n      name: 'Table 1',\r\n      values: [\r\n        ['Name', 'Age', 'Gender'],\r\n        ['Alice', 25, 'F'],\r\n        ['Bob', 30, 'M'],\r\n        ['Charlie', 35, 'M']\r\n      ],\r\n      position: { x: 50, y: 150 }, // adjusted position\r\n      color: 'pink',\r\n      cssClass: 'table',\r\n      size: { width: 200, height: 200 },\r\n      nodeId: node1.getID() // added prop\r\n    });\r\n\r\n    const table2 = new TableModel({\r\n      name: 'Table 2',\r\n      values: [\r\n        ['Country', 'Population', 'Area'],\r\n        ['China', 1441, 9597],\r\n        ['India', 1380, 3287],\r\n        ['USA', 331, 9834]\r\n      ],\r\n      position: { x: 200, y: 150 }, // adjusted position\r\n      color: 'lightblue',\r\n      cssClass: 'table',\r\n      size: { width: 200, height: 200 },\r\n      nodeId: node2.getID() // added prop\r\n    });\r\n\r\n    const table3 = new TableModel({\r\n      name: 'Table 3',\r\n      values: [\r\n        ['Product', 'Price', 'Quantity'],\r\n        ['Apple', 1, 10],\r\n        ['Banana', 0.5, 20],\r\n        ['Carrot', 0.2, 30]\r\n      ],\r\n      position: { x: 350, y: 150 }, // adjusted position\r\n      color: 'lightgreen',\r\n      cssClass: 'table',\r\n      size: { width: 200, height: 200 },\r\n      nodeId: node3.getID() // added prop\r\n    });\r\n\r\n    const table4 = new TableModel({\r\n      name: 'Table 4',\r\n      values: [\r\n        ['aaa', 'bbb'],\r\n        ['yazd', 10],\r\n        ['tehran', 20],\r\n        ['Amol', 30]\r\n      ],\r\n      position: { x: 350, y: 350 }, // adjusted position\r\n      color: 'brown',\r\n      cssClass: 'table',\r\n      size: { width: 200, height: 200 },\r\n      nodeId: node3.getID() // added prop\r\n    });\r\n\r\n    // create a layer for the nodes and a layer for the tables\r\n    const nodeLayer = new LayerModel();\r\n    const tableLayer = new LayerModel();\r\n\r\n    // add the nodes and the links to the node layer\r\n    nodeLayer.addAll(node1, node2, node3, link1, link2);\r\n\r\n    // add the tables to the table layer\r\n    tableLayer.addAll(table1, table2, table3, table4);\r\n\r\n    // add both the layers to the model\r\n    model.addAll(nodeLayer, tableLayer);\r\n    engine.setModel(model);\r\n\r\n    setEngine(engine);\r\n    setmodelHadset(true);\r\n  }, [modelHadset]);\r\n\r\n  return (\r\n    <div style={{ height: '800px', width: '800px' }}>\r\n      {modelHadset && (\r\n        <>\r\n          <DemoCanvasWidget>\r\n            <CanvasWidget engine={engine} />\r\n            {/* added the layer widgets */}\r\n            <LayerWidget layer={nodeLayer} />\r\n            <LayerWidget layer={tableLayer} />\r\n          </DemoCanvasWidget>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Diagram;\r\n"
        }
    ]
}