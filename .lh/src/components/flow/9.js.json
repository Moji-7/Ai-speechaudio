{
    "sourceFile": "src/components/flow/9.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 109,
            "patches": [
                {
                    "date": 1707025413195,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1707025425831,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import { TableFactory } from './7';\r\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n import './style.css'; \r\n-const Diagram = () => {\r\n+const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n \r\n   const model = new DiagramModel();\r\n   const [modelHadset, setmodelHadset] = useState(false);\r\n@@ -112,5 +112,5 @@\n       )}\r\n     </div>\r\n   );\r\n };\r\n-export default Diagram;\r\n+export default DiagramM\r\n"
                },
                {
                    "date": 1707025490330,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -67,9 +67,9 @@\n \r\n     const table2 = new TableModel({\r\n       name: 'Table 2',\r\n       values: [\r\n-        ['Country', 'Population', 'Area'],\r\n+        ['Coun', 'Pop', 'Area'],\r\n         ['China', 1441, 9597],\r\n         ['India', 1380, 3287],\r\n         ['USA', 331, 9834]\r\n       ],\r\n@@ -81,9 +81,9 @@\n \r\n     const table3 = new TableModel({\r\n       name: 'Table 3',\r\n       values: [\r\n-        ['Product', 'Price', 'Quantity'],\r\n+        ['Produ', 'Price', 'Quant'],\r\n         ['Apple', 1, 10],\r\n         ['Banana', 0.5, 20],\r\n         ['Carrot', 0.2, 30]\r\n       ],\r\n"
                },
                {
                    "date": 1707025956700,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -61,9 +61,9 @@\n       ],\r\n       position: { x: 50, y: 150 },\r\n       color: 'pink',\r\n       cssClass: 'table',\r\n-      size: { width: 200, height: 200 }\r\n+      size: { width: 166, height: 200 }\r\n     });\r\n \r\n     const table2 = new TableModel({\r\n       name: 'Table 2',\r\n@@ -72,12 +72,12 @@\n         ['China', 1441, 9597],\r\n         ['India', 1380, 3287],\r\n         ['USA', 331, 9834]\r\n       ],\r\n-      position: { x: 300, y: 150 },\r\n+      position: { x: 250, y: 150 },\r\n       color: 'lightblue',\r\n       cssClass: 'table',\r\n-      size: { width: 200, height: 200 }\r\n+      size: { width: 166, height: 200 }\r\n     });\r\n \r\n     const table3 = new TableModel({\r\n       name: 'Table 3',\r\n@@ -86,16 +86,29 @@\n         ['Apple', 1, 10],\r\n         ['Banana', 0.5, 20],\r\n         ['Carrot', 0.2, 30]\r\n       ],\r\n-      position: { x: 550, y: 150 },\r\n+      position: { x: 500, y: 150 },\r\n       color: 'lightgreen',\r\n       cssClass: 'table',\r\n-      size: { width: 200, height: 200 }\r\n+      size: { width: 166, height: 200 }\r\n     });\r\n+      const table4 = new TableModel({\r\n+      name: 'Table 4',\r\n+      values: [\r\n+        ['aaa', 'bbb', 'ccc'],\r\n+        ['yazd', 1, 10],\r\n+        ['tehran', 0.5, 20],\r\n+        ['Amol', 0.2, 30]\r\n+      ],\r\n+      position: { x: 700, y: 150 },\r\n+      color: 'lightgreen',\r\n+      cssClass: 'table',\r\n+      size: { width: 166, height: 200 }\r\n+    });\r\n \r\n     // add both the nodes and tables to the model\r\n-    model.addAll(node1, node2, node3, link1, link2, table1, table2, table3);\r\n+    model.addAll(node1, node2, node3, link1, link2, table1, table2, table3,table4);\r\n     engine.setModel(model);\r\n \r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n"
                },
                {
                    "date": 1707025975086,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -100,9 +100,9 @@\n         ['tehran', 0.5, 20],\r\n         ['Amol', 0.2, 30]\r\n       ],\r\n       position: { x: 700, y: 150 },\r\n-      color: 'lightgreen',\r\n+      color: 'brown',\r\n       cssClass: 'table',\r\n       size: { width: 166, height: 200 }\r\n     });\r\n \r\n"
                },
                {
                    "date": 1707026129276,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -73,9 +73,9 @@\n         ['India', 1380, 3287],\r\n         ['USA', 331, 9834]\r\n       ],\r\n       position: { x: 250, y: 150 },\r\n-      color: 'lightblue',\r\n+      color: 'blue',\r\n       cssClass: 'table',\r\n       size: { width: 166, height: 200 }\r\n     });\r\n \r\n@@ -87,9 +87,9 @@\n         ['Banana', 0.5, 20],\r\n         ['Carrot', 0.2, 30]\r\n       ],\r\n       position: { x: 500, y: 150 },\r\n-      color: 'lightgreen',\r\n+      color: 'green',\r\n       cssClass: 'table',\r\n       size: { width: 166, height: 200 }\r\n     });\r\n       const table4 = new TableModel({\r\n"
                },
                {
                    "date": 1707031298886,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// part 9\r\n+// part 13\r\n // import the necessary modules\r\n import React, { useEffect, useState } from 'react';\r\n import createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\r\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n@@ -8,8 +8,9 @@\n import { TableFactory } from './7';\r\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n import './style.css'; \r\n+\r\n const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n \r\n   const model = new DiagramModel();\r\n@@ -49,21 +50,22 @@\n \r\n const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n \r\n-    // create some table objects\r\n+    // create some table objects with nodeId property\r\n     const table1 = new TableModel({\r\n       name: 'Table 1',\r\n       values: [\r\n         ['Name', 'Age', 'Gender'],\r\n         ['Alice', 25, 'F'],\r\n         ['Bob', 30, 'M'],\r\n         ['Charlie', 35, 'M']\r\n       ],\r\n-      position: { x: 50, y: 150 },\r\n+      position: { x: 50, y: 150 }, // initial position\r\n       color: 'pink',\r\n       cssClass: 'table',\r\n-      size: { width: 166, height: 200 }\r\n+      size: { width: 166, height: 200 },\r\n+      nodeId: node1.getID() // added prop\r\n     });\r\n \r\n     const table2 = new TableModel({\r\n       name: 'Table 2',\r\n@@ -72,12 +74,13 @@\n         ['China', 1441, 9597],\r\n         ['India', 1380, 3287],\r\n         ['USA', 331, 9834]\r\n       ],\r\n-      position: { x: 250, y: 150 },\r\n+      position: { x: 250, y: 150 }, // initial position\r\n       color: 'blue',\r\n       cssClass: 'table',\r\n-      size: { width: 166, height: 200 }\r\n+      size: { width: 166, height: 200 },\r\n+      nodeId: node2.getID() // added prop\r\n     });\r\n \r\n     const table3 = new TableModel({\r\n       name: 'Table 3',\r\n@@ -86,12 +89,13 @@\n         ['Apple', 1, 10],\r\n         ['Banana', 0.5, 20],\r\n         ['Carrot', 0.2, 30]\r\n       ],\r\n-      position: { x: 500, y: 150 },\r\n+      position: { x: 500, y: 150 }, // initial position\r\n       color: 'green',\r\n       cssClass: 'table',\r\n-      size: { width: 166, height: 200 }\r\n+      size: { width: 166, height: 200 },\r\n+      nodeId: node3.getID() // added prop\r\n     });\r\n       const table4 = new TableModel({\r\n       name: 'Table 4',\r\n       values: [\r\n@@ -99,18 +103,40 @@\n         ['yazd', 1, 10],\r\n         ['tehran', 0.5, 20],\r\n         ['Amol', 0.2, 30]\r\n       ],\r\n-      position: { x: 700, y: 150 },\r\n+      position: { x: 700, y: 150 }, // initial position\r\n       color: 'brown',\r\n       cssClass: 'table',\r\n-      size: { width: 166, height: 200 }\r\n+      size: { width: 166, height: 200 },\r\n+      nodeId: node3.getID() // added prop\r\n     });\r\n \r\n     // add both the nodes and tables to the model\r\n     model.addAll(node1, node2, node3, link1, link2, table1, table2, table3,table4);\r\n     engine.setModel(model);\r\n \r\n+    // calculate the position of each node and then set the position of related tables accordingly\r\n+    const NODE_HEIGHT = 50; // constant value for node height\r\n+    const OFFSET = 10; // constant value for space between tables\r\n+    for (let node of model.getNodes()) {\r\n+      // get position of node\r\n+      let node_position = node.getPosition();\r\n+\r\n+      // get related tables\r\n+      let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.nodeId === node.getID());\r\n+\r\n+      // calculate new positions for related tables\r\n+      for (let index in relatedTables) {\r\n+        let table = relatedTables[index];\r\n+        let table_x = node_position.x;\r\n+        let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n+\r\n+        // set new position for table\r\n+        table.setPosition(table_x, table_y);\r\n+      }\r\n+    }\r\n+\r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n   }, [modelHadset]);\r\n \r\n@@ -125,5 +151,5 @@\n       )}\r\n     </div>\r\n   );\r\n };\r\n-export default DiagramM\r\n+export default DiagramM\n\\ No newline at end of file\n"
                },
                {
                    "date": 1707031436918,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// part 13\r\n+// part 9\r\n // import the necessary modules\r\n import React, { useEffect, useState } from 'react';\r\n import createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\r\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n@@ -8,9 +8,8 @@\n import { TableFactory } from './7';\r\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n import './style.css'; \r\n-\r\n const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n \r\n   const model = new DiagramModel();\r\n@@ -50,22 +49,21 @@\n \r\n const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n \r\n-    // create some table objects with nodeId property\r\n+    // create some table objects\r\n     const table1 = new TableModel({\r\n       name: 'Table 1',\r\n       values: [\r\n         ['Name', 'Age', 'Gender'],\r\n         ['Alice', 25, 'F'],\r\n         ['Bob', 30, 'M'],\r\n         ['Charlie', 35, 'M']\r\n       ],\r\n-      position: { x: 50, y: 150 }, // initial position\r\n+      position: { x: 50, y: 150 },\r\n       color: 'pink',\r\n       cssClass: 'table',\r\n-      size: { width: 166, height: 200 },\r\n-      nodeId: node1.getID() // added prop\r\n+      size: { width: 166, height: 200 }\r\n     });\r\n \r\n     const table2 = new TableModel({\r\n       name: 'Table 2',\r\n@@ -74,13 +72,12 @@\n         ['China', 1441, 9597],\r\n         ['India', 1380, 3287],\r\n         ['USA', 331, 9834]\r\n       ],\r\n-      position: { x: 250, y: 150 }, // initial position\r\n+      position: { x: 250, y: 150 },\r\n       color: 'blue',\r\n       cssClass: 'table',\r\n-      size: { width: 166, height: 200 },\r\n-      nodeId: node2.getID() // added prop\r\n+      size: { width: 166, height: 200 }\r\n     });\r\n \r\n     const table3 = new TableModel({\r\n       name: 'Table 3',\r\n@@ -89,13 +86,12 @@\n         ['Apple', 1, 10],\r\n         ['Banana', 0.5, 20],\r\n         ['Carrot', 0.2, 30]\r\n       ],\r\n-      position: { x: 500, y: 150 }, // initial position\r\n+      position: { x: 500, y: 150 },\r\n       color: 'green',\r\n       cssClass: 'table',\r\n-      size: { width: 166, height: 200 },\r\n-      nodeId: node3.getID() // added prop\r\n+      size: { width: 166, height: 200 }\r\n     });\r\n       const table4 = new TableModel({\r\n       name: 'Table 4',\r\n       values: [\r\n@@ -103,40 +99,18 @@\n         ['yazd', 1, 10],\r\n         ['tehran', 0.5, 20],\r\n         ['Amol', 0.2, 30]\r\n       ],\r\n-      position: { x: 700, y: 150 }, // initial position\r\n+      position: { x: 700, y: 150 },\r\n       color: 'brown',\r\n       cssClass: 'table',\r\n-      size: { width: 166, height: 200 },\r\n-      nodeId: node3.getID() // added prop\r\n+      size: { width: 166, height: 200 }\r\n     });\r\n \r\n     // add both the nodes and tables to the model\r\n     model.addAll(node1, node2, node3, link1, link2, table1, table2, table3,table4);\r\n     engine.setModel(model);\r\n \r\n-    // calculate the position of each node and then set the position of related tables accordingly\r\n-    const NODE_HEIGHT = 50; // constant value for node height\r\n-    const OFFSET = 10; // constant value for space between tables\r\n-    for (let node of model.getNodes()) {\r\n-      // get position of node\r\n-      let node_position = node.getPosition();\r\n-\r\n-      // get related tables\r\n-      let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.nodeId === node.getID());\r\n-\r\n-      // calculate new positions for related tables\r\n-      for (let index in relatedTables) {\r\n-        let table = relatedTables[index];\r\n-        let table_x = node_position.x;\r\n-        let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n-\r\n-        // set new position for table\r\n-        table.setPosition(table_x, table_y);\r\n-      }\r\n-    }\r\n-\r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n   }, [modelHadset]);\r\n \r\n@@ -151,5 +125,5 @@\n       )}\r\n     </div>\r\n   );\r\n };\r\n-export default DiagramM\n\\ No newline at end of file\n+export default DiagramM\r\n"
                },
                {
                    "date": 1707031462657,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,5 @@\n-// part 9\r\n+// part 13\r\n // import the necessary modules\r\n import React, { useEffect, useState } from 'react';\r\n import createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\r\n import { CanvasWidget } from '@projectstorm/react-canvas-core';\r\n@@ -8,8 +8,9 @@\n import { TableFactory } from './7';\r\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n import './style.css'; \r\n+\r\n const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n \r\n   const model = new DiagramModel();\r\n@@ -49,21 +50,22 @@\n \r\n const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n \r\n-    // create some table objects\r\n+    // create some table objects with nodeId property\r\n     const table1 = new TableModel({\r\n       name: 'Table 1',\r\n       values: [\r\n         ['Name', 'Age', 'Gender'],\r\n         ['Alice', 25, 'F'],\r\n         ['Bob', 30, 'M'],\r\n         ['Charlie', 35, 'M']\r\n       ],\r\n-      position: { x: 50, y: 150 },\r\n+      position: { x: 50, y: 150 }, // initial position\r\n       color: 'pink',\r\n       cssClass: 'table',\r\n-      size: { width: 166, height: 200 }\r\n+      size: { width: 166, height: 200 },\r\n+      nodeId: node1.getID() // added prop\r\n     });\r\n \r\n     const table2 = new TableModel({\r\n       name: 'Table 2',\r\n@@ -72,12 +74,13 @@\n         ['China', 1441, 9597],\r\n         ['India', 1380, 3287],\r\n         ['USA', 331, 9834]\r\n       ],\r\n-      position: { x: 250, y: 150 },\r\n+      position: { x: 250, y: 150 }, // initial position\r\n       color: 'blue',\r\n       cssClass: 'table',\r\n-      size: { width: 166, height: 200 }\r\n+      size: { width: 166, height: 200 },\r\n+      nodeId: node2.getID() // added prop\r\n     });\r\n \r\n     const table3 = new TableModel({\r\n       name: 'Table 3',\r\n@@ -86,12 +89,13 @@\n         ['Apple', 1, 10],\r\n         ['Banana', 0.5, 20],\r\n         ['Carrot', 0.2, 30]\r\n       ],\r\n-      position: { x: 500, y: 150 },\r\n+      position: { x: 500, y: 150 }, // initial position\r\n       color: 'green',\r\n       cssClass: 'table',\r\n-      size: { width: 166, height: 200 }\r\n+      size: { width: 166, height: 200 },\r\n+      nodeId: node3.getID() // added prop\r\n     });\r\n       const table4 = new TableModel({\r\n       name: 'Table 4',\r\n       values: [\r\n@@ -99,18 +103,40 @@\n         ['yazd', 1, 10],\r\n         ['tehran', 0.5, 20],\r\n         ['Amol', 0.2, 30]\r\n       ],\r\n-      position: { x: 700, y: 150 },\r\n+      position: { x: 700, y: 150 }, // initial position\r\n       color: 'brown',\r\n       cssClass: 'table',\r\n-      size: { width: 166, height: 200 }\r\n+      size: { width: 166, height: 200 },\r\n+      nodeId: node3.getID() // added prop\r\n     });\r\n \r\n     // add both the nodes and tables to the model\r\n     model.addAll(node1, node2, node3, link1, link2, table1, table2, table3,table4);\r\n     engine.setModel(model);\r\n \r\n+    // calculate the position of each node and then set the position of related tables accordingly\r\n+    const NODE_HEIGHT = 50; // constant value for node height\r\n+    const OFFSET = 10; // constant value for space between tables\r\n+    for (let node of model.getNodes()) {\r\n+      // get position of node\r\n+      let node_position = node.getPosition();\r\n+\r\n+      // get related tables\r\n+      let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.nodeId === node.getID());\r\n+\r\n+      // calculate new positions for related tables\r\n+      for (let index in relatedTables) {\r\n+        let table = relatedTables[index];\r\n+        let table_x = node_position.x;\r\n+        let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n+\r\n+        // set new position for table\r\n+        table.setPosition(table_x, table_y);\r\n+      }\r\n+    }\r\n+\r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n   }, [modelHadset]);\r\n \r\n@@ -125,5 +151,5 @@\n       )}\r\n     </div>\r\n   );\r\n };\r\n-export default DiagramM\r\n+export default DiagramM\n\\ No newline at end of file\n"
                },
                {
                    "date": 1707031491120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,8 +127,9 @@\n \r\n       // calculate new positions for related tables\r\n       for (let index in relatedTables) {\r\n         let table = relatedTables[index];\r\n+        Console.log(table)\r\n         let table_x = node_position.x;\r\n         let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n \r\n         // set new position for table\r\n"
                },
                {
                    "date": 1707031502273,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n \r\n       // calculate new positions for related tables\r\n       for (let index in relatedTables) {\r\n         let table = relatedTables[index];\r\n-        Console.log(table)\r\n+        console.log(table)\r\n         let table_x = node_position.x;\r\n         let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n \r\n         // set new position for table\r\n"
                },
                {
                    "date": 1707031531651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,8 +118,9 @@\n     // calculate the position of each node and then set the position of related tables accordingly\r\n     const NODE_HEIGHT = 50; // constant value for node height\r\n     const OFFSET = 10; // constant value for space between tables\r\n     for (let node of model.getNodes()) {\r\n+      console.log(node)\r\n       // get position of node\r\n       let node_position = node.getPosition();\r\n \r\n       // get related tables\r\n"
                },
                {
                    "date": 1707031564497,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n     for (let node of model.getNodes()) {\r\n       console.log(node)\r\n       // get position of node\r\n       let node_position = node.getPosition();\r\n-\r\n+debug\r\n       // get related tables\r\n       let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.nodeId === node.getID());\r\n \r\n       // calculate new positions for related tables\r\n"
                },
                {
                    "date": 1707031571264,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n     for (let node of model.getNodes()) {\r\n       console.log(node)\r\n       // get position of node\r\n       let node_position = node.getPosition();\r\n-debug\r\n+debugger\r\n       // get related tables\r\n       let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.nodeId === node.getID());\r\n \r\n       // calculate new positions for related tables\r\n"
                },
                {
                    "date": 1707031699255,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -123,9 +123,9 @@\n       // get position of node\r\n       let node_position = node.getPosition();\r\n debugger\r\n       // get related tables\r\n-      let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.nodeId === node.getID());\r\n+      let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n \r\n       // calculate new positions for related tables\r\n       for (let index in relatedTables) {\r\n         let table = relatedTables[index];\r\n"
                },
                {
                    "date": 1707031706800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -121,9 +121,9 @@\n     for (let node of model.getNodes()) {\r\n       console.log(node)\r\n       // get position of node\r\n       let node_position = node.getPosition();\r\n-debugger\r\n+\r\n       // get related tables\r\n       let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n \r\n       // calculate new positions for related tables\r\n"
                },
                {
                    "date": 1707033888691,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,9 +118,8 @@\n     // calculate the position of each node and then set the position of related tables accordingly\r\n     const NODE_HEIGHT = 50; // constant value for node height\r\n     const OFFSET = 10; // constant value for space between tables\r\n     for (let node of model.getNodes()) {\r\n-      console.log(node)\r\n       // get position of node\r\n       let node_position = node.getPosition();\r\n \r\n       // get related tables\r\n@@ -128,9 +127,8 @@\n \r\n       // calculate new positions for related tables\r\n       for (let index in relatedTables) {\r\n         let table = relatedTables[index];\r\n-        console.log(table)\r\n         let table_x = node_position.x;\r\n         let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n \r\n         // set new position for table\r\n@@ -153,5 +151,5 @@\n       )}\r\n     </div>\r\n   );\r\n };\r\n-export default DiagramM\n\\ No newline at end of file\n+export default DiagramM\r\n"
                },
                {
                    "date": 1707034068759,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -114,28 +114,40 @@\n     // add both the nodes and tables to the model\r\n     model.addAll(node1, node2, node3, link1, link2, table1, table2, table3,table4);\r\n     engine.setModel(model);\r\n \r\n-    // calculate the position of each node and then set the position of related tables accordingly\r\n     const NODE_HEIGHT = 50; // constant value for node height\r\n     const OFFSET = 10; // constant value for space between tables\r\n+    const TABLE_WIDTH = 150; // estimated width of the table, adjust as needed\r\n+    \r\n     for (let node of model.getNodes()) {\r\n-      // get position of node\r\n-      let node_position = node.getPosition();\r\n-\r\n-      // get related tables\r\n-      let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n-\r\n-      // calculate new positions for related tables\r\n-      for (let index in relatedTables) {\r\n-        let table = relatedTables[index];\r\n-        let table_x = node_position.x;\r\n-        let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n-\r\n-        // set new position for table\r\n-        table.setPosition(table_x, table_y);\r\n-      }\r\n+        console.log(node)\r\n+        // get position of node\r\n+        let node_position = node.getPosition();\r\n+    \r\n+        // get related tables\r\n+        let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n+    \r\n+        if (relatedTables.length > 1) {\r\n+            let totalWidth = relatedTables.length * TABLE_WIDTH + (relatedTables.length - 1) * OFFSET;\r\n+            let startX = node_position.x - totalWidth / 2;\r\n+    \r\n+            // calculate new positions for related tables with adjusted x-position\r\n+            for (let index in relatedTables) {\r\n+                let table_x = startX + index * (TABLE_WIDTH + OFFSET);\r\n+                let table_y = node_position.y + NODE_HEIGHT;\r\n+                relatedTables[index].setPosition(table_x, table_y);\r\n+            }\r\n+        } else {\r\n+            // calculate new positions for single or first table as before\r\n+            for (let index in relatedTables) {\r\n+                let table_x = node_position.x;\r\n+                let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n+                relatedTables[index].setPosition(table_x, table_y);\r\n+            }\r\n+        }\r\n     }\r\n+    \r\n \r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n   }, [modelHadset]);\r\n"
                },
                {
                    "date": 1707034123104,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -119,15 +119,15 @@\n     const OFFSET = 10; // constant value for space between tables\r\n     const TABLE_WIDTH = 150; // estimated width of the table, adjust as needed\r\n     \r\n     for (let node of model.getNodes()) {\r\n-        console.log(node)\r\n+   \r\n         // get position of node\r\n         let node_position = node.getPosition();\r\n     \r\n         // get related tables\r\n         let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n-    \r\n+    debugger\r\n         if (relatedTables.length > 1) {\r\n             let totalWidth = relatedTables.length * TABLE_WIDTH + (relatedTables.length - 1) * OFFSET;\r\n             let startX = node_position.x - totalWidth / 2;\r\n     \r\n"
                },
                {
                    "date": 1707034283645,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -125,9 +125,9 @@\n         let node_position = node.getPosition();\r\n     \r\n         // get related tables\r\n         let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n-    debugger\r\n+    //debugger\r\n         if (relatedTables.length > 1) {\r\n             let totalWidth = relatedTables.length * TABLE_WIDTH + (relatedTables.length - 1) * OFFSET;\r\n             let startX = node_position.x - totalWidth / 2;\r\n     \r\n"
                },
                {
                    "date": 1707034484851,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,9 +127,9 @@\n         // get related tables\r\n         let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n     //debugger\r\n         if (relatedTables.length > 1) {\r\n-            let totalWidth = relatedTables.length * TABLE_WIDTH + (relatedTables.length - 1) * OFFSET;\r\n+            let totalWidth = node_position+(relatedTables.length * TABLE_WIDTH) + (relatedTables.length - 1) * OFFSET;\r\n             let startX = node_position.x - totalWidth / 2;\r\n     \r\n             // calculate new positions for related tables with adjusted x-position\r\n             for (let index in relatedTables) {\r\n"
                },
                {
                    "date": 1707034524161,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -127,10 +127,10 @@\n         // get related tables\r\n         let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n     //debugger\r\n         if (relatedTables.length > 1) {\r\n-            let totalWidth = node_position+(relatedTables.length * TABLE_WIDTH) + (relatedTables.length - 1) * OFFSET;\r\n-            let startX = node_position.x - totalWidth / 2;\r\n+            let totalWidth = relatedTables.length * TABLE_WIDTH + (relatedTables.length - 1) * OFFSET;\r\n+            let startX = node_position+node_position.x - totalWidth / 2;\r\n     \r\n             // calculate new positions for related tables with adjusted x-position\r\n             for (let index in relatedTables) {\r\n                 let table_x = startX + index * (TABLE_WIDTH + OFFSET);\r\n"
                },
                {
                    "date": 1707034589839,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n         let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n     //debugger\r\n         if (relatedTables.length > 1) {\r\n             let totalWidth = relatedTables.length * TABLE_WIDTH + (relatedTables.length - 1) * OFFSET;\r\n-            let startX = node_position+node_position.x - totalWidth / 2;\r\n+            let startX = node_position.x+node_position.x - totalWidth / 2;\r\n     \r\n             // calculate new positions for related tables with adjusted x-position\r\n             for (let index in relatedTables) {\r\n                 let table_x = startX + index * (TABLE_WIDTH + OFFSET);\r\n"
                },
                {
                    "date": 1707034705705,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -128,9 +128,9 @@\n         let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n     //debugger\r\n         if (relatedTables.length > 1) {\r\n             let totalWidth = relatedTables.length * TABLE_WIDTH + (relatedTables.length - 1) * OFFSET;\r\n-            let startX = node_position.x+node_position.x - totalWidth / 2;\r\n+            let startX = node_position.x - totalWidth / 2;\r\n     \r\n             // calculate new positions for related tables with adjusted x-position\r\n             for (let index in relatedTables) {\r\n                 let table_x = startX + index * (TABLE_WIDTH + OFFSET);\r\n"
                },
                {
                    "date": 1707034833467,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -115,38 +115,42 @@\n     model.addAll(node1, node2, node3, link1, link2, table1, table2, table3,table4);\r\n     engine.setModel(model);\r\n \r\n     const NODE_HEIGHT = 50; // constant value for node height\r\n-    const OFFSET = 10; // constant value for space between tables\r\n-    const TABLE_WIDTH = 150; // estimated width of the table, adjust as needed\r\n-    \r\n-    for (let node of model.getNodes()) {\r\n-   \r\n-        // get position of node\r\n-        let node_position = node.getPosition();\r\n-    \r\n-        // get related tables\r\n-        let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n-    //debugger\r\n-        if (relatedTables.length > 1) {\r\n-            let totalWidth = relatedTables.length * TABLE_WIDTH + (relatedTables.length - 1) * OFFSET;\r\n-            let startX = node_position.x - totalWidth / 2;\r\n-    \r\n-            // calculate new positions for related tables with adjusted x-position\r\n-            for (let index in relatedTables) {\r\n-                let table_x = startX + index * (TABLE_WIDTH + OFFSET);\r\n-                let table_y = node_position.y + NODE_HEIGHT;\r\n-                relatedTables[index].setPosition(table_x, table_y);\r\n-            }\r\n-        } else {\r\n-            // calculate new positions for single or first table as before\r\n-            for (let index in relatedTables) {\r\n-                let table_x = node_position.x;\r\n-                let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n-                relatedTables[index].setPosition(table_x, table_y);\r\n-            }\r\n+const OFFSET = 10; // constant value for space between tables\r\n+const TABLE_WIDTH = 150; // estimated width of the table, adjust as needed\r\n+const NODE_WIDTH = 50; // estimated width of the node, adjust as needed\r\n+\r\n+for (let node of model.getNodes()) {\r\n+    console.log(node)\r\n+    // get position of node\r\n+    let node_position = node.getPosition();\r\n+\r\n+    // get related tables\r\n+    let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n+\r\n+    if (relatedTables.length > 1) {\r\n+        let totalWidth = relatedTables.length * TABLE_WIDTH + (relatedTables.length - 1) * OFFSET;\r\n+        // use the node position plus the node width divided by two as the starting point\r\n+        let startX = node_position.x + NODE_WIDTH / 2 - totalWidth / 2;\r\n+\r\n+        // calculate new positions for related tables with adjusted x-position\r\n+        for (let index in relatedTables) {\r\n+            let table_x = startX + index * (TABLE_WIDTH + OFFSET);\r\n+            let table_y = node_position.y + NODE_HEIGHT;\r\n+            relatedTables[index].setPosition(table_x, table_y);\r\n         }\r\n+    } else {\r\n+        // calculate new positions for single or first table as before\r\n+        for (let index in relatedTables) {\r\n+            // use the node position plus the node width divided by two as the x-position\r\n+            let table_x = node_position.x + NODE_WIDTH / 2;\r\n+            let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n+            relatedTables[index].setPosition(table_x, table_y);\r\n+        }\r\n     }\r\n+}\r\n+\r\n     \r\n \r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n"
                },
                {
                    "date": 1707034955629,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -43,14 +43,23 @@\n     value: 30,\r\n     cssClass: 'pentagon-node' \r\n });\r\n \r\n+const node4 = new TSCustomNodeModel({\r\n+  name: 'Node 1',\r\n+  color: 'rgb(221,192,255)',\r\n+  value: 4,\r\n+  cssClass: 'circle-node'\r\n+});\r\n+\r\n node1.setPosition(50, 50);\r\n node2.setPosition(200, 50);\r\n node3.setPosition(350, 50);\r\n+node4.setPosition(550, 50);\r\n \r\n const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n+const link3 = node3.getPort('OUT').link(node4.getPort('IN'));\r\n \r\n     // create some table objects with nodeId property\r\n     const table1 = new TableModel({\r\n       name: 'Table 1',\r\n"
                },
                {
                    "date": 1707034967375,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n       nodeId: node3.getID() // added prop\r\n     });\r\n \r\n     // add both the nodes and tables to the model\r\n-    model.addAll(node1, node2, node3, link1, link2, table1, table2, table3,table4);\r\n+    model.addAll(node1, node2, node3, node4,link1, link2, table1, table2, table3,table4);\r\n     engine.setModel(model);\r\n \r\n     const NODE_HEIGHT = 50; // constant value for node height\r\n const OFFSET = 10; // constant value for space between tables\r\n"
                },
                {
                    "date": 1707034977662,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -120,9 +120,9 @@\n       nodeId: node3.getID() // added prop\r\n     });\r\n \r\n     // add both the nodes and tables to the model\r\n-    model.addAll(node1, node2, node3, node4,link1, link2, table1, table2, table3,table4);\r\n+    model.addAll(node1, node2, node3, node4,link1, link2,link3, table1, table2, table3,table4);\r\n     engine.setModel(model);\r\n \r\n     const NODE_HEIGHT = 50; // constant value for node height\r\n const OFFSET = 10; // constant value for space between tables\r\n"
                },
                {
                    "date": 1707034994095,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,9 +116,9 @@\n       position: { x: 700, y: 150 }, // initial position\r\n       color: 'brown',\r\n       cssClass: 'table',\r\n       size: { width: 166, height: 200 },\r\n-      nodeId: node3.getID() // added prop\r\n+      nodeId: node4.getID() // added prop\r\n     });\r\n \r\n     // add both the nodes and tables to the model\r\n     model.addAll(node1, node2, node3, node4,link1, link2,link3, table1, table2, table3,table4);\r\n"
                },
                {
                    "date": 1707035019683,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -53,9 +53,9 @@\n \r\n node1.setPosition(50, 50);\r\n node2.setPosition(200, 50);\r\n node3.setPosition(350, 50);\r\n-node4.setPosition(550, 50);\r\n+node4.setPosition(550, 250);\r\n \r\n const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n const link3 = node3.getPort('OUT').link(node4.getPort('IN'));\r\n"
                },
                {
                    "date": 1707035048403,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -102,9 +102,9 @@\n       position: { x: 500, y: 150 }, // initial position\r\n       color: 'green',\r\n       cssClass: 'table',\r\n       size: { width: 166, height: 200 },\r\n-      nodeId: node3.getID() // added prop\r\n+      nodeId: node4.getID() // added prop\r\n     });\r\n       const table4 = new TableModel({\r\n       name: 'Table 4',\r\n       values: [\r\n"
                },
                {
                    "date": 1707035100913,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -118,8 +118,22 @@\n       cssClass: 'table',\r\n       size: { width: 166, height: 200 },\r\n       nodeId: node4.getID() // added prop\r\n     });\r\n+       const table5 = new TableModel({\r\n+      name: 'Table 5',\r\n+      values: [\r\n+        ['uiy', 'ww', 'sqqw'],\r\n+        ['ss', 1, 10],\r\n+        ['cc', 0.5, 20],\r\n+        ['ee', 0.2, 30]\r\n+      ],\r\n+      position: { x: 700, y: 150 }, // initial position\r\n+      color: 'brown',\r\n+      cssClass: 'table',\r\n+      size: { width: 166, height: 200 },\r\n+      nodeId: node4.getID() // added prop\r\n+    });\r\n \r\n     // add both the nodes and tables to the model\r\n     model.addAll(node1, node2, node3, node4,link1, link2,link3, table1, table2, table3,table4);\r\n     engine.setModel(model);\r\n"
                },
                {
                    "date": 1707035119890,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -134,9 +134,13 @@\n       nodeId: node4.getID() // added prop\r\n     });\r\n \r\n     // add both the nodes and tables to the model\r\n-    model.addAll(node1, node2, node3, node4,link1, link2,link3, table1, table2, table3,table4);\r\n+    model.addAll(\r\n+      node1, node2, node3, node4,\r\n+      link1, link2,link3, \r\n+      table1, table2, table3,table4,table5\r\n+      );\r\n     engine.setModel(model);\r\n \r\n     const NODE_HEIGHT = 50; // constant value for node height\r\n const OFFSET = 10; // constant value for space between tables\r\n"
                },
                {
                    "date": 1707036045545,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,11 +135,11 @@\n     });\r\n \r\n     // add both the nodes and tables to the model\r\n     model.addAll(\r\n-      node1, node2, node3, node4,\r\n-      link1, link2,link3, \r\n-      table1, table2, table3,table4,table5\r\n+      node1, //node2, node3, node4,\r\n+      link1, link2,//link3, \r\n+      table1//, table2, table3,table4,table5\r\n       );\r\n     engine.setModel(model);\r\n \r\n     const NODE_HEIGHT = 50; // constant value for node height\r\n"
                },
                {
                    "date": 1707036069903,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -135,9 +135,9 @@\n     });\r\n \r\n     // add both the nodes and tables to the model\r\n     model.addAll(\r\n-      node1, //node2, node3, node4,\r\n+      node1, node2,// node3, node4,\r\n       link1, link2,//link3, \r\n       table1//, table2, table3,table4,table5\r\n       );\r\n     engine.setModel(model);\r\n"
                },
                {
                    "date": 1707037229462,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import { TableFactory } from './7';\r\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n import './style.css'; \r\n+import { SVGFactory } from './11';\r\n \r\n const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n \r\n@@ -19,9 +20,11 @@\n   useEffect(() => {\r\n     // register both the node and table factories with the engine\r\n     engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n     engine.getNodeFactories().registerFactory(new TableFactory());\r\n+    engine.getNodeFactories().registerFactory(new SVGFactory()); // new factory\r\n \r\n+\r\n     // create some custom nodes\r\n    // create some custom nodes\r\n    const node1 = new TSCustomNodeModel({\r\n     name: 'Node 1',\r\n"
                },
                {
                    "date": 1707037296084,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -136,13 +136,40 @@\n       size: { width: 166, height: 200 },\r\n       nodeId: node4.getID() // added prop\r\n     });\r\n \r\n+\r\n+\r\n+\r\n+    // create some svg objects with nodeId property\r\n+    const svg1 = new SVGModel({\r\n+      id: 'svg1',\r\n+      position: 'middle-below', // relative position\r\n+      filePath: 'path/to/svg1.svg', // file path to svg graphic\r\n+      nodeId: node1.getID() // added prop\r\n+    });\r\n+\r\n+    const svg2 = new SVGModel({\r\n+      id: 'svg2',\r\n+      position: 'middle-left', // relative position\r\n+      filePath: 'path/to/svg2.svg', // file path to svg graphic\r\n+      nodeId: node1.getID() // added prop\r\n+    });\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n+\r\n     // add both the nodes and tables to the model\r\n     model.addAll(\r\n       node1, node2,// node3, node4,\r\n       link1, link2,//link3, \r\n       table1//, table2, table3,table4,table5\r\n+      ,svg1,svg2\r\n       );\r\n     engine.setModel(model);\r\n \r\n     const NODE_HEIGHT = 50; // constant value for node height\r\n"
                },
                {
                    "date": 1707037344089,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,8 +9,9 @@\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n import './style.css'; \r\n import { SVGFactory } from './11';\r\n+import { SVGModel } from './10';\r\n \r\n const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n \r\n"
                },
                {
                    "date": 1707037557804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -148,14 +148,14 @@\n       filePath: 'path/to/svg1.svg', // file path to svg graphic\r\n       nodeId: node1.getID() // added prop\r\n     });\r\n \r\n-    const svg2 = new SVGModel({\r\n-      id: 'svg2',\r\n-      position: 'middle-left', // relative position\r\n-      filePath: 'path/to/svg2.svg', // file path to svg graphic\r\n-      nodeId: node1.getID() // added prop\r\n-    });\r\n+    // const svg2 = new SVGModel({\r\n+    //   id: 'svg2',\r\n+    //   position: 'middle-left', // relative position\r\n+    //   filePath: 'path/to/svg2.svg', // file path to svg graphic\r\n+    //   nodeId: node1.getID() // added prop\r\n+    // });\r\n \r\n \r\n \r\n \r\n"
                },
                {
                    "date": 1707037572040,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n     model.addAll(\r\n       node1, node2,// node3, node4,\r\n       link1, link2,//link3, \r\n       table1//, table2, table3,table4,table5\r\n-      ,svg1,svg2\r\n+      ,svg1\r\n       );\r\n     engine.setModel(model);\r\n \r\n     const NODE_HEIGHT = 50; // constant value for node height\r\n"
                },
                {
                    "date": 1707037586712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -168,9 +168,9 @@\n     model.addAll(\r\n       node1, node2,// node3, node4,\r\n       link1, link2,//link3, \r\n       table1//, table2, table3,table4,table5\r\n-      ,svg1\r\n+      \r\n       );\r\n     engine.setModel(model);\r\n \r\n     const NODE_HEIGHT = 50; // constant value for node height\r\n"
                },
                {
                    "date": 1707037666577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n     // create some svg objects with nodeId property\r\n     const svg1 = new SVGModel({\r\n       id: 'svg1',\r\n       position: 'middle-below', // relative position\r\n-      filePath: 'path/to/svg1.svg', // file path to svg graphic\r\n+      filePath: '/AJ_Digital_Camera.svg', // file path to svg graphic\r\n       nodeId: node1.getID() // added prop\r\n     });\r\n \r\n     // const svg2 = new SVGModel({\r\n@@ -168,9 +168,9 @@\n     model.addAll(\r\n       node1, node2,// node3, node4,\r\n       link1, link2,//link3, \r\n       table1//, table2, table3,table4,table5\r\n-      \r\n+      ,svg1\r\n       );\r\n     engine.setModel(model);\r\n \r\n     const NODE_HEIGHT = 50; // constant value for node height\r\n"
                },
                {
                    "date": 1707037677352,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n     // create some svg objects with nodeId property\r\n     const svg1 = new SVGModel({\r\n       id: 'svg1',\r\n       position: 'middle-below', // relative position\r\n-      filePath: '/AJ_Digital_Camera.svg', // file path to svg graphic\r\n+      filePath: 'AJ_Digital_Camera.svg', // file path to svg graphic\r\n       nodeId: node1.getID() // added prop\r\n     });\r\n \r\n     // const svg2 = new SVGModel({\r\n"
                },
                {
                    "date": 1707037684944,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,9 +144,9 @@\n     // create some svg objects with nodeId property\r\n     const svg1 = new SVGModel({\r\n       id: 'svg1',\r\n       position: 'middle-below', // relative position\r\n-      filePath: 'AJ_Digital_Camera.svg', // file path to svg graphic\r\n+      filePath: './AJ_Digital_Camera.svg', // file path to svg graphic\r\n       nodeId: node1.getID() // added prop\r\n     });\r\n \r\n     // const svg2 = new SVGModel({\r\n"
                },
                {
                    "date": 1707037724113,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -142,8 +142,9 @@\n \r\n \r\n     // create some svg objects with nodeId property\r\n     const svg1 = new SVGModel({\r\n+      name: 'Tsvg1',\r\n       id: 'svg1',\r\n       position: 'middle-below', // relative position\r\n       filePath: './AJ_Digital_Camera.svg', // file path to svg graphic\r\n       nodeId: node1.getID() // added prop\r\n"
                },
                {
                    "date": 1707038259853,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n import './style.css'; \r\n import { SVGFactory } from './11';\r\n-import { SVGModel } from './10';\r\n+import { TSCustomNodeModel2 } from './10';\r\n \r\n const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n \r\n"
                },
                {
                    "date": 1707038267257,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -141,9 +141,9 @@\n \r\n \r\n \r\n     // create some svg objects with nodeId property\r\n-    const svg1 = new SVGModel({\r\n+    const svg1 = new TSCustomNodeModel2({\r\n       name: 'Tsvg1',\r\n       id: 'svg1',\r\n       position: 'middle-below', // relative position\r\n       filePath: './AJ_Digital_Camera.svg', // file path to svg graphic\r\n"
                },
                {
                    "date": 1707038693190,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,9 +8,9 @@\n import { TableFactory } from './7';\r\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n import './style.css'; \r\n-import { SVGFactory } from './11';\r\n+\r\n import { TSCustomNodeModel2 } from './10';\r\n \r\n const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n"
                },
                {
                    "date": 1707038707144,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,8 +10,9 @@\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n import './style.css'; \r\n \r\n import { TSCustomNodeModel2 } from './10';\r\n+import { TSCustomNodeFactory2 } from './11';\r\n \r\n const DiagramM = () => {\r\n   const [engine, setEngine] = useState(createEngine());\r\n \r\n@@ -19,9 +20,9 @@\n   const [modelHadset, setmodelHadset] = useState(false);\r\n   // use useEffect hook to initialize the engine and model\r\n   useEffect(() => {\r\n     // register both the node and table factories with the engine\r\n-    engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n+    engine.getNodeFactories().registerFactory(new TSCustomNodeFactory2());\r\n     engine.getNodeFactories().registerFactory(new TableFactory());\r\n     engine.getNodeFactories().registerFactory(new SVGFactory()); // new factory\r\n \r\n \r\n"
                },
                {
                    "date": 1707038892026,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -22,9 +22,9 @@\n   useEffect(() => {\r\n     // register both the node and table factories with the engine\r\n     engine.getNodeFactories().registerFactory(new TSCustomNodeFactory2());\r\n     engine.getNodeFactories().registerFactory(new TableFactory());\r\n-    engine.getNodeFactories().registerFactory(new SVGFactory()); // new factory\r\n+    engine.getNodeFactories().registerFactory(new TSCustomNodeFactory2()); // new factory\r\n \r\n \r\n     // create some custom nodes\r\n    // create some custom nodes\r\n"
                },
                {
                    "date": 1707038937344,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,9 @@\n import { TableFactory } from './7';\r\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n import './style.css'; \r\n+import './style2.css'; \r\n \r\n import { TSCustomNodeModel2 } from './10';\r\n import { TSCustomNodeFactory2 } from './11';\r\n \r\n"
                },
                {
                    "date": 1707039094464,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -144,13 +144,12 @@\n \r\n \r\n     // create some svg objects with nodeId property\r\n     const svg1 = new TSCustomNodeModel2({\r\n-      name: 'Tsvg1',\r\n-      id: 'svg1',\r\n-      position: 'middle-below', // relative position\r\n-      filePath: './AJ_Digital_Camera.svg', // file path to svg graphic\r\n-      nodeId: node1.getID() // added prop\r\n+      name: 'svg 1',\r\n+      color: 'rgb(0,192,255)',\r\n+      value: 15765,\r\n+      cssClass: 'custom-node-color-2'\r\n     });\r\n \r\n     // const svg2 = new SVGModel({\r\n     //   id: 'svg2',\r\n"
                },
                {
                    "date": 1707039154131,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n     // create some svg objects with nodeId property\r\n     const svg1 = new TSCustomNodeModel2({\r\n       name: 'svg 1',\r\n       color: 'rgb(0,192,255)',\r\n-      value: 15765,\r\n+      //value: 15765,\r\n       cssClass: 'custom-node-color-2'\r\n     });\r\n \r\n     // const svg2 = new SVGModel({\r\n"
                },
                {
                    "date": 1707039269651,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -145,9 +145,8 @@\n \r\n     // create some svg objects with nodeId property\r\n     const svg1 = new TSCustomNodeModel2({\r\n       name: 'svg 1',\r\n-      color: 'rgb(0,192,255)',\r\n       //value: 15765,\r\n       cssClass: 'custom-node-color-2'\r\n     });\r\n \r\n"
                },
                {
                    "date": 1707039695287,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -7,10 +7,10 @@\n import { TSCustomNodeModel } from './TSCustomNodeModel';\r\n import { TableFactory } from './7';\r\n import { TableModel } from './5';\r\n import { DemoCanvasWidget } from './DemoCanvasWidget';\r\n-import './style.css'; \r\n-import './style2.css'; \r\n+import './style.css';\r\n+import './style2.css';\r\n \r\n import { TSCustomNodeModel2 } from './10';\r\n import { TSCustomNodeFactory2 } from './11';\r\n \r\n@@ -27,45 +27,45 @@\n     engine.getNodeFactories().registerFactory(new TSCustomNodeFactory2()); // new factory\r\n \r\n \r\n     // create some custom nodes\r\n-   // create some custom nodes\r\n-   const node1 = new TSCustomNodeModel({\r\n-    name: 'Node 1',\r\n-    color: 'rgb(0,192,255)',\r\n-    value: 1,\r\n-    cssClass: 'circle-node'\r\n-});\r\n+    // create some custom nodes\r\n+    const node1 = new TSCustomNodeModel({\r\n+      name: 'Node 1',\r\n+      color: 'rgb(0,192,255)',\r\n+      value: 1,\r\n+      cssClass: 'circle-node'\r\n+    });\r\n \r\n-const node2 = new TSCustomNodeModel({\r\n-    name: 'Node 2',\r\n-    color: 'rgb(255,255,0)',\r\n-    value: 20,\r\n-    cssClass: 'triangle-node' \r\n-});\r\n+    const node2 = new TSCustomNodeModel({\r\n+      name: 'Node 2',\r\n+      color: 'rgb(255,255,0)',\r\n+      value: 20,\r\n+      cssClass: 'triangle-node'\r\n+    });\r\n \r\n-const node3 = new TSCustomNodeModel({\r\n-    name: 'Node 3',\r\n-    color: 'rgb(192,255,0)',\r\n-    value: 30,\r\n-    cssClass: 'pentagon-node' \r\n-});\r\n+    const node3 = new TSCustomNodeModel({\r\n+      name: 'Node 3',\r\n+      color: 'rgb(192,255,0)',\r\n+      value: 30,\r\n+      cssClass: 'pentagon-node'\r\n+    });\r\n \r\n-const node4 = new TSCustomNodeModel({\r\n-  name: 'Node 1',\r\n-  color: 'rgb(221,192,255)',\r\n-  value: 4,\r\n-  cssClass: 'circle-node'\r\n-});\r\n+    const node4 = new TSCustomNodeModel({\r\n+      name: 'Node 1',\r\n+      color: 'rgb(221,192,255)',\r\n+      value: 4,\r\n+      cssClass: 'circle-node'\r\n+    });\r\n \r\n-node1.setPosition(50, 50);\r\n-node2.setPosition(200, 50);\r\n-node3.setPosition(350, 50);\r\n-node4.setPosition(550, 250);\r\n+    node1.setPosition(50, 50);\r\n+    node2.setPosition(200, 50);\r\n+    node3.setPosition(350, 50);\r\n+    node4.setPosition(550, 250);\r\n \r\n-const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n-const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n-const link3 = node3.getPort('OUT').link(node4.getPort('IN'));\r\n+    const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n+    const link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n+    const link3 = node3.getPort('OUT').link(node4.getPort('IN'));\r\n \r\n     // create some table objects with nodeId property\r\n     const table1 = new TableModel({\r\n       name: 'Table 1',\r\n@@ -110,9 +110,9 @@\n       cssClass: 'table',\r\n       size: { width: 166, height: 200 },\r\n       nodeId: node4.getID() // added prop\r\n     });\r\n-      const table4 = new TableModel({\r\n+    const table4 = new TableModel({\r\n       name: 'Table 4',\r\n       values: [\r\n         ['aaa', 'bbb', 'ccc'],\r\n         ['yazd', 1, 10],\r\n@@ -124,9 +124,9 @@\n       cssClass: 'table',\r\n       size: { width: 166, height: 200 },\r\n       nodeId: node4.getID() // added prop\r\n     });\r\n-       const table5 = new TableModel({\r\n+    const table5 = new TableModel({\r\n       name: 'Table 5',\r\n       values: [\r\n         ['uiy', 'ww', 'sqqw'],\r\n         ['ss', 1, 10],\r\n@@ -169,49 +169,60 @@\n     model.addAll(\r\n       node1, node2,// node3, node4,\r\n       link1, link2,//link3, \r\n       table1//, table2, table3,table4,table5\r\n-      ,svg1\r\n-      );\r\n+      , svg1\r\n+    );\r\n     engine.setModel(model);\r\n \r\n-    const NODE_HEIGHT = 50; // constant value for node height\r\n-const OFFSET = 10; // constant value for space between tables\r\n-const TABLE_WIDTH = 150; // estimated width of the table, adjust as needed\r\n-const NODE_WIDTH = 50; // estimated width of the node, adjust as needed\r\n \r\n-for (let node of model.getNodes()) {\r\n-    console.log(node)\r\n-    // get position of node\r\n-    let node_position = node.getPosition();\r\n+   // calculate the position of each node and then set the position of related tables and svgs accordingly\r\n+   const NODE_HEIGHT = 50; // constant value for node height\r\n+   const OFFSET = 10; // constant value for space between tables and svgs\r\n+   const TABLE_WIDTH = 150; // estimated width of the table, adjust as needed\r\n+   const NODE_WIDTH = 50; // estimated width of the node, adjust as needed\r\n+   const SVG_WIDTH = 50; // estimated width of the svg, adjust as needed\r\n+   const SVG_HEIGHT = 50; // estimated height of the svg, adjust as needed\r\n \r\n-    // get related tables\r\n-    let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n+   for (let node of model.getNodes()) {\r\n+     console.log(node)\r\n+     // get position of node\r\n+     let node_position = node.getPosition();\r\n \r\n-    if (relatedTables.length > 1) {\r\n-        let totalWidth = relatedTables.length * TABLE_WIDTH + (relatedTables.length - 1) * OFFSET;\r\n-        // use the node position plus the node width divided by two as the starting point\r\n-        let startX = node_position.x + NODE_WIDTH / 2 - totalWidth / 2;\r\n+     // get related tables\r\n+     let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n \r\n-        // calculate new positions for related tables with adjusted x-position\r\n-        for (let index in relatedTables) {\r\n-            let table_x = startX + index * (TABLE_WIDTH + OFFSET);\r\n-            let table_y = node_position.y + NODE_HEIGHT;\r\n-            relatedTables[index].setPosition(table_x, table_y);\r\n-        }\r\n-    } else {\r\n-        // calculate new positions for single or first table as before\r\n-        for (let index in relatedTables) {\r\n-            // use the node position plus the node width divided by two as the x-position\r\n-            let table_x = node_position.x + NODE_WIDTH / 2;\r\n-            let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n-            relatedTables[index].setPosition(table_x, table_y);\r\n-        }\r\n+     // calculate new positions for related tables\r\n+     for (let index in relatedTables) {\r\n+       // use the node position plus the node width divided by two as the x-position\r\n+       let table_x = node_position.x + NODE_WIDTH / 2;\r\n+       let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n+       relatedTables[index].setPosition(table_x, table_y);\r\n+     }\r\n+\r\n+     // get related svgs\r\n+     let relatedSVGs = model.getModels().filter(model => model instanceof SVGModel && model.options.nodeId === node.getID());\r\n+\r\n+     // calculate new positions for related svgs\r\n+     for (let svg of relatedSVGs) {\r\n+       // use the relative position to determine the x and y position\r\n+       let svg_x, svg_y;\r\n+       switch (svg.options.position) {\r\n+         case 'middle-below':\r\n+           svg_x = node_position.x + NODE_WIDTH / 2 - SVG_WIDTH / 2;\r\n+           svg_y = node_position.y + NODE_HEIGHT;\r\n+           break;\r\n+         case 'middle-left':\r\n+           svg_x = node_position.x - SVG_WIDTH;\r\n+           svg_y = node_position.y + NODE_HEIGHT / 2 - SVG_HEIGHT / 2;\r\n+           break;\r\n+         // add more cases for other relative positions as needed\r\n+       }\r\n+       // set new position for svg\r\n+       svg.setPosition(svg_x, svg_y);\r\n+     }\r\n     }\r\n-}\r\n \r\n-    \r\n-\r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n   }, [modelHadset]);\r\n \r\n"
                },
                {
                    "date": 1707039742634,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n        relatedTables[index].setPosition(table_x, table_y);\r\n      }\r\n \r\n      // get related svgs\r\n-     let relatedSVGs = model.getModels().filter(model => model instanceof SVGModel && model.options.nodeId === node.getID());\r\n+     let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeModel2 && model.options.nodeId === node.getID());\r\n \r\n      // calculate new positions for related svgs\r\n      for (let svg of relatedSVGs) {\r\n        // use the relative position to determine the x and y position\r\n"
                },
                {
                    "date": 1707039781270,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,30 +198,9 @@\n        let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n        relatedTables[index].setPosition(table_x, table_y);\r\n      }\r\n \r\n-     // get related svgs\r\n-     let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeModel2 && model.options.nodeId === node.getID());\r\n \r\n-     // calculate new positions for related svgs\r\n-     for (let svg of relatedSVGs) {\r\n-       // use the relative position to determine the x and y position\r\n-       let svg_x, svg_y;\r\n-       switch (svg.options.position) {\r\n-         case 'middle-below':\r\n-           svg_x = node_position.x + NODE_WIDTH / 2 - SVG_WIDTH / 2;\r\n-           svg_y = node_position.y + NODE_HEIGHT;\r\n-           break;\r\n-         case 'middle-left':\r\n-           svg_x = node_position.x - SVG_WIDTH;\r\n-           svg_y = node_position.y + NODE_HEIGHT / 2 - SVG_HEIGHT / 2;\r\n-           break;\r\n-         // add more cases for other relative positions as needed\r\n-       }\r\n-       // set new position for svg\r\n-       svg.setPosition(svg_x, svg_y);\r\n-     }\r\n-    }\r\n \r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n   }, [modelHadset]);\r\n"
                },
                {
                    "date": 1707039788696,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -198,10 +198,10 @@\n        let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n        relatedTables[index].setPosition(table_x, table_y);\r\n      }\r\n \r\n+    }\r\n \r\n-\r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n   }, [modelHadset]);\r\n \r\n"
                },
                {
                    "date": 1707039809526,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,9 +21,9 @@\n   const [modelHadset, setmodelHadset] = useState(false);\r\n   // use useEffect hook to initialize the engine and model\r\n   useEffect(() => {\r\n     // register both the node and table factories with the engine\r\n-    engine.getNodeFactories().registerFactory(new TSCustomNodeFactory2());\r\n+    engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n     engine.getNodeFactories().registerFactory(new TableFactory());\r\n     engine.getNodeFactories().registerFactory(new TSCustomNodeFactory2()); // new factory\r\n \r\n \r\n@@ -198,8 +198,29 @@\n        let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n        relatedTables[index].setPosition(table_x, table_y);\r\n      }\r\n \r\n+     // get related svgs\r\n+     let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeModel2 && model.options.nodeId === node.getID());\r\n+\r\n+     // calculate new positions for related svgs\r\n+     for (let svg of relatedSVGs) {\r\n+       // use the relative position to determine the x and y position\r\n+       let svg_x, svg_y;\r\n+       switch (svg.options.position) {\r\n+         case 'middle-below':\r\n+           svg_x = node_position.x + NODE_WIDTH / 2 - SVG_WIDTH / 2;\r\n+           svg_y = node_position.y + NODE_HEIGHT;\r\n+           break;\r\n+         case 'middle-left':\r\n+           svg_x = node_position.x - SVG_WIDTH;\r\n+           svg_y = node_position.y + NODE_HEIGHT / 2 - SVG_HEIGHT / 2;\r\n+           break;\r\n+         // add more cases for other relative positions as needed\r\n+       }\r\n+       // set new position for svg\r\n+       svg.setPosition(svg_x, svg_y);\r\n+     }\r\n     }\r\n \r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n"
                },
                {
                    "date": 1707039857353,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   useEffect(() => {\r\n     // register both the node and table factories with the engine\r\n     engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n     engine.getNodeFactories().registerFactory(new TableFactory());\r\n-    engine.getNodeFactories().registerFactory(new TSCustomNodeFactory2()); // new factory\r\n+    //engine.getNodeFactories().registerFactory(new TSCustomNodeFactory2()); // new factory\r\n \r\n \r\n     // create some custom nodes\r\n     // create some custom nodes\r\n"
                },
                {
                    "date": 1707039884452,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -23,9 +23,9 @@\n   useEffect(() => {\r\n     // register both the node and table factories with the engine\r\n     engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n     engine.getNodeFactories().registerFactory(new TableFactory());\r\n-    //engine.getNodeFactories().registerFactory(new TSCustomNodeFactory2()); // new factory\r\n+    engine.getNodeFactories().registerFactory(new TSCustomNodeFactory2()); // new factory\r\n \r\n \r\n     // create some custom nodes\r\n     // create some custom nodes\r\n"
                },
                {
                    "date": 1707039936447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -174,53 +174,53 @@\n     );\r\n     engine.setModel(model);\r\n \r\n \r\n-   // calculate the position of each node and then set the position of related tables and svgs accordingly\r\n-   const NODE_HEIGHT = 50; // constant value for node height\r\n-   const OFFSET = 10; // constant value for space between tables and svgs\r\n-   const TABLE_WIDTH = 150; // estimated width of the table, adjust as needed\r\n-   const NODE_WIDTH = 50; // estimated width of the node, adjust as needed\r\n-   const SVG_WIDTH = 50; // estimated width of the svg, adjust as needed\r\n-   const SVG_HEIGHT = 50; // estimated height of the svg, adjust as needed\r\n+    // calculate the position of each node and then set the position of related tables and svgs accordingly\r\n+    const NODE_HEIGHT = 50; // constant value for node height\r\n+    const OFFSET = 10; // constant value for space between tables and svgs\r\n+    const TABLE_WIDTH = 150; // estimated width of the table, adjust as needed\r\n+    const NODE_WIDTH = 50; // estimated width of the node, adjust as needed\r\n+    const SVG_WIDTH = 50; // estimated width of the svg, adjust as needed\r\n+    const SVG_HEIGHT = 50; // estimated height of the svg, adjust as needed\r\n \r\n-   for (let node of model.getNodes()) {\r\n-     console.log(node)\r\n-     // get position of node\r\n-     let node_position = node.getPosition();\r\n+    for (let node of model.getNodes()) {\r\n+      console.log(node)\r\n+      // get position of node\r\n+      let node_position = node.getPosition();\r\n \r\n-     // get related tables\r\n-     let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n+      // get related tables\r\n+      let relatedTables = model.getModels().filter(model => model instanceof TableModel && model.options.nodeId === node.getID());\r\n \r\n-     // calculate new positions for related tables\r\n-     for (let index in relatedTables) {\r\n-       // use the node position plus the node width divided by two as the x-position\r\n-       let table_x = node_position.x + NODE_WIDTH / 2;\r\n-       let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n-       relatedTables[index].setPosition(table_x, table_y);\r\n-     }\r\n+      // calculate new positions for related tables\r\n+      for (let index in relatedTables) {\r\n+        // use the node position plus the node width divided by two as the x-position\r\n+        let table_x = node_position.x + NODE_WIDTH / 2;\r\n+        let table_y = node_position.y + (index * OFFSET) + NODE_HEIGHT;\r\n+        relatedTables[index].setPosition(table_x, table_y);\r\n+      }\r\n \r\n-     // get related svgs\r\n-     let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeModel2 && model.options.nodeId === node.getID());\r\n+      // get related svgs\r\n+      let relatedSVGs = model.getModels().filter(model => model instanceof SVGModel && model.options.nodeId === node.getID());\r\n \r\n-     // calculate new positions for related svgs\r\n-     for (let svg of relatedSVGs) {\r\n-       // use the relative position to determine the x and y position\r\n-       let svg_x, svg_y;\r\n-       switch (svg.options.position) {\r\n-         case 'middle-below':\r\n-           svg_x = node_position.x + NODE_WIDTH / 2 - SVG_WIDTH / 2;\r\n-           svg_y = node_position.y + NODE_HEIGHT;\r\n-           break;\r\n-         case 'middle-left':\r\n-           svg_x = node_position.x - SVG_WIDTH;\r\n-           svg_y = node_position.y + NODE_HEIGHT / 2 - SVG_HEIGHT / 2;\r\n-           break;\r\n-         // add more cases for other relative positions as needed\r\n-       }\r\n-       // set new position for svg\r\n-       svg.setPosition(svg_x, svg_y);\r\n-     }\r\n+      // calculate new positions for related svgs\r\n+      for (let svg of relatedSVGs) {\r\n+        // use the relative position to determine the x and y position\r\n+        let svg_x, svg_y;\r\n+        switch (svg.options.position) {\r\n+          case 'middle-below':\r\n+            svg_x = node_position.x + NODE_WIDTH / 2 - SVG_WIDTH / 2;\r\n+            svg_y = node_position.y + NODE_HEIGHT;\r\n+            break;\r\n+          case 'middle-left':\r\n+            svg_x = node_position.x - SVG_WIDTH;\r\n+            svg_y = node_position.y + NODE_HEIGHT / 2 - SVG_HEIGHT / 2;\r\n+            break;\r\n+          // add more cases for other relative positions as needed\r\n+        }\r\n+        // set new position for svg\r\n+        svg.setPosition(svg_x, svg_y);\r\n+      }\r\n     }\r\n \r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n"
                },
                {
                    "date": 1707039954090,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -199,9 +199,9 @@\n         relatedTables[index].setPosition(table_x, table_y);\r\n       }\r\n \r\n       // get related svgs\r\n-      let relatedSVGs = model.getModels().filter(model => model instanceof SVGModel && model.options.nodeId === node.getID());\r\n+      let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeFactory2 && model.options.nodeId === node.getID());\r\n \r\n       // calculate new positions for related svgs\r\n       for (let svg of relatedSVGs) {\r\n         // use the relative position to determine the x and y position\r\n"
                },
                {
                    "date": 1707039987410,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,10 @@\n     // create some svg objects with nodeId property\r\n     const svg1 = new TSCustomNodeModel2({\r\n       name: 'svg 1',\r\n       //value: 15765,\r\n-      cssClass: 'custom-node-color-2'\r\n+      cssClass: 'custom-node-color-2',\r\n+         nodeId: node4.getID()\r\n     });\r\n \r\n     // const svg2 = new SVGModel({\r\n     //   id: 'svg2',\r\n"
                },
                {
                    "date": 1707039996348,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,9 +147,9 @@\n     const svg1 = new TSCustomNodeModel2({\r\n       name: 'svg 1',\r\n       //value: 15765,\r\n       cssClass: 'custom-node-color-2',\r\n-         nodeId: node4.getID()\r\n+         nodeId: node1.getID()\r\n     });\r\n \r\n     // const svg2 = new SVGModel({\r\n     //   id: 'svg2',\r\n"
                },
                {
                    "date": 1707040282871,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,8 +204,9 @@\n       let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeFactory2 && model.options.nodeId === node.getID());\r\n \r\n       // calculate new positions for related svgs\r\n       for (let svg of relatedSVGs) {\r\n+        debugger;\r\n         // use the relative position to determine the x and y position\r\n         let svg_x, svg_y;\r\n         switch (svg.options.position) {\r\n           case 'middle-below':\r\n"
                },
                {
                    "date": 1707040323889,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -200,13 +200,13 @@\n         relatedTables[index].setPosition(table_x, table_y);\r\n       }\r\n \r\n       // get related svgs\r\n-      let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeFactory2 && model.options.nodeId === node.getID());\r\n+      let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeModel2 && model.options.nodeId === node.getID());\r\n \r\n       // calculate new positions for related svgs\r\n       for (let svg of relatedSVGs) {\r\n-        debugger;\r\n+\r\n         // use the relative position to determine the x and y position\r\n         let svg_x, svg_y;\r\n         switch (svg.options.position) {\r\n           case 'middle-below':\r\n"
                },
                {
                    "date": 1707040335062,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -204,9 +204,9 @@\n       let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeModel2 && model.options.nodeId === node.getID());\r\n \r\n       // calculate new positions for related svgs\r\n       for (let svg of relatedSVGs) {\r\n-\r\n+debugger;\r\n         // use the relative position to determine the x and y position\r\n         let svg_x, svg_y;\r\n         switch (svg.options.position) {\r\n           case 'middle-below':\r\n"
                },
                {
                    "date": 1707040530797,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -147,8 +147,9 @@\n     const svg1 = new TSCustomNodeModel2({\r\n       name: 'svg 1',\r\n       //value: 15765,\r\n       cssClass: 'custom-node-color-2',\r\n+      position:'middle-below',\r\n          nodeId: node1.getID()\r\n     });\r\n \r\n     // const svg2 = new SVGModel({\r\n"
                },
                {
                    "date": 1707043319822,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -205,9 +205,8 @@\n       let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeModel2 && model.options.nodeId === node.getID());\r\n \r\n       // calculate new positions for related svgs\r\n       for (let svg of relatedSVGs) {\r\n-debugger;\r\n         // use the relative position to determine the x and y position\r\n         let svg_x, svg_y;\r\n         switch (svg.options.position) {\r\n           case 'middle-below':\r\n"
                },
                {
                    "date": 1707044041718,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n     // create some svg objects with nodeId property\r\n     const svg1 = new TSCustomNodeModel2({\r\n       name: 'svg 1',\r\n       //value: 15765,\r\n-      cssClass: 'custom-node-color-2',\r\n+      cssClass: 'arrow-1',\r\n       position:'middle-below',\r\n          nodeId: node1.getID()\r\n     });\r\n \r\n"
                },
                {
                    "date": 1707046453704,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,8 +202,10 @@\n       }\r\n \r\n       // get related svgs\r\n       let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeModel2 && model.options.nodeId === node.getID());\r\n+       let nodeSpec = model.getModels().filter(model => model instanceof TSCustomNodeModel && model.options.nodeId ===relatedSVGs);\r\n+       console.log(\"nodeSpec\"+nodeSpec)\r\n \r\n       // calculate new positions for related svgs\r\n       for (let svg of relatedSVGs) {\r\n         // use the relative position to determine the x and y position\r\n"
                },
                {
                    "date": 1707046465147,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -203,9 +203,9 @@\n \r\n       // get related svgs\r\n       let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeModel2 && model.options.nodeId === node.getID());\r\n        let nodeSpec = model.getModels().filter(model => model instanceof TSCustomNodeModel && model.options.nodeId ===relatedSVGs);\r\n-       console.log(\"nodeSpec\"+nodeSpec)\r\n+       console.log(\"nodeSpec\"+nodeSpec+ \"a\")\r\n \r\n       // calculate new positions for related svgs\r\n       for (let svg of relatedSVGs) {\r\n         // use the relative position to determine the x and y position\r\n"
                },
                {
                    "date": 1707046501927,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n       }\r\n \r\n       // get related svgs\r\n       let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeModel2 && model.options.nodeId === node.getID());\r\n-       let nodeSpec = model.getModels().filter(model => model instanceof TSCustomNodeModel && model.options.nodeId ===relatedSVGs);\r\n+       let nodeSpec = model.getModels().filter(model => model instanceof TSCustomNodeModel && model.options.nodeId === node.getID());\r\n        console.log(\"nodeSpec\"+nodeSpec+ \"a\")\r\n \r\n       // calculate new positions for related svgs\r\n       for (let svg of relatedSVGs) {\r\n"
                },
                {
                    "date": 1707046536003,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n       }\r\n \r\n       // get related svgs\r\n       let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeModel2 && model.options.nodeId === node.getID());\r\n-       let nodeSpec = model.getModels().filter(model => model instanceof TSCustomNodeModel && model.options.nodeId === node.getID());\r\n+       let nodeSpec = model.getModels().filter(model => model instanceof TSCustomNodeModel && model.options.nodeId ===relatedSVGs);\r\n        console.log(\"nodeSpec\"+nodeSpec+ \"a\")\r\n \r\n       // calculate new positions for related svgs\r\n       for (let svg of relatedSVGs) {\r\n"
                },
                {
                    "date": 1707046575712,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,9 +202,9 @@\n       }\r\n \r\n       // get related svgs\r\n       let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeModel2 && model.options.nodeId === node.getID());\r\n-       let nodeSpec = model.getModels().filter(model => model instanceof TSCustomNodeModel && model.options.nodeId ===relatedSVGs);\r\n+       let nodeSpec = model.getModels().filter(model => model instanceof TSCustomNodeModel && model.options.nodeId ===node.getID()));\r\n        console.log(\"nodeSpec\"+nodeSpec+ \"a\")\r\n \r\n       // calculate new positions for related svgs\r\n       for (let svg of relatedSVGs) {\r\n"
                },
                {
                    "date": 1707046616061,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -202,10 +202,10 @@\n       }\r\n \r\n       // get related svgs\r\n       let relatedSVGs = model.getModels().filter(model => model instanceof TSCustomNodeModel2 && model.options.nodeId === node.getID());\r\n-       let nodeSpec = model.getModels().filter(model => model instanceof TSCustomNodeModel && model.options.nodeId ===node.getID()));\r\n-       console.log(\"nodeSpec\"+nodeSpec+ \"a\")\r\n+       let nodeSpec = model.getModels().filter(model => model instanceof TSCustomNodeModel && model.options.nodeId ===node.getID());\r\n+       console.log(node_position)\r\n \r\n       // calculate new positions for related svgs\r\n       for (let svg of relatedSVGs) {\r\n         // use the relative position to determine the x and y position\r\n"
                },
                {
                    "date": 1707046706229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -211,14 +211,14 @@\n         // use the relative position to determine the x and y position\r\n         let svg_x, svg_y;\r\n         switch (svg.options.position) {\r\n           case 'middle-below':\r\n-            svg_x = node_position.x + NODE_WIDTH / 2 - SVG_WIDTH / 2;\r\n+            svg_x = node_position.x + NODE_WIDTH / 2 //- SVG_WIDTH / 2;\r\n             svg_y = node_position.y + NODE_HEIGHT;\r\n             break;\r\n           case 'middle-left':\r\n             svg_x = node_position.x - SVG_WIDTH;\r\n-            svg_y = node_position.y + NODE_HEIGHT / 2 - SVG_HEIGHT / 2;\r\n+            svg_y = node_position.y + NODE_HEIGHT / 2 //- SVG_HEIGHT / 2;\r\n             break;\r\n           // add more cases for other relative positions as needed\r\n         }\r\n         // set new position for svg\r\n"
                },
                {
                    "date": 1707047159680,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -218,13 +218,22 @@\n           case 'middle-left':\r\n             svg_x = node_position.x - SVG_WIDTH;\r\n             svg_y = node_position.y + NODE_HEIGHT / 2 //- SVG_HEIGHT / 2;\r\n             break;\r\n+          case 'middle-top':\r\n+            svg_x = node_position.x + NODE_WIDTH / 2 //- SVG_WIDTH / 2;\r\n+            svg_y = node_position.y - SVG_HEIGHT;\r\n+            break;\r\n+          case 'middle-right':\r\n+            svg_x = node_position.x + NODE_WIDTH;\r\n+            svg_y = node_position.y + NODE_HEIGHT / 2 //- SVG_HEIGHT / 2;\r\n+            break;\r\n           // add more cases for other relative positions as needed\r\n         }\r\n         // set new position for svg\r\n         svg.setPosition(svg_x, svg_y);\r\n       }\r\n+      \r\n     }\r\n \r\n     setEngine(engine);\r\n     setmodelHadset(true);\r\n"
                },
                {
                    "date": 1707047249503,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -150,30 +150,43 @@\n       cssClass: 'arrow-1',\r\n       position:'middle-below',\r\n          nodeId: node1.getID()\r\n     });\r\n-\r\n+  const svg2 = new TSCustomNodeModel2({\r\n+      name: 'svg 2',\r\n+      //value: 15765,\r\n+      cssClass: 'arrow-1',\r\n+      position:'middle-left',\r\n+         nodeId: node1.getID()\r\n+    });\r\n+      const svg3 = new TSCustomNodeModel2({\r\n+      name: 'svg 2',\r\n+      //value: 15765,\r\n+      cssClass: 'arrow-1',\r\n+      position:'middle-right',\r\n+         nodeId: node1.getID()\r\n+    });\r\n+       const svg4 = new TSCustomNodeModel2({\r\n+      name: 'svg 2',\r\n+      //value: 15765,\r\n+      cssClass: 'arrow-1',\r\n+      position:'middle-top',\r\n+         nodeId: node1.getID()\r\n+    });\r\n     // const svg2 = new SVGModel({\r\n     //   id: 'svg2',\r\n     //   position: 'middle-left', // relative position\r\n     //   filePath: 'path/to/svg2.svg', // file path to svg graphic\r\n     //   nodeId: node1.getID() // added prop\r\n     // });\r\n \r\n \r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n-\r\n     // add both the nodes and tables to the model\r\n     model.addAll(\r\n       node1, node2,// node3, node4,\r\n       link1, link2,//link3, \r\n       table1//, table2, table3,table4,table5\r\n-      , svg1\r\n+      , svg1 , svg2 , svg3 , svg4\r\n     );\r\n     engine.setModel(model);\r\n \r\n \r\n"
                },
                {
                    "date": 1707047358916,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -160,9 +160,9 @@\n     });\r\n       const svg3 = new TSCustomNodeModel2({\r\n       name: 'svg 2',\r\n       //value: 15765,\r\n-      cssClass: 'arrow-1',\r\n+      cssClass: 'arrow-right',\r\n       position:'middle-right',\r\n          nodeId: node1.getID()\r\n     });\r\n        const svg4 = new TSCustomNodeModel2({\r\n"
                },
                {
                    "date": 1707047393574,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -237,9 +237,9 @@\n             svg_y = node_position.y - SVG_HEIGHT;\r\n             break;\r\n           case 'middle-right':\r\n             svg_x = node_position.x + NODE_WIDTH;\r\n-            svg_y = node_position.y + NODE_HEIGHT / 2 //- SVG_HEIGHT / 2;\r\n+            svg_y = (node_position.y + NODE_HEIGHT) / 2 //- SVG_HEIGHT / 2;\r\n             break;\r\n           // add more cases for other relative positions as needed\r\n         }\r\n         // set new position for svg\r\n"
                },
                {
                    "date": 1707047537790,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -146,9 +146,9 @@\n     // create some svg objects with nodeId property\r\n     const svg1 = new TSCustomNodeModel2({\r\n       name: 'svg 1',\r\n       //value: 15765,\r\n-      cssClass: 'arrow-1',\r\n+      cssClass: 'arrow-below',\r\n       position:'middle-below',\r\n          nodeId: node1.getID()\r\n     });\r\n   const svg2 = new TSCustomNodeModel2({\r\n"
                },
                {
                    "date": 1707047585166,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -153,9 +153,9 @@\n     });\r\n   const svg2 = new TSCustomNodeModel2({\r\n       name: 'svg 2',\r\n       //value: 15765,\r\n-      cssClass: 'arrow-1',\r\n+      cssClass: 'arrow-left',\r\n       position:'middle-left',\r\n          nodeId: node1.getID()\r\n     });\r\n       const svg3 = new TSCustomNodeModel2({\r\n@@ -167,9 +167,9 @@\n     });\r\n        const svg4 = new TSCustomNodeModel2({\r\n       name: 'svg 2',\r\n       //value: 15765,\r\n-      cssClass: 'arrow-1',\r\n+      cssClass: 'arrow-top',\r\n       position:'middle-top',\r\n          nodeId: node1.getID()\r\n     });\r\n     // const svg2 = new SVGModel({\r\n"
                },
                {
                    "date": 1707047671309,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,17 +224,17 @@\n         // use the relative position to determine the x and y position\r\n         let svg_x, svg_y;\r\n         switch (svg.options.position) {\r\n           case 'middle-below':\r\n-            svg_x = node_position.x + NODE_WIDTH / 2 //- SVG_WIDTH / 2;\r\n+            svg_x = (node_position.x + NODE_WIDTH) / 2 //- SVG_WIDTH / 2;\r\n             svg_y = node_position.y + NODE_HEIGHT;\r\n             break;\r\n           case 'middle-left':\r\n             svg_x = node_position.x - SVG_WIDTH;\r\n-            svg_y = node_position.y + NODE_HEIGHT / 2 //- SVG_HEIGHT / 2;\r\n+            svg_y = (node_position.y + NODE_HEIGHT) / 2 //- SVG_HEIGHT / 2;\r\n             break;\r\n           case 'middle-top':\r\n-            svg_x = node_position.x + NODE_WIDTH / 2 //- SVG_WIDTH / 2;\r\n+            svg_x = (node_position.x + NODE_WIDTH) / 2 //- SVG_WIDTH / 2;\r\n             svg_y = node_position.y - SVG_HEIGHT;\r\n             break;\r\n           case 'middle-right':\r\n             svg_x = node_position.x + NODE_WIDTH;\r\n"
                },
                {
                    "date": 1707047954920,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     const node1 = new TSCustomNodeModel({\r\n       name: 'Node 1',\r\n       color: 'rgb(0,192,255)',\r\n       value: 1,\r\n-      cssClass: 'circle-node'\r\n+      cssClass: 'custom-node'\r\n     });\r\n \r\n     const node2 = new TSCustomNodeModel({\r\n       name: 'Node 2',\r\n"
                },
                {
                    "date": 1707047986419,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     const node1 = new TSCustomNodeModel({\r\n       name: 'Node 1',\r\n       color: 'rgb(0,192,255)',\r\n       value: 1,\r\n-      cssClass: 'custom-node'\r\n+      cssClass: 'circle-node'\r\n     });\r\n \r\n     const node2 = new TSCustomNodeModel({\r\n       name: 'Node 2',\r\n"
                },
                {
                    "date": 1707048009997,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,10 @@\n     // create some custom nodes\r\n     const node1 = new TSCustomNodeModel({\r\n       name: 'Node 1',\r\n       color: 'rgb(0,192,255)',\r\n-      value: 1,\r\n-      cssClass: 'circle-node'\r\n+      value: 3331,\r\n+      cssClass: 'shape-a'\r\n     });\r\n \r\n     const node2 = new TSCustomNodeModel({\r\n       name: 'Node 2',\r\n"
                },
                {
                    "date": 1707048050678,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,10 +31,10 @@\n     // create some custom nodes\r\n     const node1 = new TSCustomNodeModel({\r\n       name: 'Node 1',\r\n       color: 'rgb(0,192,255)',\r\n-      value: 3331,\r\n-      cssClass: 'shape-a'\r\n+      value: 1,\r\n+      cssClass: 'circle-node'\r\n     });\r\n \r\n     const node2 = new TSCustomNodeModel({\r\n       name: 'Node 2',\r\n"
                },
                {
                    "date": 1707048216973,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -32,9 +32,9 @@\n     const node1 = new TSCustomNodeModel({\r\n       name: 'Node 1',\r\n       color: 'rgb(0,192,255)',\r\n       value: 1,\r\n-      cssClass: 'circle-node'\r\n+      cssClass: 'shape-a\r\n     });\r\n \r\n     const node2 = new TSCustomNodeModel({\r\n       name: 'Node 2',\r\n"
                },
                {
                    "date": 1707048275682,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,11 +30,10 @@\n     // create some custom nodes\r\n     // create some custom nodes\r\n     const node1 = new TSCustomNodeModel({\r\n       name: 'Node 1',\r\n-      color: 'rgb(0,192,255)',\r\n       value: 1,\r\n-      cssClass: 'shape-a\r\n+      cssClass: 'shape-a'\r\n     });\r\n \r\n     const node2 = new TSCustomNodeModel({\r\n       name: 'Node 2',\r\n"
                },
                {
                    "date": 1707048538544,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,8 +223,9 @@\n         // use the relative position to determine the x and y position\r\n         let svg_x, svg_y;\r\n         switch (svg.options.position) {\r\n           case 'middle-below':\r\n+            debugger;\r\n             svg_x = (node_position.x + NODE_WIDTH) / 2 //- SVG_WIDTH / 2;\r\n             svg_y = node_position.y + NODE_HEIGHT;\r\n             break;\r\n           case 'middle-left':\r\n"
                },
                {
                    "date": 1707048552690,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -189,12 +189,12 @@\n     engine.setModel(model);\r\n \r\n \r\n     // calculate the position of each node and then set the position of related tables and svgs accordingly\r\n-    const NODE_HEIGHT = 50; // constant value for node height\r\n+    const NODE_HEIGHT = 200; // constant value for node height\r\n     const OFFSET = 10; // constant value for space between tables and svgs\r\n     const TABLE_WIDTH = 150; // estimated width of the table, adjust as needed\r\n-    const NODE_WIDTH = 50; // estimated width of the node, adjust as needed\r\n+    const NODE_WIDTH = 200; // estimated width of the node, adjust as needed\r\n     const SVG_WIDTH = 50; // estimated width of the svg, adjust as needed\r\n     const SVG_HEIGHT = 50; // estimated height of the svg, adjust as needed\r\n \r\n     for (let node of model.getNodes()) {\r\n"
                },
                {
                    "date": 1707048624808,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -252,9 +252,9 @@\n     setmodelHadset(true);\r\n   }, [modelHadset]);\r\n \r\n   return (\r\n-    <div style={{ height: '800px', width: '800px' }}>\r\n+    <div style={{ height: '1200px', width: '1200px' }}>\r\n       {modelHadset && (\r\n         <>\r\n           <DemoCanvasWidget>\r\n             <CanvasWidget engine={engine} />\r\n"
                },
                {
                    "date": 1707048674948,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,10 +55,10 @@\n       value: 4,\r\n       cssClass: 'circle-node'\r\n     });\r\n \r\n-    node1.setPosition(50, 50);\r\n-    node2.setPosition(200, 50);\r\n+    node1.setPosition(200, 200);\r\n+    node2.setPosition(400, 200);\r\n     node3.setPosition(350, 50);\r\n     node4.setPosition(550, 250);\r\n \r\n     const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n"
                },
                {
                    "date": 1707048697373,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,9 +55,9 @@\n       value: 4,\r\n       cssClass: 'circle-node'\r\n     });\r\n \r\n-    node1.setPosition(200, 200);\r\n+    node1.setPosition(0, 200);\r\n     node2.setPosition(400, 200);\r\n     node3.setPosition(350, 50);\r\n     node4.setPosition(550, 250);\r\n \r\n@@ -223,9 +223,9 @@\n         // use the relative position to determine the x and y position\r\n         let svg_x, svg_y;\r\n         switch (svg.options.position) {\r\n           case 'middle-below':\r\n-            debugger;\r\n+            //debugger;\r\n             svg_x = (node_position.x + NODE_WIDTH) / 2 //- SVG_WIDTH / 2;\r\n             svg_y = node_position.y + NODE_HEIGHT;\r\n             break;\r\n           case 'middle-left':\r\n"
                },
                {
                    "date": 1707048709740,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,10 +193,10 @@\n     const NODE_HEIGHT = 200; // constant value for node height\r\n     const OFFSET = 10; // constant value for space between tables and svgs\r\n     const TABLE_WIDTH = 150; // estimated width of the table, adjust as needed\r\n     const NODE_WIDTH = 200; // estimated width of the node, adjust as needed\r\n-    const SVG_WIDTH = 50; // estimated width of the svg, adjust as needed\r\n-    const SVG_HEIGHT = 50; // estimated height of the svg, adjust as needed\r\n+    const SVG_WIDTH = 200; // estimated width of the svg, adjust as needed\r\n+    const SVG_HEIGHT = 200; // estimated height of the svg, adjust as needed\r\n \r\n     for (let node of model.getNodes()) {\r\n       console.log(node)\r\n       // get position of node\r\n"
                },
                {
                    "date": 1707048726531,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -55,10 +55,10 @@\n       value: 4,\r\n       cssClass: 'circle-node'\r\n     });\r\n \r\n-    node1.setPosition(0, 200);\r\n-    node2.setPosition(400, 200);\r\n+    node1.setPosition(0, 0);\r\n+    node2.setPosition(200, 0);\r\n     node3.setPosition(350, 50);\r\n     node4.setPosition(550, 250);\r\n \r\n     const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n"
                },
                {
                    "date": 1707048763244,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -197,9 +197,9 @@\n     const SVG_WIDTH = 200; // estimated width of the svg, adjust as needed\r\n     const SVG_HEIGHT = 200; // estimated height of the svg, adjust as needed\r\n \r\n     for (let node of model.getNodes()) {\r\n-      console.log(node)\r\n+\r\n       // get position of node\r\n       let node_position = node.getPosition();\r\n \r\n       // get related tables\r\n"
                },
                {
                    "date": 1707048797800,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,9 +223,9 @@\n         // use the relative position to determine the x and y position\r\n         let svg_x, svg_y;\r\n         switch (svg.options.position) {\r\n           case 'middle-below':\r\n-            //debugger;\r\n+            debugger;\r\n             svg_x = (node_position.x + NODE_WIDTH) / 2 //- SVG_WIDTH / 2;\r\n             svg_y = node_position.y + NODE_HEIGHT;\r\n             break;\r\n           case 'middle-left':\r\n"
                },
                {
                    "date": 1707048885295,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -223,9 +223,9 @@\n         // use the relative position to determine the x and y position\r\n         let svg_x, svg_y;\r\n         switch (svg.options.position) {\r\n           case 'middle-below':\r\n-            debugger;\r\n+            //debugger;\r\n             svg_x = (node_position.x + NODE_WIDTH) / 2 //- SVG_WIDTH / 2;\r\n             svg_y = node_position.y + NODE_HEIGHT;\r\n             break;\r\n           case 'middle-left':\r\n"
                },
                {
                    "date": 1707049182357,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,10 +193,10 @@\n     const NODE_HEIGHT = 200; // constant value for node height\r\n     const OFFSET = 10; // constant value for space between tables and svgs\r\n     const TABLE_WIDTH = 150; // estimated width of the table, adjust as needed\r\n     const NODE_WIDTH = 200; // estimated width of the node, adjust as needed\r\n-    const SVG_WIDTH = 200; // estimated width of the svg, adjust as needed\r\n-    const SVG_HEIGHT = 200; // estimated height of the svg, adjust as needed\r\n+    const SVG_WIDTH = 100; // estimated width of the svg, adjust as needed\r\n+    const SVG_HEIGHT = 100; // estimated height of the svg, adjust as needed\r\n \r\n     for (let node of model.getNodes()) {\r\n \r\n       // get position of node\r\n"
                },
                {
                    "date": 1707049192337,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,10 +193,10 @@\n     const NODE_HEIGHT = 200; // constant value for node height\r\n     const OFFSET = 10; // constant value for space between tables and svgs\r\n     const TABLE_WIDTH = 150; // estimated width of the table, adjust as needed\r\n     const NODE_WIDTH = 200; // estimated width of the node, adjust as needed\r\n-    const SVG_WIDTH = 100; // estimated width of the svg, adjust as needed\r\n-    const SVG_HEIGHT = 100; // estimated height of the svg, adjust as needed\r\n+    const SVG_WIDTH = 200; // estimated width of the svg, adjust as needed\r\n+    const SVG_HEIGHT = 200; // estimated height of the svg, adjust as needed\r\n \r\n     for (let node of model.getNodes()) {\r\n \r\n       // get position of node\r\n"
                },
                {
                    "date": 1707049216322,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,9 +224,9 @@\n         let svg_x, svg_y;\r\n         switch (svg.options.position) {\r\n           case 'middle-below':\r\n             //debugger;\r\n-            svg_x = (node_position.x + NODE_WIDTH) / 2 //- SVG_WIDTH / 2;\r\n+            svg_x = node_position.x + NODE_WIDTH / 2 //- SVG_WIDTH / 2;\r\n             svg_y = node_position.y + NODE_HEIGHT;\r\n             break;\r\n           case 'middle-left':\r\n             svg_x = node_position.x - SVG_WIDTH;\r\n"
                },
                {
                    "date": 1707049224961,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -224,9 +224,9 @@\n         let svg_x, svg_y;\r\n         switch (svg.options.position) {\r\n           case 'middle-below':\r\n             //debugger;\r\n-            svg_x = node_position.x + NODE_WIDTH / 2 //- SVG_WIDTH / 2;\r\n+            svg_x = (node_position.x + NODE_WIDTH) / 2 //- SVG_WIDTH / 2;\r\n             svg_y = node_position.y + NODE_HEIGHT;\r\n             break;\r\n           case 'middle-left':\r\n             svg_x = node_position.x - SVG_WIDTH;\r\n"
                },
                {
                    "date": 1707049306806,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,10 +193,10 @@\n     const NODE_HEIGHT = 200; // constant value for node height\r\n     const OFFSET = 10; // constant value for space between tables and svgs\r\n     const TABLE_WIDTH = 150; // estimated width of the table, adjust as needed\r\n     const NODE_WIDTH = 200; // estimated width of the node, adjust as needed\r\n-    const SVG_WIDTH = 200; // estimated width of the svg, adjust as needed\r\n-    const SVG_HEIGHT = 200; // estimated height of the svg, adjust as needed\r\n+    const SVG_WIDTH = 100; // estimated width of the svg, adjust as needed\r\n+    const SVG_HEIGHT = 100; // estimated height of the svg, adjust as needed\r\n \r\n     for (let node of model.getNodes()) {\r\n \r\n       // get position of node\r\n"
                },
                {
                    "date": 1707049462998,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -193,10 +193,10 @@\n     const NODE_HEIGHT = 200; // constant value for node height\r\n     const OFFSET = 10; // constant value for space between tables and svgs\r\n     const TABLE_WIDTH = 150; // estimated width of the table, adjust as needed\r\n     const NODE_WIDTH = 200; // estimated width of the node, adjust as needed\r\n-    const SVG_WIDTH = 100; // estimated width of the svg, adjust as needed\r\n-    const SVG_HEIGHT = 100; // estimated height of the svg, adjust as needed\r\n+    const SVG_WIDTH = 200; // estimated width of the svg, adjust as needed\r\n+    const SVG_HEIGHT = 200; // estimated height of the svg, adjust as needed\r\n \r\n     for (let node of model.getNodes()) {\r\n \r\n       // get position of node\r\n"
                },
                {
                    "date": 1707049701898,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -30,10 +30,11 @@\n     // create some custom nodes\r\n     // create some custom nodes\r\n     const node1 = new TSCustomNodeModel({\r\n       name: 'Node 1',\r\n+      color: 'rgb(0,192,255)',\r\n       value: 1,\r\n-      cssClass: 'shape-a'\r\n+      cssClass: 'circle-node'\r\n     });\r\n \r\n     const node2 = new TSCustomNodeModel({\r\n       name: 'Node 2',\r\n@@ -55,10 +56,10 @@\n       value: 4,\r\n       cssClass: 'circle-node'\r\n     });\r\n \r\n-    node1.setPosition(0, 0);\r\n-    node2.setPosition(200, 0);\r\n+    node1.setPosition(50, 50);\r\n+    node2.setPosition(200, 50);\r\n     node3.setPosition(350, 50);\r\n     node4.setPosition(550, 250);\r\n \r\n     const link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\n@@ -189,17 +190,17 @@\n     engine.setModel(model);\r\n \r\n \r\n     // calculate the position of each node and then set the position of related tables and svgs accordingly\r\n-    const NODE_HEIGHT = 200; // constant value for node height\r\n+    const NODE_HEIGHT = 50; // constant value for node height\r\n     const OFFSET = 10; // constant value for space between tables and svgs\r\n     const TABLE_WIDTH = 150; // estimated width of the table, adjust as needed\r\n-    const NODE_WIDTH = 200; // estimated width of the node, adjust as needed\r\n-    const SVG_WIDTH = 200; // estimated width of the svg, adjust as needed\r\n-    const SVG_HEIGHT = 200; // estimated height of the svg, adjust as needed\r\n+    const NODE_WIDTH = 50; // estimated width of the node, adjust as needed\r\n+    const SVG_WIDTH = 50; // estimated width of the svg, adjust as needed\r\n+    const SVG_HEIGHT = 50; // estimated height of the svg, adjust as needed\r\n \r\n     for (let node of model.getNodes()) {\r\n-\r\n+      console.log(node)\r\n       // get position of node\r\n       let node_position = node.getPosition();\r\n \r\n       // get related tables\r\n@@ -223,9 +224,8 @@\n         // use the relative position to determine the x and y position\r\n         let svg_x, svg_y;\r\n         switch (svg.options.position) {\r\n           case 'middle-below':\r\n-            //debugger;\r\n             svg_x = (node_position.x + NODE_WIDTH) / 2 //- SVG_WIDTH / 2;\r\n             svg_y = node_position.y + NODE_HEIGHT;\r\n             break;\r\n           case 'middle-left':\r\n@@ -252,9 +252,9 @@\n     setmodelHadset(true);\r\n   }, [modelHadset]);\r\n \r\n   return (\r\n-    <div style={{ height: '1200px', width: '1200px' }}>\r\n+    <div style={{ height: '800px', width: '800px' }}>\r\n       {modelHadset && (\r\n         <>\r\n           <DemoCanvasWidget>\r\n             <CanvasWidget engine={engine} />\r\n"
                },
                {
                    "date": 1707049726355,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n       value: 4,\r\n       cssClass: 'circle-node'\r\n     });\r\n \r\n-    node1.setPosition(50, 50);\r\n+    node1.setPosition(500, 800);\r\n     node2.setPosition(200, 50);\r\n     node3.setPosition(350, 50);\r\n     node4.setPosition(550, 250);\r\n \r\n"
                },
                {
                    "date": 1707049733232,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -56,9 +56,9 @@\n       value: 4,\r\n       cssClass: 'circle-node'\r\n     });\r\n \r\n-    node1.setPosition(500, 800);\r\n+    node1.setPosition(50, 50);\r\n     node2.setPosition(200, 50);\r\n     node3.setPosition(350, 50);\r\n     node4.setPosition(550, 250);\r\n \r\n"
                }
            ],
            "date": 1707025413195,
            "name": "Commit-0",
            "content": "// part 9\r\n// import the necessary modules\r\nimport React, { useEffect, useState } from 'react';\r\nimport createEngine, { DiagramModel } from '@projectstorm/react-diagrams';\r\nimport { CanvasWidget } from '@projectstorm/react-canvas-core';\r\nimport { TSCustomNodeFactory } from './TSCustomNodeFactory';\r\nimport { TSCustomNodeModel } from './TSCustomNodeModel';\r\nimport { TableFactory } from './7';\r\nimport { TableModel } from './5';\r\nimport { DemoCanvasWidget } from './DemoCanvasWidget';\r\nimport './style.css'; \r\nconst Diagram = () => {\r\n  const [engine, setEngine] = useState(createEngine());\r\n\r\n  const model = new DiagramModel();\r\n  const [modelHadset, setmodelHadset] = useState(false);\r\n  // use useEffect hook to initialize the engine and model\r\n  useEffect(() => {\r\n    // register both the node and table factories with the engine\r\n    engine.getNodeFactories().registerFactory(new TSCustomNodeFactory());\r\n    engine.getNodeFactories().registerFactory(new TableFactory());\r\n\r\n    // create some custom nodes\r\n   // create some custom nodes\r\n   const node1 = new TSCustomNodeModel({\r\n    name: 'Node 1',\r\n    color: 'rgb(0,192,255)',\r\n    value: 1,\r\n    cssClass: 'circle-node'\r\n});\r\n\r\nconst node2 = new TSCustomNodeModel({\r\n    name: 'Node 2',\r\n    color: 'rgb(255,255,0)',\r\n    value: 20,\r\n    cssClass: 'triangle-node' \r\n});\r\n\r\nconst node3 = new TSCustomNodeModel({\r\n    name: 'Node 3',\r\n    color: 'rgb(192,255,0)',\r\n    value: 30,\r\n    cssClass: 'pentagon-node' \r\n});\r\n\r\nnode1.setPosition(50, 50);\r\nnode2.setPosition(200, 50);\r\nnode3.setPosition(350, 50);\r\n\r\nconst link1 = node1.getPort('OUT').link(node2.getPort('IN'));\r\nconst link2 = node2.getPort('OUT').link(node3.getPort('IN'));\r\n\r\n    // create some table objects\r\n    const table1 = new TableModel({\r\n      name: 'Table 1',\r\n      values: [\r\n        ['Name', 'Age', 'Gender'],\r\n        ['Alice', 25, 'F'],\r\n        ['Bob', 30, 'M'],\r\n        ['Charlie', 35, 'M']\r\n      ],\r\n      position: { x: 50, y: 150 },\r\n      color: 'pink',\r\n      cssClass: 'table',\r\n      size: { width: 200, height: 200 }\r\n    });\r\n\r\n    const table2 = new TableModel({\r\n      name: 'Table 2',\r\n      values: [\r\n        ['Country', 'Population', 'Area'],\r\n        ['China', 1441, 9597],\r\n        ['India', 1380, 3287],\r\n        ['USA', 331, 9834]\r\n      ],\r\n      position: { x: 300, y: 150 },\r\n      color: 'lightblue',\r\n      cssClass: 'table',\r\n      size: { width: 200, height: 200 }\r\n    });\r\n\r\n    const table3 = new TableModel({\r\n      name: 'Table 3',\r\n      values: [\r\n        ['Product', 'Price', 'Quantity'],\r\n        ['Apple', 1, 10],\r\n        ['Banana', 0.5, 20],\r\n        ['Carrot', 0.2, 30]\r\n      ],\r\n      position: { x: 550, y: 150 },\r\n      color: 'lightgreen',\r\n      cssClass: 'table',\r\n      size: { width: 200, height: 200 }\r\n    });\r\n\r\n    // add both the nodes and tables to the model\r\n    model.addAll(node1, node2, node3, link1, link2, table1, table2, table3);\r\n    engine.setModel(model);\r\n\r\n    setEngine(engine);\r\n    setmodelHadset(true);\r\n  }, [modelHadset]);\r\n\r\n  return (\r\n    <div style={{ height: '800px', width: '800px' }}>\r\n      {modelHadset && (\r\n        <>\r\n          <DemoCanvasWidget>\r\n            <CanvasWidget engine={engine} />\r\n          </DemoCanvasWidget>\r\n        </>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\nexport default Diagram;\r\n"
        }
    ]
}