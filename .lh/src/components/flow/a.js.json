{
    "sourceFile": "src/components/flow/a.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 2,
            "patches": [
                {
                    "date": 1706936447804,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1706936663598,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,32 +1,55 @@\n-// Example 1: A simple diagram with two circles and a line connecting them\r\n import React from 'react';\r\n import { Diagram, Node, Shape, Connection } from 'react-diagrams';\r\n+import { Icon } from 'react-icons';\r\n \r\n-class App extends React.Component {\r\n-  constructor(props) {\r\n-    super(props);\r\n-    // Create a diagram instance\r\n-    this.diagram = new Diagram();\r\n-    // Create two nodes with circle shapes\r\n-    this.node1 = new Node(100, 100, new Shape('circle', 50, 50));\r\n-    this.node2 = new Node(300, 100, new Shape('circle', 50, 50));\r\n-    // Create a connection between the nodes\r\n-    this.connection = new Connection(this.node1, this.node2);\r\n-    // Add the nodes and the connection to the diagram\r\n-    this.diagram.addNode(this.node1);\r\n-    this.diagram.addNode(this.node2);\r\n-    this.diagram.addConnection(this.connection);\r\n-  }\r\n+const FunctionalApp = () => {\r\n+  // Create a diagram instance\r\n+  const diagram = new Diagram();\r\n \r\n-  render() {\r\n-    return (\r\n-      <div>\r\n-        <h1>Example 1</h1>\r\n-        {/* Render the diagram component */}\r\n-        <Diagram diagram={this.diagram} />\r\n-      </div>\r\n-    );\r\n-  }\r\n-}\r\n+  // Create five nodes with different shapes and icons\r\n+  const node1 = new Node(100, 100, new Shape('circle', 50, 50, 'white'));\r\n+  node1.icon = <Icon name=\"home\" size={30} color=\"black\" />;\r\n+  const node2 = new Node(300, 100, new Shape('rectangle', 100, 50, 'white'));\r\n+  node2.icon = <Icon name=\"user\" size={30} color=\"black\" />;\r\n+  const node3 = new Node(100, 200, new Shape('triangle', 50, 50, 'white'));\r\n+  node3.icon = <Icon name=\"star\" size={30} color=\"black\" />;\r\n+  const node4 = new Node(300, 200, new Shape('square', 50, 50, 'white'));\r\n+  node4.icon = <Icon name=\"heart\" size={30} color=\"black\" />;\r\n+  const node5 = new Node(200, 300, new Shape('pentagon', 50, 50, 'white'));\r\n+  node5.icon = <Icon name=\"flag\" size={30} color=\"black\" />;\r\n \r\n-export default App;\r\n+  // Create four connections between the nodes, with labels\r\n+  const connection1 = new Connection(node1, node2, {\r\n+    label: 'Friend',\r\n+  });\r\n+  const connection2 = new Connection(node2, node4, {\r\n+    label: 'Lover',\r\n+  });\r\n+  const connection3 = new Connection(node3, node4, {\r\n+    label: 'Enemy',\r\n+  });\r\n+  const connection4 = new Connection(node4, node5, {\r\n+    label: 'Winner',\r\n+  });\r\n+\r\n+  // Add the nodes and the connections to the diagram\r\n+  diagram.addNode(node1);\r\n+  diagram.addNode(node2);\r\n+  diagram.addNode(node3);\r\n+  diagram.addNode(node4);\r\n+  diagram.addNode(node5);\r\n+  diagram.addConnection(connection1);\r\n+  diagram.addConnection(connection2);\r\n+  diagram.addConnection(connection3);\r\n+  diagram.addConnection(connection4);\r\n+\r\n+  return (\r\n+    <div>\r\n+      <h1>Example 4</h1>\r\n+      {/* Render the diagram component */}\r\n+      <Diagram diagram={diagram} />\r\n+    </div>\r\n+  );\r\n+};\r\n+\r\n+export default FunctionalApp;\n\\ No newline at end of file\n"
                },
                {
                    "date": 1706939542767,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,8 +1,8 @@\n import React from 'react';\r\n-import { Diagram, Node, Shape, Connection } from 'react-diagrams';\r\n-import { Icon } from 'react-icons';\r\n+import { Diagram, Node, Shape, Connection } from '@projectstorm/react-diagrams';\r\n \r\n+\r\n const FunctionalApp = () => {\r\n   // Create a diagram instance\r\n   const diagram = new Diagram();\r\n \r\n"
                }
            ],
            "date": 1706936447804,
            "name": "Commit-0",
            "content": "// Example 1: A simple diagram with two circles and a line connecting them\r\nimport React from 'react';\r\nimport { Diagram, Node, Shape, Connection } from 'react-diagrams';\r\n\r\nclass App extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    // Create a diagram instance\r\n    this.diagram = new Diagram();\r\n    // Create two nodes with circle shapes\r\n    this.node1 = new Node(100, 100, new Shape('circle', 50, 50));\r\n    this.node2 = new Node(300, 100, new Shape('circle', 50, 50));\r\n    // Create a connection between the nodes\r\n    this.connection = new Connection(this.node1, this.node2);\r\n    // Add the nodes and the connection to the diagram\r\n    this.diagram.addNode(this.node1);\r\n    this.diagram.addNode(this.node2);\r\n    this.diagram.addConnection(this.connection);\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div>\r\n        <h1>Example 1</h1>\r\n        {/* Render the diagram component */}\r\n        <Diagram diagram={this.diagram} />\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"
        }
    ]
}