{
    "sourceFile": "src/components/flow/d.js",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 15,
            "patches": [
                {
                    "date": 1706944886577,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1706944922901,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,5 +201,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default Diagram;\r\n+export default DiagramFlow;\r\n"
                },
                {
                    "date": 1706944937416,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -201,5 +201,5 @@\n     </div>\r\n   );\r\n };\r\n \r\n-export default DiagramFlow;\r\n+export default Diagram;\r\n"
                },
                {
                    "date": 1706945027393,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,8 +4,9 @@\n   DiagramModel,\r\n   DefaultNodeModel,\r\n   DefaultLinkModel,\r\n   DefaultPortModel,\r\n+  CanvasWidget,\r\n   DiagramEngine,\r\n } from \"@projectstorm/react-diagrams\";\r\n \r\n // define a custom node component\r\n"
                },
                {
                    "date": 1706945223649,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,206 +1,214 @@\n // import React and the library\r\n import React, { useEffect, useRef } from \"react\";\r\n import createEngine, {\r\n-  DiagramModel,\r\n-  DefaultNodeModel,\r\n-  DefaultLinkModel,\r\n-  DefaultPortModel,\r\n-  CanvasWidget,\r\n-  DiagramEngine,\r\n+    DiagramModel,\r\n+    DefaultNodeModel,\r\n+    DefaultLinkModel,\r\n+    DefaultPortModel,\r\n+    CanvasWidget,\r\n+    DiagramEngine,\r\n } from \"@projectstorm/react-diagrams\";\r\n \r\n // define a custom node component\r\n const CustomNode = (props) => {\r\n-  // use a ref to access the underlying DOM element\r\n-  const nodeRef = useRef();\r\n+    // use a ref to access the underlying DOM element\r\n+    const nodeRef = useRef();\r\n \r\n-  // use an effect to update the node position and size\r\n-  useEffect(() => {\r\n-    // get the node model from the props\r\n-    const node = props.node;\r\n+    // use an effect to update the node position and size\r\n+    useEffect(() => {\r\n+        // get the node model from the props\r\n+        const node = props.node;\r\n \r\n-    // get the DOM element\r\n-    const element = nodeRef.current;\r\n+        // get the DOM element\r\n+        const element = nodeRef.current;\r\n \r\n-    // update the node position and size\r\n-    node.setPosition(element.offsetLeft, element.offsetTop);\r\n-    node.setSize(element.offsetWidth, element.offsetHeight);\r\n-  });\r\n+        // update the node position and size\r\n+        node.setPosition(element.offsetLeft, element.offsetTop);\r\n+        node.setSize(element.offsetWidth, element.offsetHeight);\r\n+    });\r\n \r\n-  // return a JSX element that represents the node\r\n-  return (\r\n-    <div\r\n-      ref={nodeRef}\r\n-      className=\"custom-node\"\r\n-      style={{\r\n-        position: \"absolute\",\r\n-        width: 100,\r\n-        height: 100,\r\n-        backgroundColor: props.node.color,\r\n-      }}\r\n-    >\r\n-      <p>{props.node.name}</p>\r\n-    </div>\r\n-  );\r\n+    // return a JSX element that represents the node\r\n+    return (\r\n+        <div\r\n+            ref={nodeRef}\r\n+            className=\"custom-node\"\r\n+            style={{\r\n+                position: \"absolute\",\r\n+                width: 100,\r\n+                height: 100,\r\n+                backgroundColor: props.node.color,\r\n+            }}\r\n+        >\r\n+            <p>{props.node.name}</p>\r\n+        </div>\r\n+    );\r\n };\r\n \r\n // define a custom link component\r\n const CustomLink = (props) => {\r\n-  // use a ref to access the underlying DOM element\r\n-  const linkRef = useRef();\r\n+    // use a ref to access the underlying DOM element\r\n+    const linkRef = useRef();\r\n \r\n-  // use an effect to update the link points\r\n-  useEffect(() => {\r\n-    // get the link model from the props\r\n-    const link = props.link;\r\n+    // use an effect to update the link points\r\n+    useEffect(() => {\r\n+        // get the link model from the props\r\n+        const link = props.link;\r\n \r\n-    // get the DOM element\r\n-    const element = linkRef.current;\r\n+        // get the DOM element\r\n+        const element = linkRef.current;\r\n \r\n-    // get the SVG path element\r\n-    const path = element.querySelector(\"path\");\r\n+        // get the SVG path element\r\n+        const path = element.querySelector(\"path\");\r\n \r\n-    // get the points from the path\r\n-    const points = path.getAttribute(\"d\").split(\" \");\r\n+        // get the points from the path\r\n+        const points = path.getAttribute(\"d\").split(\" \");\r\n \r\n-    // update the link points\r\n-    link.setPoints([\r\n-      link.getPoint(0),\r\n-      new DefaultPortModel({\r\n-        x: parseInt(points[1]),\r\n-        y: parseInt(points[2]),\r\n-      }),\r\n-      new DefaultPortModel({\r\n-        x: parseInt(points[4]),\r\n-        y: parseInt(points[5]),\r\n-      }),\r\n-      link.getPoint(link.getPoints().length - 1),\r\n-    ]);\r\n-  });\r\n+        // update the link points\r\n+        link.setPoints([\r\n+            link.getPoint(0),\r\n+            new DefaultPortModel({\r\n+                x: parseInt(points[1]),\r\n+                y: parseInt(points[2]),\r\n+            }),\r\n+            new DefaultPortModel({\r\n+                x: parseInt(points[4]),\r\n+                y: parseInt(points[5]),\r\n+            }),\r\n+            link.getPoint(link.getPoints().length - 1),\r\n+        ]);\r\n+    });\r\n \r\n-  // return a JSX element that represents the link\r\n-  return (\r\n-    <div ref={linkRef} className=\"custom-link\">\r\n-      {props.children}\r\n-    </div>\r\n-  );\r\n+    // return a JSX element that represents the link\r\n+    return (\r\n+        <div ref={linkRef} className=\"custom-link\">\r\n+            {props.children}\r\n+        </div>\r\n+    );\r\n };\r\n \r\n // define a functional component that renders the diagram\r\n const Diagram = () => {\r\n-  // create a ref to store the diagram engine\r\n-  const engineRef = useRef();\r\n+    // create a ref to store the diagram engine\r\n+    const engineRef = useRef();\r\n \r\n-  // use an effect to initialize the diagram engine and model\r\n-  useEffect(() => {\r\n-    // create a new diagram engine\r\n-    const engine = createEngine();\r\n+    // use an effect to initialize the diagram engine and model\r\n+    useEffect(() => {\r\n+        // create a new diagram engine\r\n+        const engine = createEngine();\r\n \r\n-    // create a new diagram model\r\n-    const model = new DiagramModel();\r\n+        // create a new diagram model\r\n+        const model = new DiagramModel();\r\n \r\n-    // create some custom nodes\r\n-    const node1 = new DefaultNodeModel({\r\n-      name: \"Node 1\",\r\n-      color: \"red\",\r\n-    });\r\n-    node1.setPosition(100, 100);\r\n+        // create some custom nodes\r\n+        const node1 = new DefaultNodeModel({\r\n+            name: \"Node 1\",\r\n+            color: \"red\",\r\n+        });\r\n+        node1.setPosition(100, 100);\r\n+        node1.addPort(new DefaultPortModel({ name: \"out\", position: \"right\" }));\r\n \r\n-    const node2 = new DefaultNodeModel({\r\n-      name: \"Node 2\",\r\n-      color: \"green\",\r\n-    });\r\n-    node2.setPosition(400, 100);\r\n \r\n-    const node3 = new DefaultNodeModel({\r\n-      name: \"Node 3\",\r\n-      color: \"blue\",\r\n-    });\r\n-    node3.setPosition(400, 400);\r\n+        const node2 = new DefaultNodeModel({\r\n+            name: \"Node 2\",\r\n+            color: \"green\",\r\n+        });\r\n+        node2.setPosition(400, 100);\r\n+        // create and add a port named \"in\" with the position \"left\"\r\n+        node2.addPort(new DefaultPortModel({ name: \"in\", position: \"left\" }));\r\n+        // create and add a port named \"out\" with the position \"right\"\r\n+        node2.addPort(new DefaultPortModel({ name: \"out\", position: \"right\" }));\r\n \r\n-    // create some custom links\r\n-    const link1 = new DefaultLinkModel();\r\n-    link1.setSourcePort(node1.getPort(\"out\"));\r\n-    link1.setTargetPort(node2.getPort(\"in\"));\r\n+        const node3 = new DefaultNodeModel({\r\n+            name: \"Node 3\",\r\n+            color: \"blue\",\r\n+        });\r\n+        node3.setPosition(400, 400);\r\n+        // create and add a port named \"in\" with the position \"left\"\r\n+        node3.addPort(new DefaultPortModel({ name: \"in\", position: \"left\" }));\r\n \r\n-    const link2 = new DefaultLinkModel();\r\n-    link2.setSourcePort(node2.getPort(\"out\"));\r\n-    link2.setTargetPort(node3.getPort(\"in\"));\r\n+        // create some custom links\r\n+        const link1 = new DefaultLinkModel();\r\n+        link1.setSourcePort(node1.getPort(\"out\"));\r\n+        link1.setTargetPort(node2.getPort(\"in\"));\r\n \r\n-    // add the nodes and links to the model\r\n-    model.addAll(node1, node2, node3, link1, link2);\r\n+        const link2 = new DefaultLinkModel();\r\n+        link2.setSourcePort(node2.getPort(\"out\"));\r\n+        link2.setTargetPort(node3.getPort(\"in\"));\r\n \r\n-    // register the custom components to the engine\r\n-    engine.getNodeFactories().registerFactory({\r\n-      type: \"default\",\r\n-      getNewInstance: () => new DefaultNodeModel(),\r\n-      getWidget: (event) => <CustomNode node={event.model} />,\r\n-    });\r\n+        // add the nodes and links to the model\r\n+        model.addAll(node1, node2, node3, link1, link2);\r\n \r\n-    engine.getLinkFactories().registerFactory({\r\n-      type: \"default\",\r\n-      getNewInstance: () => new DefaultLinkModel(),\r\n-      getWidget: (event) => <CustomLink link={event.model} />,\r\n-    });\r\n+        // register the custom components to the engine\r\n+        engine.getNodeFactories().registerFactory({\r\n+            type: \"default\",\r\n+            getNewInstance: () => new DefaultNodeModel(),\r\n+            getWidget: (event) => <CustomNode node={event.model} />,\r\n+        });\r\n \r\n-    // set the model to the engine\r\n-    engine.setModel(model);\r\n+        engine.getLinkFactories().registerFactory({\r\n+            type: \"default\",\r\n+            getNewInstance: () => new DefaultLinkModel(),\r\n+            getWidget: (event) => <CustomLink link={event.model} />,\r\n+        });\r\n \r\n-    // store the engine in the ref\r\n-    engineRef.current = engine;\r\n-  }, []);\r\n+        // set the model to the engine\r\n+        engine.setModel(model);\r\n \r\n-  // use a sample rest api for models\r\n-  const fetchModels = () => {\r\n-    return new Promise((resolve) => {\r\n-      setTimeout(() => {\r\n-        // simulate some data from the server\r\n-        const data = [\r\n-          { name: \"Node 4\", color: \"yellow\", x: 100, y: 400 },\r\n-          { name: \"Node 5\", color: \"purple\", x: 250, y: 250 },\r\n-        ];\r\n-        resolve(data);\r\n-      }, 1000);\r\n-    });\r\n-  };\r\n+        // store the engine in the ref\r\n+        engineRef.current = engine;\r\n+    }, []);\r\n \r\n-  // use an effect to update the model with the data from the server\r\n-  useEffect(() => {\r\n-    // get the engine and model from the ref\r\n-    const engine = engineRef.current;\r\n-    const model = engine.getModel();\r\n+    // use a sample rest api for models\r\n+    const fetchModels = () => {\r\n+        return new Promise((resolve) => {\r\n+            setTimeout(() => {\r\n+                // simulate some data from the server\r\n+                const data = [\r\n+                    { name: \"Node 4\", color: \"yellow\", x: 100, y: 400 },\r\n+                    { name: \"Node 5\", color: \"purple\", x: 250, y: 250 },\r\n+                ];\r\n+                resolve(data);\r\n+            }, 1000);\r\n+        });\r\n+    };\r\n \r\n-    // fetch the models from the server\r\n-    fetchModels().then((data) => {\r\n-      // create new nodes from the data\r\n-      const newNodes = data.map((item) => {\r\n-        const node = new DefaultNodeModel(item);\r\n-        node.setPosition(item.x, item.y);\r\n-        return node;\r\n-      });\r\n+    // use an effect to update the model with the data from the server\r\n+    useEffect(() => {\r\n+        // get the engine and model from the ref\r\n+        const engine = engineRef.current;\r\n+        const model = engine.getModel();\r\n \r\n-      // add the new nodes to the model\r\n-      model.addAll(...newNodes);\r\n+        // fetch the models from the server\r\n+        fetchModels().then((data) => {\r\n+            // create new nodes from the data\r\n+            const newNodes = data.map((item) => {\r\n+                const node = new DefaultNodeModel(item);\r\n+                node.setPosition(item.x, item.y);\r\n+                return node;\r\n+            });\r\n \r\n-      // update the engine\r\n-      engine.repaintCanvas();\r\n-    });\r\n-  }, []);\r\n+            // add the new nodes to the model\r\n+            model.addAll(...newNodes);\r\n \r\n-  // return a JSX element that renders the diagram\r\n-  return (\r\n-    <div\r\n-      style={{\r\n-        height: \"100vh\",\r\n-        width: \"100vw\",\r\n-        backgroundColor: \"lightgray\",\r\n-      }}\r\n-    >\r\n-      {engineRef.current && (\r\n-        <CanvasWidget engine={engineRef.current} className=\"canvas\" />\r\n-      )}\r\n-    </div>\r\n-  );\r\n+            // update the engine\r\n+            engine.repaintCanvas();\r\n+        });\r\n+    }, []);\r\n+\r\n+    // return a JSX element that renders the diagram\r\n+    return (\r\n+        <div\r\n+            style={{\r\n+                height: \"100vh\",\r\n+                width: \"100vw\",\r\n+                backgroundColor: \"lightgray\",\r\n+            }}\r\n+        >\r\n+            {engineRef.current && (\r\n+                <CanvasWidget engine={engineRef.current} className=\"canvas\" />\r\n+            )}\r\n+        </div>\r\n+    );\r\n };\r\n \r\n export default Diagram;\r\n"
                },
                {
                    "date": 1706945350773,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,9 +5,10 @@\n     DefaultNodeModel,\r\n     DefaultLinkModel,\r\n     DefaultPortModel,\r\n     CanvasWidget,\r\n-    DiagramEngine,\r\n+    CanvasEngine,\r\n+    \r\n } from \"@projectstorm/react-diagrams\";\r\n \r\n // define a custom node component\r\n const CustomNode = (props) => {\r\n@@ -204,9 +205,9 @@\n                 backgroundColor: \"lightgray\",\r\n             }}\r\n         >\r\n             {engineRef.current && (\r\n-                <CanvasWidget engine={engineRef.current} className=\"canvas\" />\r\n+                <CanvasEngine engine={engineRef.current} className=\"canvas\" />\r\n             )}\r\n         </div>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1706945368227,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -5,10 +5,9 @@\n     DefaultNodeModel,\r\n     DefaultLinkModel,\r\n     DefaultPortModel,\r\n     CanvasWidget,\r\n-    CanvasEngine,\r\n-    \r\n+    DiagramEngine,\r\n } from \"@projectstorm/react-diagrams\";\r\n \r\n // define a custom node component\r\n const CustomNode = (props) => {\r\n@@ -205,9 +204,9 @@\n                 backgroundColor: \"lightgray\",\r\n             }}\r\n         >\r\n             {engineRef.current && (\r\n-                <CanvasEngine engine={engineRef.current} className=\"canvas\" />\r\n+                <CanvasWidget engine={engineRef.current} className=\"canvas\" />\r\n             )}\r\n         </div>\r\n     );\r\n };\r\n"
                },
                {
                    "date": 1706945737924,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -8,8 +8,29 @@\n     CanvasWidget,\r\n     DiagramEngine,\r\n } from \"@projectstorm/react-diagrams\";\r\n \r\n+\r\n+import {\r\n+    AbstractReactFactory,\r\n+    GenerateModelEvent,\r\n+    GenerateWidgetEvent,\r\n+} from \"@projectstorm/react-canvas-core\";\r\n+\r\n+class CustomNodeFactory extends AbstractReactFactory {\r\n+    constructor() {\r\n+        super(\"custom\");\r\n+    }\r\n+\r\n+    generateModel(event) {\r\n+        return new DefaultNodeModel(event.initialConfig);\r\n+    }\r\n+\r\n+    generateReactWidget(event) {\r\n+        return <CustomNode node={event.model} />;\r\n+    }\r\n+}\r\n+\r\n // define a custom node component\r\n const CustomNode = (props) => {\r\n     // use a ref to access the underlying DOM element\r\n     const nodeRef = useRef();\r\n"
                },
                {
                    "date": 1706945752972,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,8 +111,13 @@\n const Diagram = () => {\r\n     // create a ref to store the diagram engine\r\n     const engineRef = useRef();\r\n \r\n+    useEffect(() => {\r\n+        // ...\r\n+        engine.getNodeFactories().registerFactory(new CustomNodeFactory());\r\n+        // ...\r\n+    }, []);\r\n     // use an effect to initialize the diagram engine and model\r\n     useEffect(() => {\r\n         // create a new diagram engine\r\n         const engine = createEngine();\r\n"
                },
                {
                    "date": 1706945766087,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -111,13 +111,9 @@\n const Diagram = () => {\r\n     // create a ref to store the diagram engine\r\n     const engineRef = useRef();\r\n \r\n-    useEffect(() => {\r\n-        // ...\r\n-        engine.getNodeFactories().registerFactory(new CustomNodeFactory());\r\n-        // ...\r\n-    }, []);\r\n+    \r\n     // use an effect to initialize the diagram engine and model\r\n     useEffect(() => {\r\n         // create a new diagram engine\r\n         const engine = createEngine();\r\n@@ -182,8 +178,13 @@\n \r\n         // store the engine in the ref\r\n         engineRef.current = engine;\r\n     }, []);\r\n+    useEffect(() => {\r\n+        // ...\r\n+        engine.getNodeFactories().registerFactory(new CustomNodeFactory());\r\n+        // ...\r\n+    }, []);\r\n \r\n     // use a sample rest api for models\r\n     const fetchModels = () => {\r\n         return new Promise((resolve) => {\r\n"
                },
                {
                    "date": 1706945808543,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -172,19 +172,17 @@\n             getNewInstance: () => new DefaultLinkModel(),\r\n             getWidget: (event) => <CustomLink link={event.model} />,\r\n         });\r\n \r\n+        engine.getNodeFactories().registerFactory(new CustomNodeFactory());\r\n+\r\n         // set the model to the engine\r\n         engine.setModel(model);\r\n \r\n         // store the engine in the ref\r\n         engineRef.current = engine;\r\n     }, []);\r\n-    useEffect(() => {\r\n-        // ...\r\n-        engine.getNodeFactories().registerFactory(new CustomNodeFactory());\r\n-        // ...\r\n-    }, []);\r\n+    \r\n \r\n     // use a sample rest api for models\r\n     const fetchModels = () => {\r\n         return new Promise((resolve) => {\r\n"
                },
                {
                    "date": 1706945841789,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -116,8 +116,9 @@\n     // use an effect to initialize the diagram engine and model\r\n     useEffect(() => {\r\n         // create a new diagram engine\r\n         const engine = createEngine();\r\n+        engine.getNodeFactories().registerFactory(new CustomNodeFactory());\r\n \r\n         // create a new diagram model\r\n         const model = new DiagramModel();\r\n \r\n@@ -172,10 +173,9 @@\n             getNewInstance: () => new DefaultLinkModel(),\r\n             getWidget: (event) => <CustomLink link={event.model} />,\r\n         });\r\n \r\n-        engine.getNodeFactories().registerFactory(new CustomNodeFactory());\r\n-\r\n+        \r\n         // set the model to the engine\r\n         engine.setModel(model);\r\n \r\n         // store the engine in the ref\r\n"
                },
                {
                    "date": 1706950187251,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,12 +4,12 @@\n     DiagramModel,\r\n     DefaultNodeModel,\r\n     DefaultLinkModel,\r\n     DefaultPortModel,\r\n-    CanvasWidget,\r\n     DiagramEngine,\r\n } from \"@projectstorm/react-diagrams\";\r\n \r\n+import { CanvasWidget } from \"@projectstorm/react-canvas-core\";\r\n \r\n import {\r\n     AbstractReactFactory,\r\n     GenerateModelEvent,\r\n"
                },
                {
                    "date": 1706950272360,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,28 +9,9 @@\n } from \"@projectstorm/react-diagrams\";\r\n \r\n import { CanvasWidget } from \"@projectstorm/react-canvas-core\";\r\n \r\n-import {\r\n-    AbstractReactFactory,\r\n-    GenerateModelEvent,\r\n-    GenerateWidgetEvent,\r\n-} from \"@projectstorm/react-canvas-core\";\r\n \r\n-class CustomNodeFactory extends AbstractReactFactory {\r\n-    constructor() {\r\n-        super(\"custom\");\r\n-    }\r\n-\r\n-    generateModel(event) {\r\n-        return new DefaultNodeModel(event.initialConfig);\r\n-    }\r\n-\r\n-    generateReactWidget(event) {\r\n-        return <CustomNode node={event.model} />;\r\n-    }\r\n-}\r\n-\r\n // define a custom node component\r\n const CustomNode = (props) => {\r\n     // use a ref to access the underlying DOM element\r\n     const nodeRef = useRef();\r\n"
                },
                {
                    "date": 1706950291592,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -97,9 +97,9 @@\n     // use an effect to initialize the diagram engine and model\r\n     useEffect(() => {\r\n         // create a new diagram engine\r\n         const engine = createEngine();\r\n-        engine.getNodeFactories().registerFactory(new CustomNodeFactory());\r\n+        //engine.getNodeFactories().registerFactory(new CustomNodeFactory());\r\n \r\n         // create a new diagram model\r\n         const model = new DiagramModel();\r\n \r\n"
                },
                {
                    "date": 1706957439975,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -0,0 +1,223 @@\n+// import React and the library\r\n+import React, { useEffect, useRef } from \"react\";\r\n+import createEngine, {\r\n+    DiagramModel,\r\n+    DefaultNodeModel,\r\n+    DefaultLinkModel,\r\n+    DefaultPortModel,\r\n+    DiagramEngine,\r\n+} from \"@projectstorm/react-diagrams\";\r\n+\r\n+import { CanvasWidget } from \"@projectstorm/react-canvas-core\";\r\n+import { DemoCanvasWidget } from \"./DemoCanvasWidget\";\r\n+\r\n+\r\n+// define a custom node component\r\n+const CustomNode = (props) => {\r\n+    // use a ref to access the underlying DOM element\r\n+    const nodeRef = useRef();\r\n+\r\n+    // use an effect to update the node position and size\r\n+    useEffect(() => {\r\n+        // get the node model from the props\r\n+        const node = props.node;\r\n+\r\n+        // get the DOM element\r\n+        const element = nodeRef.current;\r\n+\r\n+        // update the node position and size\r\n+        node.setPosition(element.offsetLeft, element.offsetTop);\r\n+        node.setSize(element.offsetWidth, element.offsetHeight);\r\n+    });\r\n+\r\n+    // return a JSX element that represents the node\r\n+    return (\r\n+        <div\r\n+            ref={nodeRef}\r\n+            className=\"custom-node\"\r\n+            style={{\r\n+                position: \"absolute\",\r\n+                width: 100,\r\n+                height: 100,\r\n+                backgroundColor: props.node.color,\r\n+            }}\r\n+        >\r\n+            <p>{props.node.name}</p>\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+// define a custom link component\r\n+const CustomLink = (props) => {\r\n+    // use a ref to access the underlying DOM element\r\n+    const linkRef = useRef();\r\n+\r\n+    // use an effect to update the link points\r\n+    useEffect(() => {\r\n+        // get the link model from the props\r\n+        const link = props.link;\r\n+\r\n+        // get the DOM element\r\n+        const element = linkRef.current;\r\n+\r\n+        // get the SVG path element\r\n+        const path = element.querySelector(\"path\");\r\n+\r\n+        // get the points from the path\r\n+        const points = path.getAttribute(\"d\").split(\" \");\r\n+\r\n+        // update the link points\r\n+        link.setPoints([\r\n+            link.getPoint(0),\r\n+            new DefaultPortModel({\r\n+                x: parseInt(points[1]),\r\n+                y: parseInt(points[2]),\r\n+            }),\r\n+            new DefaultPortModel({\r\n+                x: parseInt(points[4]),\r\n+                y: parseInt(points[5]),\r\n+            }),\r\n+            link.getPoint(link.getPoints().length - 1),\r\n+        ]);\r\n+    });\r\n+\r\n+    // return a JSX element that represents the link\r\n+    return (\r\n+        <div ref={linkRef} className=\"custom-link\">\r\n+            {props.children}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+// define a functional component that renders the diagram\r\n+const Diagram = () => {\r\n+    // create a ref to store the diagram engine\r\n+    const engineRef = useRef();\r\n+\r\n+    \r\n+    // use an effect to initialize the diagram engine and model\r\n+    useEffect(() => {\r\n+        // create a new diagram engine\r\n+        const engine = createEngine();\r\n+        //engine.getNodeFactories().registerFactory(new CustomNodeFactory());\r\n+\r\n+        // create a new diagram model\r\n+        const model = new DiagramModel();\r\n+\r\n+        // create some custom nodes\r\n+        const node1 = new DefaultNodeModel({\r\n+            name: \"Node 1\",\r\n+            color: \"red\",\r\n+        });\r\n+        node1.setPosition(100, 100);\r\n+        node1.addPort(new DefaultPortModel({ name: \"out\", position: \"right\" }));\r\n+\r\n+\r\n+        const node2 = new DefaultNodeModel({\r\n+            name: \"Node 2\",\r\n+            color: \"green\",\r\n+        });\r\n+        node2.setPosition(400, 100);\r\n+        // create and add a port named \"in\" with the position \"left\"\r\n+        node2.addPort(new DefaultPortModel({ name: \"in\", position: \"left\" }));\r\n+        // create and add a port named \"out\" with the position \"right\"\r\n+        node2.addPort(new DefaultPortModel({ name: \"out\", position: \"right\" }));\r\n+\r\n+        const node3 = new DefaultNodeModel({\r\n+            name: \"Node 3\",\r\n+            color: \"blue\",\r\n+        });\r\n+        node3.setPosition(400, 400);\r\n+        // create and add a port named \"in\" with the position \"left\"\r\n+        node3.addPort(new DefaultPortModel({ name: \"in\", position: \"left\" }));\r\n+\r\n+        // create some custom links\r\n+        const link1 = new DefaultLinkModel();\r\n+        link1.setSourcePort(node1.getPort(\"out\"));\r\n+        link1.setTargetPort(node2.getPort(\"in\"));\r\n+\r\n+        const link2 = new DefaultLinkModel();\r\n+        link2.setSourcePort(node2.getPort(\"out\"));\r\n+        link2.setTargetPort(node3.getPort(\"in\"));\r\n+\r\n+        // add the nodes and links to the model\r\n+        model.addAll(node1, node2, node3, link1, link2);\r\n+\r\n+        // register the custom components to the engine\r\n+        engine.getNodeFactories().registerFactory({\r\n+            type: \"default\",\r\n+            getNewInstance: () => new DefaultNodeModel(),\r\n+            getWidget: (event) => <CustomNode node={event.model} />,\r\n+        });\r\n+\r\n+        engine.getLinkFactories().registerFactory({\r\n+            type: \"default\",\r\n+            getNewInstance: () => new DefaultLinkModel(),\r\n+            getWidget: (event) => <CustomLink link={event.model} />,\r\n+        });\r\n+\r\n+        \r\n+        // set the model to the engine\r\n+        engine.setModel(model);\r\n+\r\n+        // store the engine in the ref\r\n+        engineRef.current = engine;\r\n+    }, []);\r\n+    \r\n+\r\n+    // use a sample rest api for models\r\n+    const fetchModels = () => {\r\n+        return new Promise((resolve) => {\r\n+            setTimeout(() => {\r\n+                // simulate some data from the server\r\n+                const data = [\r\n+                    { name: \"Node 4\", color: \"yellow\", x: 100, y: 400 },\r\n+                    { name: \"Node 5\", color: \"purple\", x: 250, y: 250 },\r\n+                ];\r\n+                resolve(data);\r\n+            }, 1000);\r\n+        });\r\n+    };\r\n+\r\n+    // use an effect to update the model with the data from the server\r\n+    useEffect(() => {\r\n+        // get the engine and model from the ref\r\n+        const engine = engineRef.current;\r\n+        const model = engine.getModel();\r\n+\r\n+        // fetch the models from the server\r\n+        fetchModels().then((data) => {\r\n+            // create new nodes from the data\r\n+            const newNodes = data.map((item) => {\r\n+                const node = new DefaultNodeModel(item);\r\n+                node.setPosition(item.x, item.y);\r\n+                return node;\r\n+            });\r\n+\r\n+            // add the new nodes to the model\r\n+            model.addAll(...newNodes);\r\n+\r\n+            // update the engine\r\n+            engine.repaintCanvas();\r\n+        });\r\n+    }, []);\r\n+\r\n+    // return a JSX element that renders the diagram\r\n+    return (\r\n+        <div\r\n+            style={{\r\n+                height: \"100vh\",\r\n+                width: \"100vw\",\r\n+                backgroundColor: \"lightgray\",\r\n+            }}\r\n+        >\r\n+            {engineRef.current && (\r\n+                   <DemoCanvasWidget>\r\n+                <CanvasWidget engine={engineRef.current} className=\"canvas\" />\r\n+                </DemoCanvasWidget>\r\n+            )}\r\n+        </div>\r\n+    );\r\n+};\r\n+\r\n+export default Diagram;\r\n"
                }
            ],
            "date": 1706944886577,
            "name": "Commit-0",
            "content": "// import React and the library\r\nimport React, { useEffect, useRef } from \"react\";\r\nimport createEngine, {\r\n  DiagramModel,\r\n  DefaultNodeModel,\r\n  DefaultLinkModel,\r\n  DefaultPortModel,\r\n  DiagramEngine,\r\n} from \"@projectstorm/react-diagrams\";\r\n\r\n// define a custom node component\r\nconst CustomNode = (props) => {\r\n  // use a ref to access the underlying DOM element\r\n  const nodeRef = useRef();\r\n\r\n  // use an effect to update the node position and size\r\n  useEffect(() => {\r\n    // get the node model from the props\r\n    const node = props.node;\r\n\r\n    // get the DOM element\r\n    const element = nodeRef.current;\r\n\r\n    // update the node position and size\r\n    node.setPosition(element.offsetLeft, element.offsetTop);\r\n    node.setSize(element.offsetWidth, element.offsetHeight);\r\n  });\r\n\r\n  // return a JSX element that represents the node\r\n  return (\r\n    <div\r\n      ref={nodeRef}\r\n      className=\"custom-node\"\r\n      style={{\r\n        position: \"absolute\",\r\n        width: 100,\r\n        height: 100,\r\n        backgroundColor: props.node.color,\r\n      }}\r\n    >\r\n      <p>{props.node.name}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\n// define a custom link component\r\nconst CustomLink = (props) => {\r\n  // use a ref to access the underlying DOM element\r\n  const linkRef = useRef();\r\n\r\n  // use an effect to update the link points\r\n  useEffect(() => {\r\n    // get the link model from the props\r\n    const link = props.link;\r\n\r\n    // get the DOM element\r\n    const element = linkRef.current;\r\n\r\n    // get the SVG path element\r\n    const path = element.querySelector(\"path\");\r\n\r\n    // get the points from the path\r\n    const points = path.getAttribute(\"d\").split(\" \");\r\n\r\n    // update the link points\r\n    link.setPoints([\r\n      link.getPoint(0),\r\n      new DefaultPortModel({\r\n        x: parseInt(points[1]),\r\n        y: parseInt(points[2]),\r\n      }),\r\n      new DefaultPortModel({\r\n        x: parseInt(points[4]),\r\n        y: parseInt(points[5]),\r\n      }),\r\n      link.getPoint(link.getPoints().length - 1),\r\n    ]);\r\n  });\r\n\r\n  // return a JSX element that represents the link\r\n  return (\r\n    <div ref={linkRef} className=\"custom-link\">\r\n      {props.children}\r\n    </div>\r\n  );\r\n};\r\n\r\n// define a functional component that renders the diagram\r\nconst Diagram = () => {\r\n  // create a ref to store the diagram engine\r\n  const engineRef = useRef();\r\n\r\n  // use an effect to initialize the diagram engine and model\r\n  useEffect(() => {\r\n    // create a new diagram engine\r\n    const engine = createEngine();\r\n\r\n    // create a new diagram model\r\n    const model = new DiagramModel();\r\n\r\n    // create some custom nodes\r\n    const node1 = new DefaultNodeModel({\r\n      name: \"Node 1\",\r\n      color: \"red\",\r\n    });\r\n    node1.setPosition(100, 100);\r\n\r\n    const node2 = new DefaultNodeModel({\r\n      name: \"Node 2\",\r\n      color: \"green\",\r\n    });\r\n    node2.setPosition(400, 100);\r\n\r\n    const node3 = new DefaultNodeModel({\r\n      name: \"Node 3\",\r\n      color: \"blue\",\r\n    });\r\n    node3.setPosition(400, 400);\r\n\r\n    // create some custom links\r\n    const link1 = new DefaultLinkModel();\r\n    link1.setSourcePort(node1.getPort(\"out\"));\r\n    link1.setTargetPort(node2.getPort(\"in\"));\r\n\r\n    const link2 = new DefaultLinkModel();\r\n    link2.setSourcePort(node2.getPort(\"out\"));\r\n    link2.setTargetPort(node3.getPort(\"in\"));\r\n\r\n    // add the nodes and links to the model\r\n    model.addAll(node1, node2, node3, link1, link2);\r\n\r\n    // register the custom components to the engine\r\n    engine.getNodeFactories().registerFactory({\r\n      type: \"default\",\r\n      getNewInstance: () => new DefaultNodeModel(),\r\n      getWidget: (event) => <CustomNode node={event.model} />,\r\n    });\r\n\r\n    engine.getLinkFactories().registerFactory({\r\n      type: \"default\",\r\n      getNewInstance: () => new DefaultLinkModel(),\r\n      getWidget: (event) => <CustomLink link={event.model} />,\r\n    });\r\n\r\n    // set the model to the engine\r\n    engine.setModel(model);\r\n\r\n    // store the engine in the ref\r\n    engineRef.current = engine;\r\n  }, []);\r\n\r\n  // use a sample rest api for models\r\n  const fetchModels = () => {\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        // simulate some data from the server\r\n        const data = [\r\n          { name: \"Node 4\", color: \"yellow\", x: 100, y: 400 },\r\n          { name: \"Node 5\", color: \"purple\", x: 250, y: 250 },\r\n        ];\r\n        resolve(data);\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  // use an effect to update the model with the data from the server\r\n  useEffect(() => {\r\n    // get the engine and model from the ref\r\n    const engine = engineRef.current;\r\n    const model = engine.getModel();\r\n\r\n    // fetch the models from the server\r\n    fetchModels().then((data) => {\r\n      // create new nodes from the data\r\n      const newNodes = data.map((item) => {\r\n        const node = new DefaultNodeModel(item);\r\n        node.setPosition(item.x, item.y);\r\n        return node;\r\n      });\r\n\r\n      // add the new nodes to the model\r\n      model.addAll(...newNodes);\r\n\r\n      // update the engine\r\n      engine.repaintCanvas();\r\n    });\r\n  }, []);\r\n\r\n  // return a JSX element that renders the diagram\r\n  return (\r\n    <div\r\n      style={{\r\n        height: \"100vh\",\r\n        width: \"100vw\",\r\n        backgroundColor: \"lightgray\",\r\n      }}\r\n    >\r\n      {engineRef.current && (\r\n        <CanvasWidget engine={engineRef.current} className=\"canvas\" />\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Diagram;\r\n"
        }
    ]
}