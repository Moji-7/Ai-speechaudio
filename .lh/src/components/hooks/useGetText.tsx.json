{
    "sourceFile": "src/components/hooks/useGetText.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 19,
            "patches": [
                {
                    "date": 1706600710985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1706603575899,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,13 +1,11 @@\n import { useQuery } from \"@tanstack/react-query\";\r\n-import { SearchParamsOrderItem } from \"../entity/SearchQueries\";\r\n \r\n export const useGetText = (params: string) => {\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n         // Specify the query key as the item.title\r\n         queryKey: ['useGetText', params],\r\n-        // Specify the query function as an async arrow function that uses fetch to make the request\r\n         queryFn: async () => {\r\n             // Try to fetch the data from the API\r\n             try {\r\n \r\n@@ -19,23 +17,19 @@\n                     headers: {\r\n                         \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n                     },\r\n                 });\r\n-\r\n-                // If the response is not OK, throw an error object with the status and message\r\n                 if (!response.ok) {\r\n                     throw { status: response.status, message: response.statusText };\r\n                 }\r\n                 // Parse the response data as JSON and return it\r\n                 const data: any = await response.json();\r\n                 return data;\r\n             } catch (error) {\r\n-                // If there is an error, throw it\r\n                 throw error;\r\n             }\r\n         },\r\n         staleTime: 1000 * 60 * 5,\r\n     });\r\n-    // Return an object with the data, error, isLoading, and isError properties from the query\r\n     return { data, error, isLoading, isError };\r\n }\r\n \r\n"
                },
                {
                    "date": 1706682066990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -10,9 +10,9 @@\n             try {\r\n \r\n                 //const queryString = objectToQueryString(params);\r\n                 const searchParams = new URLSearchParams(params);\r\n-                const url = \"http://localhost:3222/incredibles/all?\" + searchParams;\r\n+                const url = \"/api/projects?page=\" + searchParams;\r\n                 const response = await fetch(url, {\r\n                     method: \"GET\",\r\n                     headers: {\r\n                         \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n"
                },
                {
                    "date": 1706682100551,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,15 +4,16 @@\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError } = useQuery({\r\n         // Specify the query key as the item.title\r\n         queryKey: ['useGetText', params],\r\n+\r\n         queryFn: async () => {\r\n             // Try to fetch the data from the API\r\n             try {\r\n \r\n                 //const queryString = objectToQueryString(params);\r\n                 const searchParams = new URLSearchParams(params);\r\n-                const url = \"/api/projects?page=\" + searchParams;\r\n+                const url = \"http://localhost:3222/incredibles/all?\" + searchParams;\r\n                 const response = await fetch(url, {\r\n                     method: \"GET\",\r\n                     headers: {\r\n                         \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n"
                },
                {
                    "date": 1706684681043,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -6,9 +6,8 @@\n         // Specify the query key as the item.title\r\n         queryKey: ['useGetText', params],\r\n \r\n         queryFn: async () => {\r\n-            // Try to fetch the data from the API\r\n             try {\r\n \r\n                 //const queryString = objectToQueryString(params);\r\n                 const searchParams = new URLSearchParams(params);\r\n@@ -21,9 +20,8 @@\n                 });\r\n                 if (!response.ok) {\r\n                     throw { status: response.status, message: response.statusText };\r\n                 }\r\n-                // Parse the response data as JSON and return it\r\n                 const data: any = await response.json();\r\n                 return data;\r\n             } catch (error) {\r\n                 throw error;\r\n"
                },
                {
                    "date": 1706686517362,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { useQuery } from \"@tanstack/react-query\";\r\n \r\n export const useGetText = (params: string) => {\r\n     // Use the useQuery hook to fetch the data from the API\r\n-    const { data, error, isLoading, isError } = useQuery({\r\n+    const { data, error, isLoading, isError, refetch } = useQuery({\r\n         // Specify the query key as the item.title\r\n         queryKey: ['useGetText', params],\r\n \r\n         queryFn: async () => {\r\n@@ -28,7 +28,7 @@\n             }\r\n         },\r\n         staleTime: 1000 * 60 * 5,\r\n     });\r\n-    return { data, error, isLoading, isError };\r\n+    return { data, error, isLoading, isError,refetch };\r\n }\r\n \r\n"
                },
                {
                    "date": 1706687446168,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { useQuery } from \"@tanstack/react-query\";\r\n \r\n export const useGetText = (params: string) => {\r\n     // Use the useQuery hook to fetch the data from the API\r\n-    const { data, error, isLoading, isError, refetch } = useQuery({\r\n+    const { data, error, isLoading, isError, fetchNextPage, refetchActivePages  } = useQuery({\r\n         // Specify the query key as the item.title\r\n         queryKey: ['useGetText', params],\r\n \r\n         queryFn: async () => {\r\n@@ -28,7 +28,7 @@\n             }\r\n         },\r\n         staleTime: 1000 * 60 * 5,\r\n     });\r\n-    return { data, error, isLoading, isError,refetch };\r\n+    return { data, error, isLoading, isError,fetchNextPage, refetchActivePages  };\r\n }\r\n \r\n"
                },
                {
                    "date": 1706687553569,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n-import { useQuery } from \"@tanstack/react-query\";\r\n+import { useInfiniteQuery, useQuery } from \"@tanstack/react-query\";\r\n \r\n export const useGetText = (params: string) => {\r\n     // Use the useQuery hook to fetch the data from the API\r\n-    const { data, error, isLoading, isError, fetchNextPage, refetchActivePages  } = useQuery({\r\n+    const { data, error, isLoading, isError, fetchNextPage, refetch  } = useInfiniteQuery({\r\n         // Specify the query key as the item.title\r\n         queryKey: ['useGetText', params],\r\n \r\n         queryFn: async () => {\r\n@@ -28,7 +28,7 @@\n             }\r\n         },\r\n         staleTime: 1000 * 60 * 5,\r\n     });\r\n-    return { data, error, isLoading, isError,fetchNextPage, refetchActivePages  };\r\n+    return { data, error, isLoading, isError,fetchNextPage, refetch  };\r\n }\r\n \r\n"
                },
                {
                    "date": 1706687677271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n-import { useInfiniteQuery, useQuery } from \"@tanstack/react-query\";\r\n+import { useQuery } from \"@tanstack/react-query\";\r\n \r\n export const useGetText = (params: string) => {\r\n     // Use the useQuery hook to fetch the data from the API\r\n-    const { data, error, isLoading, isError, fetchNextPage, refetch  } = useInfiniteQuery({\r\n+    const { data, error, isLoading, isError, refetch } = useQuery({\r\n         // Specify the query key as the item.title\r\n         queryKey: ['useGetText', params],\r\n \r\n         queryFn: async () => {\r\n@@ -28,7 +28,7 @@\n             }\r\n         },\r\n         staleTime: 1000 * 60 * 5,\r\n     });\r\n-    return { data, error, isLoading, isError,fetchNextPage, refetch  };\r\n+    return { data, error, isLoading, isError,ref };\r\n }\r\n \r\n"
                },
                {
                    "date": 1706691108271,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -21,14 +21,15 @@\n                 if (!response.ok) {\r\n                     throw { status: response.status, message: response.statusText };\r\n                 }\r\n                 const data: any = await response.json();\r\n+                const content:TextContent={id:1,title:\"current api result\" , content: data.map((item:any) => item.title_en).join('. ')}\r\n                 return data;\r\n             } catch (error) {\r\n                 throw error;\r\n             }\r\n         },\r\n         staleTime: 1000 * 60 * 5,\r\n     });\r\n-    return { data, error, isLoading, isError,ref };\r\n+    return { data, error, isLoading, isError,content,refetch };\r\n }\r\n \r\n"
                },
                {
                    "date": 1706691162229,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,8 @@\n import { useQuery } from \"@tanstack/react-query\";\r\n \r\n export const useGetText = (params: string) => {\r\n+    let content;\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError, refetch } = useQuery({\r\n         // Specify the query key as the item.title\r\n         queryKey: ['useGetText', params],\r\n@@ -21,9 +22,9 @@\n                 if (!response.ok) {\r\n                     throw { status: response.status, message: response.statusText };\r\n                 }\r\n                 const data: any = await response.json();\r\n-                const content:TextContent={id:1,title:\"current api result\" , content: data.map((item:any) => item.title_en).join('. ')}\r\n+                content={id:1,title:\"current api result\" , content: data.map((item:any) => item.title_en).join('. ')} as TextContent\r\n                 return data;\r\n             } catch (error) {\r\n                 throw error;\r\n             }\r\n"
                },
                {
                    "date": 1706691316784,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { useQuery } from \"@tanstack/react-query\";\r\n+import { TextContent } from \"../DTO/dto\";\r\n \r\n export const useGetText = (params: string) => {\r\n     let content;\r\n     // Use the useQuery hook to fetch the data from the API\r\n"
                },
                {
                    "date": 1706691444921,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,9 +1,9 @@\n import { useQuery } from \"@tanstack/react-query\";\r\n import { TextContent } from \"../DTO/dto\";\r\n \r\n export const useGetText = (params: string) => {\r\n-    let content;\r\n+    let content : TextContent ;\r\n     // Use the useQuery hook to fetch the data from the API\r\n     const { data, error, isLoading, isError, refetch } = useQuery({\r\n         // Specify the query key as the item.title\r\n         queryKey: ['useGetText', params],\r\n"
                },
                {
                    "date": 1706691715011,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,14 +24,14 @@\n                     throw { status: response.status, message: response.statusText };\r\n                 }\r\n                 const data: any = await response.json();\r\n                 content={id:1,title:\"current api result\" , content: data.map((item:any) => item.title_en).join('. ')} as TextContent\r\n-                return data;\r\n+                return {data,content};\r\n             } catch (error) {\r\n                 throw error;\r\n             }\r\n         },\r\n         staleTime: 1000 * 60 * 5,\r\n     });\r\n-    return { data, error, isLoading, isError,content,refetch };\r\n+    return { data:data.data, error, isLoading, isError,content:data.content,refetch };\r\n }\r\n \r\n"
                },
                {
                    "date": 1706691741363,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -31,7 +31,7 @@\n             }\r\n         },\r\n         staleTime: 1000 * 60 * 5,\r\n     });\r\n-    return { data:data.data, error, isLoading, isError,content:data.content,refetch };\r\n+    return { data, error, isLoading, isError,refetch };\r\n }\r\n \r\n"
                },
                {
                    "date": 1706691749660,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -24,9 +24,10 @@\n                     throw { status: response.status, message: response.statusText };\r\n                 }\r\n                 const data: any = await response.json();\r\n                 content={id:1,title:\"current api result\" , content: data.map((item:any) => item.title_en).join('. ')} as TextContent\r\n-                return {data,content};\r\n+                //return {data,content};\r\n+                return {data};\r\n             } catch (error) {\r\n                 throw error;\r\n             }\r\n         },\r\n"
                },
                {
                    "date": 1706691778515,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -25,9 +25,9 @@\n                 }\r\n                 const data: any = await response.json();\r\n                 content={id:1,title:\"current api result\" , content: data.map((item:any) => item.title_en).join('. ')} as TextContent\r\n                 //return {data,content};\r\n-                return {data};\r\n+                return data;\r\n             } catch (error) {\r\n                 throw error;\r\n             }\r\n         },\r\n"
                },
                {
                    "date": 1706692196754,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,11 +1,10 @@\n import { useQuery } from \"@tanstack/react-query\";\r\n import { TextContent } from \"../DTO/dto\";\r\n \r\n export const useGetText = (params: string) => {\r\n-    let content : TextContent ;\r\n     // Use the useQuery hook to fetch the data from the API\r\n-    const { data, error, isLoading, isError, refetch } = useQuery({\r\n+    const { data, error, isLoading, isError, refetch } = useQuery<TextContent>({\r\n         // Specify the query key as the item.title\r\n         queryKey: ['useGetText', params],\r\n \r\n         queryFn: async () => {\r\n@@ -23,16 +22,21 @@\n                 if (!response.ok) {\r\n                     throw { status: response.status, message: response.statusText };\r\n                 }\r\n                 const data: any = await response.json();\r\n-                content={id:1,title:\"current api result\" , content: data.map((item:any) => item.title_en).join('. ')} as TextContent\r\n-                //return {data,content};\r\n-                return data;\r\n+                // Return the content object directly from the queryFn\r\n+                return {\r\n+                  id: 1,\r\n+                  title: \"current api result\",\r\n+                  content: data.map((item: any) => item.title_en).join('. ')\r\n+                };\r\n             } catch (error) {\r\n                 throw error;\r\n             }\r\n         },\r\n         staleTime: 1000 * 60 * 5,\r\n     });\r\n-    return { data, error, isLoading, isError,refetch };\r\n+    // Use object destructuring to assign the data object to a content variable\r\n+    const { data: content } = data;\r\n+    // Return the content variable along with the other properties\r\n+    return { content, error, isLoading, isError, refetch };\r\n }\r\n-\r\n"
                },
                {
                    "date": 1706692281447,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -35,8 +35,8 @@\n         },\r\n         staleTime: 1000 * 60 * 5,\r\n     });\r\n     // Use object destructuring to assign the data object to a content variable\r\n-    const { data: content } = data;\r\n+    //const { data: content } = data;\r\n     // Return the content variable along with the other properties\r\n-    return { content, error, isLoading, isError, refetch };\r\n+    return { data, error, isLoading, isError, refetch };\r\n }\r\n"
                },
                {
                    "date": 1706692312862,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,10 +1,11 @@\n import { useQuery } from \"@tanstack/react-query\";\r\n import { TextContent } from \"../DTO/dto\";\r\n \r\n export const useGetText = (params: string) => {\r\n+    let content : TextContent ;\r\n     // Use the useQuery hook to fetch the data from the API\r\n-    const { data, error, isLoading, isError, refetch } = useQuery<TextContent>({\r\n+    const { data, error, isLoading, isError, refetch } = useQuery({\r\n         // Specify the query key as the item.title\r\n         queryKey: ['useGetText', params],\r\n \r\n         queryFn: async () => {\r\n@@ -22,21 +23,16 @@\n                 if (!response.ok) {\r\n                     throw { status: response.status, message: response.statusText };\r\n                 }\r\n                 const data: any = await response.json();\r\n-                // Return the content object directly from the queryFn\r\n-                return {\r\n-                  id: 1,\r\n-                  title: \"current api result\",\r\n-                  content: data.map((item: any) => item.title_en).join('. ')\r\n-                };\r\n+                content={id:1,title:\"current api result\" , content: data.map((item:any) => item.title_en).join('. ')} as TextContent\r\n+                //return {data,content};\r\n+                return data;\r\n             } catch (error) {\r\n                 throw error;\r\n             }\r\n         },\r\n         staleTime: 1000 * 60 * 5,\r\n     });\r\n-    // Use object destructuring to assign the data object to a content variable\r\n-    //const { data: content } = data;\r\n-    // Return the content variable along with the other properties\r\n-    return { data, error, isLoading, isError, refetch };\r\n+    return { data, error, isLoading, isError,refetch };\r\n }\r\n+\r\n"
                }
            ],
            "date": 1706600710985,
            "name": "Commit-0",
            "content": "import { useQuery } from \"@tanstack/react-query\";\r\nimport { SearchParamsOrderItem } from \"../entity/SearchQueries\";\r\n\r\nexport const useGetText = (params: string) => {\r\n    // Use the useQuery hook to fetch the data from the API\r\n    const { data, error, isLoading, isError } = useQuery({\r\n        // Specify the query key as the item.title\r\n        queryKey: ['useGetText', params],\r\n        // Specify the query function as an async arrow function that uses fetch to make the request\r\n        queryFn: async () => {\r\n            // Try to fetch the data from the API\r\n            try {\r\n\r\n                //const queryString = objectToQueryString(params);\r\n                const searchParams = new URLSearchParams(params);\r\n                const url = \"http://localhost:3222/incredibles/all?\" + searchParams;\r\n                const response = await fetch(url, {\r\n                    method: \"GET\",\r\n                    headers: {\r\n                        \"Content-Type\": \"application/x-www-form-urlencoded; charset=UTF-8\",\r\n                    },\r\n                });\r\n\r\n                // If the response is not OK, throw an error object with the status and message\r\n                if (!response.ok) {\r\n                    throw { status: response.status, message: response.statusText };\r\n                }\r\n                // Parse the response data as JSON and return it\r\n                const data: any = await response.json();\r\n                return data;\r\n            } catch (error) {\r\n                // If there is an error, throw it\r\n                throw error;\r\n            }\r\n        },\r\n        staleTime: 1000 * 60 * 5,\r\n    });\r\n    // Return an object with the data, error, isLoading, and isError properties from the query\r\n    return { data, error, isLoading, isError };\r\n}\r\n\r\n"
        }
    ]
}