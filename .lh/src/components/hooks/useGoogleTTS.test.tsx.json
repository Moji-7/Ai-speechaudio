{
    "sourceFile": "src/components/hooks/useGoogleTTS.test.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 7,
            "patches": [
                {
                    "date": 1706613988985,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1706614400715,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,64 +1,51 @@\n-// Import the libraries\r\n-import { renderHook } from '@testing-library/react-hooks';\r\n-// import { TextToSpeechClient } from '@google-cloud/text-to-speech';\r\n-import useGoogleTTS from './useGoogleTTS';\r\n+// Import the TextToSpeechClient from the Google Cloud client library\r\n+import { TextToSpeechClient } from '@google-cloud/text-to-speech';\r\n \r\n-// // Create a new instance of the TextToSpeechClient\r\n-// const client = new TextToSpeechClient({\r\n-//   // Replace with your Google Cloud credentials\r\n-//   projectId: 'your-project-id',\r\n-//   keyFilename: 'your-key-file.json',\r\n-// });\r\n+// Mock the entire @google-cloud/text-to-speech module\r\n+jest.mock('@google-cloud/text-to-speech');\r\n \r\n-// Mock the TextToSpeechClient's synthesizeSpeech method\r\n-jest.mock('@google-cloud/text-to-speech', () => ({\r\n-  TextToSpeechClient: jest.fn(() => ({\r\n+// Create a mock constructor that returns a mock instance\r\n+TextToSpeechClient.mockImplementation(() => {\r\n+  return {\r\n+    // Mock the synthesizeSpeech method or any other methods you want to test\r\n     synthesizeSpeech: jest.fn(() => {\r\n-      // Return a mock audio content buffer\r\n+      // Return a mock audio content buffer or a mock error\r\n       return Promise.resolve([{\r\n         audioContent: Buffer.from('mock-audio-content'),\r\n       }]);\r\n     }),\r\n-  })),\r\n-}));\r\n+  };\r\n+});\r\n \r\n-// Define a mock SSML text\r\n-const mockSSML = '<speak>Hello, this is a mock SSML text.</speak>';\r\n+// Write your test code using the mock instance\r\n+test('mock TextToSpeechClient instance', async () => {\r\n+  // Create a new instance of the mock TextToSpeechClient\r\n+  const client = new TextToSpeechClient({\r\n+    // Replace with your Google Cloud credentials\r\n+    projectId: 'your-project-id',\r\n+    keyFilename: 'your-key-file.json',\r\n+  });\r\n \r\n-// Write the test code\r\n-test('plays and cancels speech from SSML text', async () => {\r\n-  // Test the useGoogleTTS hook with the mock SSML text\r\n-  const { result, waitFor, waitForNextUpdate } = renderHook(() => useGoogleTTS(mockSSML));\r\n+  // Call the synthesizeSpeech method with some mock parameters\r\n+  const response = await client.synthesizeSpeech({\r\n+    input: { ssml: '<speak>Hello, this is a mock SSML text.</speak>' },\r\n+    voice: { languageCode: 'en-US', name: 'en-US-Wavenet-A', ssmlGender: 'FEMALE' },\r\n+    audioConfig: { audioEncoding: 'MP3', sampleRateHertz: 24000, pitch: 0 },\r\n+  });\r\n \r\n-  // Expect the speaking and supported values to be false initially\r\n-  expect(result.current.speaking).toBe(false);\r\n-  expect(result.current.supported).toBe(false);\r\n+  // Expect the mock constructor to be called with the credentials\r\n+  expect(TextToSpeechClient).toHaveBeenCalledWith({\r\n+    projectId: 'your-project-id',\r\n+    keyFilename: 'your-key-file.json',\r\n+  });\r\n \r\n-  // Call the playSpeech method with the mock SSML text\r\n-  result.current.playSpeech(mockSSML);\r\n-\r\n-  // Wait for the next update of the hook\r\n-  await waitForNextUpdate();\r\n-\r\n-  // Expect the speaking and supported values to be true after playing the speech\r\n-  expect(result.current.speaking).toBe(true);\r\n-  expect(result.current.supported).toBe(true);\r\n-\r\n-  // Expect the synthesizeSpeech method to be called with the mock SSML text\r\n+  // Expect the mock synthesizeSpeech method to be called with the parameters\r\n   expect(client.synthesizeSpeech).toHaveBeenCalledWith({\r\n-    input: { ssml: mockSSML },\r\n-    // Replace with your desired voice configuration\r\n+    input: { ssml: '<speak>Hello, this is a mock SSML text.</speak>' },\r\n     voice: { languageCode: 'en-US', name: 'en-US-Wavenet-A', ssmlGender: 'FEMALE' },\r\n-    // Replace with your desired audio configuration\r\n     audioConfig: { audioEncoding: 'MP3', sampleRateHertz: 24000, pitch: 0 },\r\n   });\r\n \r\n-  // Call the cancel method to stop the speech\r\n-  result.current.cancel();\r\n-\r\n-  // Wait for the cancel method to take effect\r\n-  await waitFor(() => result.current.speaking === false);\r\n-\r\n-  // Expect the speaking value to be false after canceling the speech\r\n-  expect(result.current.speaking).toBe(false);\r\n+  // Expect the response to be the mock audio content buffer\r\n+  expect(response[0].audioContent).toEqual(Buffer.from('mock-audio-content'));\r\n });\r\n"
                },
                {
                    "date": 1706614673783,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,21 @@\n // Import the TextToSpeechClient from the Google Cloud client library\r\n import { TextToSpeechClient } from '@google-cloud/text-to-speech';\r\n \r\n-// Mock the entire @google-cloud/text-to-speech module\r\n-jest.mock('@google-cloud/text-to-speech');\r\n+// Spy on the TextToSpeechClient constructor\r\n+const constructorSpy = jest.spyOn(TextToSpeechClient.prototype, 'constructor');\r\n \r\n-// Create a mock constructor that returns a mock instance\r\n-TextToSpeechClient.mockImplementation(() => {\r\n-  return {\r\n-    // Mock the synthesizeSpeech method or any other methods you want to test\r\n-    synthesizeSpeech: jest.fn(() => {\r\n-      // Return a mock audio content buffer or a mock error\r\n-      return Promise.resolve([{\r\n-        audioContent: Buffer.from('mock-audio-content'),\r\n-      }]);\r\n-    }),\r\n-  };\r\n-});\r\n+// Spy on the synthesizeSpeech method\r\n+const synthesizeSpeechSpy = jest.spyOn(TextToSpeechClient.prototype, 'synthesizeSpeech');\r\n \r\n-// Write your test code using the mock instance\r\n-test('mock TextToSpeechClient instance', async () => {\r\n-  // Create a new instance of the mock TextToSpeechClient\r\n+// Mock the return value of the synthesizeSpeech method\r\n+synthesizeSpeechSpy.mockReturnValue(Promise.resolve([{\r\n+  audioContent: Buffer.from('mock-audio-content'),\r\n+}]));\r\n+\r\n+// Write your test code using the spy instance\r\n+test('spy TextToSpeechClient instance', async () => {\r\n+  // Create a new instance of the TextToSpeechClient\r\n   const client = new TextToSpeechClient({\r\n     // Replace with your Google Cloud credentials\r\n     projectId: 'your-project-id',\r\n     keyFilename: 'your-key-file.json',\r\n@@ -32,16 +27,16 @@\n     voice: { languageCode: 'en-US', name: 'en-US-Wavenet-A', ssmlGender: 'FEMALE' },\r\n     audioConfig: { audioEncoding: 'MP3', sampleRateHertz: 24000, pitch: 0 },\r\n   });\r\n \r\n-  // Expect the mock constructor to be called with the credentials\r\n-  expect(TextToSpeechClient).toHaveBeenCalledWith({\r\n+  // Expect the constructor spy to be called with the credentials\r\n+  expect(constructorSpy).toHaveBeenCalledWith({\r\n     projectId: 'your-project-id',\r\n     keyFilename: 'your-key-file.json',\r\n   });\r\n \r\n-  // Expect the mock synthesizeSpeech method to be called with the parameters\r\n-  expect(client.synthesizeSpeech).toHaveBeenCalledWith({\r\n+  // Expect the synthesizeSpeech spy to be called with the parameters\r\n+  expect(synthesizeSpeechSpy).toHaveBeenCalledWith({\r\n     input: { ssml: '<speak>Hello, this is a mock SSML text.</speak>' },\r\n     voice: { languageCode: 'en-US', name: 'en-US-Wavenet-A', ssmlGender: 'FEMALE' },\r\n     audioConfig: { audioEncoding: 'MP3', sampleRateHertz: 24000, pitch: 0 },\r\n   });\r\n"
                },
                {
                    "date": 1706616961979,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,26 @@\n // Import the TextToSpeechClient from the Google Cloud client library\r\n import { TextToSpeechClient } from '@google-cloud/text-to-speech';\r\n \r\n-// Spy on the TextToSpeechClient constructor\r\n-const constructorSpy = jest.spyOn(TextToSpeechClient.prototype, 'constructor');\r\n+// Mock the entire @google-cloud/text-to-speech module\r\n+jest.mock('@google-cloud/text-to-speech');\r\n \r\n-// Spy on the synthesizeSpeech method\r\n-const synthesizeSpeechSpy = jest.spyOn(TextToSpeechClient.prototype, 'synthesizeSpeech');\r\n+// Create a mock constructor that returns a mock instance\r\n+TextToSpeechClient.mockImplementation(() => {\r\n+  return {\r\n+    // Mock the synthesizeSpeech method or any other methods you want to test\r\n+    synthesizeSpeech: jest.fn(() => {\r\n+      // Return a mock audio content buffer or a mock error\r\n+      return Promise.resolve([{\r\n+        audioContent: Buffer.from('mock-audio-content'),\r\n+      }]);\r\n+    }),\r\n+  };\r\n+});\r\n \r\n-// Mock the return value of the synthesizeSpeech method\r\n-synthesizeSpeechSpy.mockReturnValue(Promise.resolve([{\r\n-  audioContent: Buffer.from('mock-audio-content'),\r\n-}]));\r\n-\r\n-// Write your test code using the spy instance\r\n-test('spy TextToSpeechClient instance', async () => {\r\n-  // Create a new instance of the TextToSpeechClient\r\n+// Write your test code using the mock instance\r\n+test('mock TextToSpeechClient instance', async () => {\r\n+  // Create a new instance of the mock TextToSpeechClient\r\n   const client = new TextToSpeechClient({\r\n     // Replace with your Google Cloud credentials\r\n     projectId: 'your-project-id',\r\n     keyFilename: 'your-key-file.json',\r\n@@ -27,16 +32,16 @@\n     voice: { languageCode: 'en-US', name: 'en-US-Wavenet-A', ssmlGender: 'FEMALE' },\r\n     audioConfig: { audioEncoding: 'MP3', sampleRateHertz: 24000, pitch: 0 },\r\n   });\r\n \r\n-  // Expect the constructor spy to be called with the credentials\r\n-  expect(constructorSpy).toHaveBeenCalledWith({\r\n+  // Expect the mock constructor to be called with the credentials\r\n+  expect(TextToSpeechClient).toHaveBeenCalledWith({\r\n     projectId: 'your-project-id',\r\n     keyFilename: 'your-key-file.json',\r\n   });\r\n \r\n-  // Expect the synthesizeSpeech spy to be called with the parameters\r\n-  expect(synthesizeSpeechSpy).toHaveBeenCalledWith({\r\n+  // Expect the mock synthesizeSpeech method to be called with the parameters\r\n+  expect(client.synthesizeSpeech).toHaveBeenCalledWith({\r\n     input: { ssml: '<speak>Hello, this is a mock SSML text.</speak>' },\r\n     voice: { languageCode: 'en-US', name: 'en-US-Wavenet-A', ssmlGender: 'FEMALE' },\r\n     audioConfig: { audioEncoding: 'MP3', sampleRateHertz: 24000, pitch: 0 },\r\n   });\r\n"
                },
                {
                    "date": 1706617019100,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,26 +1,21 @@\n // Import the TextToSpeechClient from the Google Cloud client library\r\n import { TextToSpeechClient } from '@google-cloud/text-to-speech';\r\n \r\n-// Mock the entire @google-cloud/text-to-speech module\r\n-jest.mock('@google-cloud/text-to-speech');\r\n+// Spy on the TextToSpeechClient constructor\r\n+const constructorSpy = jest.spyOn(TextToSpeechClient.prototype, 'constructor');\r\n \r\n-// Create a mock constructor that returns a mock instance\r\n-TextToSpeechClient.mockImplementation(() => {\r\n-  return {\r\n-    // Mock the synthesizeSpeech method or any other methods you want to test\r\n-    synthesizeSpeech: jest.fn(() => {\r\n-      // Return a mock audio content buffer or a mock error\r\n-      return Promise.resolve([{\r\n-        audioContent: Buffer.from('mock-audio-content'),\r\n-      }]);\r\n-    }),\r\n-  };\r\n-});\r\n+// Spy on the synthesizeSpeech method\r\n+const synthesizeSpeechSpy = jest.spyOn(TextToSpeechClient.prototype, 'synthesizeSpeech');\r\n \r\n-// Write your test code using the mock instance\r\n-test('mock TextToSpeechClient instance', async () => {\r\n-  // Create a new instance of the mock TextToSpeechClient\r\n+// Mock the return value of the synthesizeSpeech method\r\n+synthesizeSpeechSpy.mockReturnValue(Promise.resolve([{\r\n+  audioContent: Buffer.from('mock-audio-content'),\r\n+}]));\r\n+\r\n+// Write your test code using the spy instance\r\n+test('spy TextToSpeechClient instance', async () => {\r\n+  // Create a new instance of the TextToSpeechClient\r\n   const client = new TextToSpeechClient({\r\n     // Replace with your Google Cloud credentials\r\n     projectId: 'your-project-id',\r\n     keyFilename: 'your-key-file.json',\r\n@@ -32,16 +27,16 @@\n     voice: { languageCode: 'en-US', name: 'en-US-Wavenet-A', ssmlGender: 'FEMALE' },\r\n     audioConfig: { audioEncoding: 'MP3', sampleRateHertz: 24000, pitch: 0 },\r\n   });\r\n \r\n-  // Expect the mock constructor to be called with the credentials\r\n-  expect(TextToSpeechClient).toHaveBeenCalledWith({\r\n+  // Expect the constructor spy to be called with the credentials\r\n+  expect(constructorSpy).toHaveBeenCalledWith({\r\n     projectId: 'your-project-id',\r\n     keyFilename: 'your-key-file.json',\r\n   });\r\n \r\n-  // Expect the mock synthesizeSpeech method to be called with the parameters\r\n-  expect(client.synthesizeSpeech).toHaveBeenCalledWith({\r\n+  // Expect the synthesizeSpeech spy to be called with the parameters\r\n+  expect(synthesizeSpeechSpy).toHaveBeenCalledWith({\r\n     input: { ssml: '<speak>Hello, this is a mock SSML text.</speak>' },\r\n     voice: { languageCode: 'en-US', name: 'en-US-Wavenet-A', ssmlGender: 'FEMALE' },\r\n     audioConfig: { audioEncoding: 'MP3', sampleRateHertz: 24000, pitch: 0 },\r\n   });\r\n"
                },
                {
                    "date": 1706617168249,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,21 +1,28 @@\n // Import the TextToSpeechClient from the Google Cloud client library\r\n+\r\n+\r\n import { TextToSpeechClient } from '@google-cloud/text-to-speech';\r\n \r\n-// Spy on the TextToSpeechClient constructor\r\n-const constructorSpy = jest.spyOn(TextToSpeechClient.prototype, 'constructor');\r\n+// Mock the entire @google-cloud/text-to-speech module\r\n+jest.mock('@google-cloud/text-to-speech');\r\n \r\n-// Spy on the synthesizeSpeech method\r\n-const synthesizeSpeechSpy = jest.spyOn(TextToSpeechClient.prototype, 'synthesizeSpeech');\r\n+// Create a mock constructor that returns a mock instance\r\n+TextToSpeechClient.mockImplementation(() => {\r\n+  return {\r\n+    // Mock the synthesizeSpeech method or any other methods you want to test\r\n+    synthesizeSpeech: jest.fn(() => {\r\n+      // Return a mock audio content buffer or a mock error\r\n+      return Promise.resolve([{\r\n+        audioContent: Buffer.from('mock-audio-content'),\r\n+      }]);\r\n+    }),\r\n+  };\r\n+});\r\n \r\n-// Mock the return value of the synthesizeSpeech method\r\n-synthesizeSpeechSpy.mockReturnValue(Promise.resolve([{\r\n-  audioContent: Buffer.from('mock-audio-content'),\r\n-}]));\r\n-\r\n-// Write your test code using the spy instance\r\n-test('spy TextToSpeechClient instance', async () => {\r\n-  // Create a new instance of the TextToSpeechClient\r\n+// Write your test code using the mock instance\r\n+test('mock TextToSpeechClient instance', async () => {\r\n+  // Create a new instance of the mock TextToSpeechClient\r\n   const client = new TextToSpeechClient({\r\n     // Replace with your Google Cloud credentials\r\n     projectId: 'your-project-id',\r\n     keyFilename: 'your-key-file.json',\r\n@@ -27,16 +34,16 @@\n     voice: { languageCode: 'en-US', name: 'en-US-Wavenet-A', ssmlGender: 'FEMALE' },\r\n     audioConfig: { audioEncoding: 'MP3', sampleRateHertz: 24000, pitch: 0 },\r\n   });\r\n \r\n-  // Expect the constructor spy to be called with the credentials\r\n-  expect(constructorSpy).toHaveBeenCalledWith({\r\n+  // Expect the mock constructor to be called with the credentials\r\n+  expect(TextToSpeechClient).toHaveBeenCalledWith({\r\n     projectId: 'your-project-id',\r\n     keyFilename: 'your-key-file.json',\r\n   });\r\n \r\n-  // Expect the synthesizeSpeech spy to be called with the parameters\r\n-  expect(synthesizeSpeechSpy).toHaveBeenCalledWith({\r\n+  // Expect the mock synthesizeSpeech method to be called with the parameters\r\n+  expect(client.synthesizeSpeech).toHaveBeenCalledWith({\r\n     input: { ssml: '<speak>Hello, this is a mock SSML text.</speak>' },\r\n     voice: { languageCode: 'en-US', name: 'en-US-Wavenet-A', ssmlGender: 'FEMALE' },\r\n     audioConfig: { audioEncoding: 'MP3', sampleRateHertz: 24000, pitch: 0 },\r\n   });\r\n"
                },
                {
                    "date": 1706617628988,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,7 +1,6 @@\n // Import the TextToSpeechClient from the Google Cloud client library\r\n \r\n-\r\n import { TextToSpeechClient } from '@google-cloud/text-to-speech';\r\n \r\n // Mock the entire @google-cloud/text-to-speech module\r\n jest.mock('@google-cloud/text-to-speech');\r\n"
                },
                {
                    "date": 1706617676120,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,52 +1,72 @@\n-// Import the TextToSpeechClient from the Google Cloud client library\r\n-\r\n+// Import the libraries\r\n+import { renderHook } from '@testing-library/react-hooks';\r\n import { TextToSpeechClient } from '@google-cloud/text-to-speech';\r\n+import useGoogleTTS from './useGoogleTTS';\r\n \r\n-// Mock the entire @google-cloud/text-to-speech module\r\n-jest.mock('@google-cloud/text-to-speech');\r\n-\r\n-// Create a mock constructor that returns a mock instance\r\n-TextToSpeechClient.mockImplementation(() => {\r\n+// Mock the entire @google-cloud/text-to-speech module with a factory function\r\n+jest.mock('@google-cloud/text-to-speech', () => {\r\n+  // Return the mock module object\r\n   return {\r\n-    // Mock the synthesizeSpeech method or any other methods you want to test\r\n-    synthesizeSpeech: jest.fn(() => {\r\n-      // Return a mock audio content buffer or a mock error\r\n-      return Promise.resolve([{\r\n-        audioContent: Buffer.from('mock-audio-content'),\r\n-      }]);\r\n+    // Define the mock TextToSpeechClient export\r\n+    TextToSpeechClient: jest.fn(() => {\r\n+      // Return the mock instance\r\n+      return {\r\n+        // Mock the synthesizeSpeech method or any other methods you want to test\r\n+        synthesizeSpeech: jest.fn(() => {\r\n+          // Return a mock audio content buffer or a mock error\r\n+          return Promise.resolve([{\r\n+            audioContent: Buffer.from('mock-audio-content'),\r\n+          }]);\r\n+        }),\r\n+      };\r\n     }),\r\n   };\r\n });\r\n \r\n-// Write your test code using the mock instance\r\n-test('mock TextToSpeechClient instance', async () => {\r\n-  // Create a new instance of the mock TextToSpeechClient\r\n-  const client = new TextToSpeechClient({\r\n-    // Replace with your Google Cloud credentials\r\n-    projectId: 'your-project-id',\r\n-    keyFilename: 'your-key-file.json',\r\n-  });\r\n+// Define a mock SSML text\r\n+const mockSSML = '<speak>Hello, this is a mock SSML text.</speak>';\r\n \r\n-  // Call the synthesizeSpeech method with some mock parameters\r\n-  const response = await client.synthesizeSpeech({\r\n-    input: { ssml: '<speak>Hello, this is a mock SSML text.</speak>' },\r\n-    voice: { languageCode: 'en-US', name: 'en-US-Wavenet-A', ssmlGender: 'FEMALE' },\r\n-    audioConfig: { audioEncoding: 'MP3', sampleRateHertz: 24000, pitch: 0 },\r\n-  });\r\n+// Write the test code\r\n+test('plays and cancels speech from SSML text', async () => {\r\n+  // Test the useGoogleTTS hook with the mock SSML text\r\n+  const { result, waitFor, waitForNextUpdate } = renderHook(() => useGoogleTTS(mockSSML));\r\n \r\n-  // Expect the mock constructor to be called with the credentials\r\n+  // Expect the speaking and supported values to be false initially\r\n+  expect(result.current.speaking).toBe(false);\r\n+  expect(result.current.supported).toBe(false);\r\n+\r\n+  // Call the playSpeech method with the mock SSML text\r\n+  result.current.playSpeech(mockSSML);\r\n+\r\n+  // Wait for the next update of the hook\r\n+  await waitForNextUpdate();\r\n+\r\n+  // Expect the speaking and supported values to be true after playing the speech\r\n+  expect(result.current.speaking).toBe(true);\r\n+  expect(result.current.supported).toBe(true);\r\n+\r\n+  // Expect the TextToSpeechClient constructor to be called with the credentials\r\n   expect(TextToSpeechClient).toHaveBeenCalledWith({\r\n+    // Replace with your Google Cloud credentials\r\n     projectId: 'your-project-id',\r\n     keyFilename: 'your-key-file.json',\r\n   });\r\n \r\n-  // Expect the mock synthesizeSpeech method to be called with the parameters\r\n-  expect(client.synthesizeSpeech).toHaveBeenCalledWith({\r\n-    input: { ssml: '<speak>Hello, this is a mock SSML text.</speak>' },\r\n+  // Expect the synthesizeSpeech method to be called with the mock SSML text\r\n+  expect(TextToSpeechClient.prototype.synthesizeSpeech).toHaveBeenCalledWith({\r\n+    input: { ssml: mockSSML },\r\n+    // Replace with your desired voice configuration\r\n     voice: { languageCode: 'en-US', name: 'en-US-Wavenet-A', ssmlGender: 'FEMALE' },\r\n+    // Replace with your desired audio configuration\r\n     audioConfig: { audioEncoding: 'MP3', sampleRateHertz: 24000, pitch: 0 },\r\n   });\r\n \r\n-  // Expect the response to be the mock audio content buffer\r\n-  expect(response[0].audioContent).toEqual(Buffer.from('mock-audio-content'));\r\n+  // Call the cancel method to stop the speech\r\n+  result.current.cancel();\r\n+\r\n+  // Wait for the cancel method to take effect\r\n+  await waitFor(() => result.current.speaking === false);\r\n+\r\n+  // Expect the speaking value to be false after canceling the speech\r\n+  expect(result.current.speaking).toBe(false);\r\n });\r\n"
                }
            ],
            "date": 1706613988985,
            "name": "Commit-0",
            "content": "// Import the libraries\r\nimport { renderHook } from '@testing-library/react-hooks';\r\n// import { TextToSpeechClient } from '@google-cloud/text-to-speech';\r\nimport useGoogleTTS from './useGoogleTTS';\r\n\r\n// // Create a new instance of the TextToSpeechClient\r\n// const client = new TextToSpeechClient({\r\n//   // Replace with your Google Cloud credentials\r\n//   projectId: 'your-project-id',\r\n//   keyFilename: 'your-key-file.json',\r\n// });\r\n\r\n// Mock the TextToSpeechClient's synthesizeSpeech method\r\njest.mock('@google-cloud/text-to-speech', () => ({\r\n  TextToSpeechClient: jest.fn(() => ({\r\n    synthesizeSpeech: jest.fn(() => {\r\n      // Return a mock audio content buffer\r\n      return Promise.resolve([{\r\n        audioContent: Buffer.from('mock-audio-content'),\r\n      }]);\r\n    }),\r\n  })),\r\n}));\r\n\r\n// Define a mock SSML text\r\nconst mockSSML = '<speak>Hello, this is a mock SSML text.</speak>';\r\n\r\n// Write the test code\r\ntest('plays and cancels speech from SSML text', async () => {\r\n  // Test the useGoogleTTS hook with the mock SSML text\r\n  const { result, waitFor, waitForNextUpdate } = renderHook(() => useGoogleTTS(mockSSML));\r\n\r\n  // Expect the speaking and supported values to be false initially\r\n  expect(result.current.speaking).toBe(false);\r\n  expect(result.current.supported).toBe(false);\r\n\r\n  // Call the playSpeech method with the mock SSML text\r\n  result.current.playSpeech(mockSSML);\r\n\r\n  // Wait for the next update of the hook\r\n  await waitForNextUpdate();\r\n\r\n  // Expect the speaking and supported values to be true after playing the speech\r\n  expect(result.current.speaking).toBe(true);\r\n  expect(result.current.supported).toBe(true);\r\n\r\n  // Expect the synthesizeSpeech method to be called with the mock SSML text\r\n  expect(client.synthesizeSpeech).toHaveBeenCalledWith({\r\n    input: { ssml: mockSSML },\r\n    // Replace with your desired voice configuration\r\n    voice: { languageCode: 'en-US', name: 'en-US-Wavenet-A', ssmlGender: 'FEMALE' },\r\n    // Replace with your desired audio configuration\r\n    audioConfig: { audioEncoding: 'MP3', sampleRateHertz: 24000, pitch: 0 },\r\n  });\r\n\r\n  // Call the cancel method to stop the speech\r\n  result.current.cancel();\r\n\r\n  // Wait for the cancel method to take effect\r\n  await waitFor(() => result.current.speaking === false);\r\n\r\n  // Expect the speaking value to be false after canceling the speech\r\n  expect(result.current.speaking).toBe(false);\r\n});\r\n"
        }
    ]
}