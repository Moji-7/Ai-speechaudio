{
    "sourceFile": "src/components/hooks/useParseText.tsx",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 4,
            "patches": [
                {
                    "date": 1706603575891,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                },
                {
                    "date": 1706690451702,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,18 +1,8 @@\n import { useState, useEffect } from \"react\";\r\n \r\n // Define the type for the text content object\r\n-type TextContent = {\r\n-  id: number;\r\n-  title: string;\r\n-  content: string;\r\n-};\r\n \r\n-// Define the type for the sentence object\r\n-type Sentence = {\r\n-  id: number;\r\n-  text: string;\r\n-};\r\n \r\n export const useParseText = (textContent: TextContent): Sentence[] => {\r\n   // Use state to store the sentences\r\n   const [sentences, setSentences] = useState<Sentence[]>([]);\r\n"
                },
                {
                    "date": 1706691309637,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -1,5 +1,6 @@\n import { useState, useEffect } from \"react\";\r\n+import { Sentence, TextContent } from \"../DTO/dto\";\r\n \r\n // Define the type for the text content object\r\n \r\n \r\n"
                },
                {
                    "date": 1706693663239,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -4,70 +4,72 @@\n // Define the type for the text content object\r\n \r\n \r\n export const useParseText = (textContent: TextContent): Sentence[] => {\r\n-  // Use state to store the sentences\r\n-  const [sentences, setSentences] = useState<Sentence[]>([]);\r\n+    // Use state to store the sentences\r\n+    const [sentences, setSentences] = useState<Sentence[]>([]);\r\n \r\n-  // Use useEffect hook to parse the text content into sentences\r\n-  useEffect(() => {\r\n-    // Define a function to split the text content by punctuation marks\r\n-    const splitText = (text: string): string[] => {\r\n-      // Use a regular expression to match the punctuation marks\r\n-      const regex = /([.?!])\\s*(?=[A-Z])/g;\r\n-      // Split the text by the punctuation marks and keep them in the result\r\n-      const splitText = text.split(regex);\r\n-      // Return the split text as an array of strings\r\n-      return splitText;\r\n-    };\r\n+    // Use useEffect hook to parse the text content into sentences\r\n+    useEffect(() => {\r\n+        if (textContent) {\r\n+            // Define a function to split the text content by punctuation marks\r\n+            const splitText = (text: string): string[] => {\r\n+                // Use a regular expression to match the punctuation marks\r\n+                const regex = /([.?!])\\s*(?=[A-Z])/g;\r\n+                // Split the text by the punctuation marks and keep them in the result\r\n+                const splitText = text.split(regex);\r\n+                // Return the split text as an array of strings\r\n+                return splitText;\r\n+            };\r\n \r\n-    // Define a function to join the split text into sentences\r\n-    const joinText = (splitText: string[]): string[] => {\r\n-      // Initialize an empty array to store the sentences\r\n-      const sentences: string[] = [];\r\n-      // Loop through the split text array\r\n-      for (let i = 0; i < splitText.length; i += 2) {\r\n-        // Check if the current element is the last one\r\n-        if (i === splitText.length - 1) {\r\n-          // Push the current element to the sentences array\r\n-          sentences.push(splitText[i]);\r\n-        } else {\r\n-          // Concatenate the current element and the next element to form a sentence\r\n-          const sentence = splitText[i] + splitText[i + 1];\r\n-          // Push the sentence to the sentences array\r\n-          sentences.push(sentence);\r\n-        }\r\n-      }\r\n-      // Return the sentences as an array of strings\r\n-      return sentences;\r\n-    };\r\n+            // Define a function to join the split text into sentences\r\n+            const joinText = (splitText: string[]): string[] => {\r\n+                // Initialize an empty array to store the sentences\r\n+                const sentences: string[] = [];\r\n+                // Loop through the split text array\r\n+                for (let i = 0; i < splitText.length; i += 2) {\r\n+                    // Check if the current element is the last one\r\n+                    if (i === splitText.length - 1) {\r\n+                        // Push the current element to the sentences array\r\n+                        sentences.push(splitText[i]);\r\n+                    } else {\r\n+                        // Concatenate the current element and the next element to form a sentence\r\n+                        const sentence = splitText[i] + splitText[i + 1];\r\n+                        // Push the sentence to the sentences array\r\n+                        sentences.push(sentence);\r\n+                    }\r\n+                }\r\n+                // Return the sentences as an array of strings\r\n+                return sentences;\r\n+            };\r\n \r\n-    // Define a function to create sentence objects from the sentences array\r\n-    const createSentences = (sentences: string[]): Sentence[] => {\r\n-      // Initialize an empty array to store the sentence objects\r\n-      const sentenceObjects: Sentence[] = [];\r\n-      // Loop through the sentences array\r\n-      for (let i = 0; i < sentences.length; i++) {\r\n-        // Create a sentence object with an id and a text\r\n-        const sentenceObject: Sentence = {\r\n-          id: i + 1,\r\n-          text: sentences[i],\r\n-        };\r\n-        // Push the sentence object to the sentence objects array\r\n-        sentenceObjects.push(sentenceObject);\r\n-      }\r\n-      // Return the sentence objects as an array of objects\r\n-      return sentenceObjects;\r\n-    };\r\n+            // Define a function to create sentence objects from the sentences array\r\n+            const createSentences = (sentences: string[]): Sentence[] => {\r\n+                // Initialize an empty array to store the sentence objects\r\n+                const sentenceObjects: Sentence[] = [];\r\n+                // Loop through the sentences array\r\n+                for (let i = 0; i < sentences.length; i++) {\r\n+                    // Create a sentence object with an id and a text\r\n+                    const sentenceObject: Sentence = {\r\n+                        id: i + 1,\r\n+                        text: sentences[i],\r\n+                    };\r\n+                    // Push the sentence object to the sentence objects array\r\n+                    sentenceObjects.push(sentenceObject);\r\n+                }\r\n+                // Return the sentence objects as an array of objects\r\n+                return sentenceObjects;\r\n+            };\r\n \r\n-    // Call the functions to parse the text content into sentences\r\n-    const splitedText = splitText(textContent.content);\r\n-    const sentences = joinText(splitedText);\r\n-    const sentenceObjects = createSentences(sentences);\r\n+            // Call the functions to parse the text content into sentences\r\n+            const splitedText = splitText(textContent.content);\r\n+            const sentences = joinText(splitedText);\r\n+            const sentenceObjects = createSentences(sentences);\r\n \r\n-    // Set the state with the sentence objects\r\n-    setSentences(sentenceObjects);\r\n-  }, [textContent]);\r\n+            // Set the state with the sentence objects\r\n+            setSentences(sentenceObjects);\r\n+        }\r\n+    }, [textContent]);\r\n \r\n-  // Return the sentences as an array of objects\r\n-  return sentences;\r\n+    // Return the sentences as an array of objects\r\n+    return sentences;\r\n };\r\n"
                },
                {
                    "date": 1706693736458,
                    "content": "Index: \n===================================================================\n--- \n+++ \n@@ -9,9 +9,9 @@\n     const [sentences, setSentences] = useState<Sentence[]>([]);\r\n \r\n     // Use useEffect hook to parse the text content into sentences\r\n     useEffect(() => {\r\n-        if (textContent) {\r\n+\r\n             // Define a function to split the text content by punctuation marks\r\n             const splitText = (text: string): string[] => {\r\n                 // Use a regular expression to match the punctuation marks\r\n                 const regex = /([.?!])\\s*(?=[A-Z])/g;\r\n@@ -58,18 +58,18 @@\n                 }\r\n                 // Return the sentence objects as an array of objects\r\n                 return sentenceObjects;\r\n             };\r\n+            if (textContent) {\r\n+                // Call the functions to parse the text content into sentences\r\n+                const splitedText = splitText(textContent.content);\r\n+                const sentences = joinText(splitedText);\r\n+                const sentenceObjects = createSentences(sentences);\r\n \r\n-            // Call the functions to parse the text content into sentences\r\n-            const splitedText = splitText(textContent.content);\r\n-            const sentences = joinText(splitedText);\r\n-            const sentenceObjects = createSentences(sentences);\r\n+                // Set the state with the sentence objects\r\n+                setSentences(sentenceObjects);\r\n+            }\r\n+        }, [textContent]);\r\n \r\n-            // Set the state with the sentence objects\r\n-            setSentences(sentenceObjects);\r\n-        }\r\n-    }, [textContent]);\r\n-\r\n     // Return the sentences as an array of objects\r\n     return sentences;\r\n };\r\n"
                }
            ],
            "date": 1706603575891,
            "name": "Commit-0",
            "content": "import { useState, useEffect } from \"react\";\r\n\r\n// Define the type for the text content object\r\ntype TextContent = {\r\n  id: number;\r\n  title: string;\r\n  content: string;\r\n};\r\n\r\n// Define the type for the sentence object\r\ntype Sentence = {\r\n  id: number;\r\n  text: string;\r\n};\r\n\r\nexport const useParseText = (textContent: TextContent): Sentence[] => {\r\n  // Use state to store the sentences\r\n  const [sentences, setSentences] = useState<Sentence[]>([]);\r\n\r\n  // Use useEffect hook to parse the text content into sentences\r\n  useEffect(() => {\r\n    // Define a function to split the text content by punctuation marks\r\n    const splitText = (text: string): string[] => {\r\n      // Use a regular expression to match the punctuation marks\r\n      const regex = /([.?!])\\s*(?=[A-Z])/g;\r\n      // Split the text by the punctuation marks and keep them in the result\r\n      const splitText = text.split(regex);\r\n      // Return the split text as an array of strings\r\n      return splitText;\r\n    };\r\n\r\n    // Define a function to join the split text into sentences\r\n    const joinText = (splitText: string[]): string[] => {\r\n      // Initialize an empty array to store the sentences\r\n      const sentences: string[] = [];\r\n      // Loop through the split text array\r\n      for (let i = 0; i < splitText.length; i += 2) {\r\n        // Check if the current element is the last one\r\n        if (i === splitText.length - 1) {\r\n          // Push the current element to the sentences array\r\n          sentences.push(splitText[i]);\r\n        } else {\r\n          // Concatenate the current element and the next element to form a sentence\r\n          const sentence = splitText[i] + splitText[i + 1];\r\n          // Push the sentence to the sentences array\r\n          sentences.push(sentence);\r\n        }\r\n      }\r\n      // Return the sentences as an array of strings\r\n      return sentences;\r\n    };\r\n\r\n    // Define a function to create sentence objects from the sentences array\r\n    const createSentences = (sentences: string[]): Sentence[] => {\r\n      // Initialize an empty array to store the sentence objects\r\n      const sentenceObjects: Sentence[] = [];\r\n      // Loop through the sentences array\r\n      for (let i = 0; i < sentences.length; i++) {\r\n        // Create a sentence object with an id and a text\r\n        const sentenceObject: Sentence = {\r\n          id: i + 1,\r\n          text: sentences[i],\r\n        };\r\n        // Push the sentence object to the sentence objects array\r\n        sentenceObjects.push(sentenceObject);\r\n      }\r\n      // Return the sentence objects as an array of objects\r\n      return sentenceObjects;\r\n    };\r\n\r\n    // Call the functions to parse the text content into sentences\r\n    const splitedText = splitText(textContent.content);\r\n    const sentences = joinText(splitedText);\r\n    const sentenceObjects = createSentences(sentences);\r\n\r\n    // Set the state with the sentence objects\r\n    setSentences(sentenceObjects);\r\n  }, [textContent]);\r\n\r\n  // Return the sentences as an array of objects\r\n  return sentences;\r\n};\r\n"
        }
    ]
}